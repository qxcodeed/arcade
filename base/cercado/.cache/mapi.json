{
    "title": "@cercado: Capturar Regi\u00f5es Cercadas",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@cercado: Capturar Regi\u00f5es Cercadas</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Capturar Regi\u00f5es Cercadas</h1>\n<p>Ap\u00f3s fazer essa atividade aqui, rode todos os casos de testes no site do leetcode para verificar se o c\u00f3digo est\u00e1 correto. <a href=\"https://leetcode.com/problems/surrounded-regions/\">Link para o problema</a></p>\n<p>Ap\u00f3s passar nos testes do site do leetcode, voc\u00ea pode marcar manualmente como feito.</p>\n<p>Voc\u00ea recebe uma matriz <code>m x n</code> chamada <code>board</code>, contendo letras <code>'X'</code> e <code>'O'</code>. O objetivo \u00e9 capturar regi\u00f5es que est\u00e3o <strong>cercadas</strong>.</p>\n<h2>Defini\u00e7\u00f5es</h2>\n<ul>\n<li><strong>Conectar</strong>: Uma c\u00e9lula est\u00e1 conectada \u00e0s c\u00e9lulas adjacentes horizontal ou verticalmente.</li>\n<li><strong>Regi\u00e3o</strong>: Uma regi\u00e3o \u00e9 formada conectando todas as c\u00e9lulas <code>'O'</code> adjacentes.</li>\n<li><strong>Cercada</strong>: Uma regi\u00e3o est\u00e1 cercada por c\u00e9lulas <code>'X'</code> se for poss\u00edvel conect\u00e1-la com <code>'X'</code> e nenhuma das c\u00e9lulas da regi\u00e3o estiver na borda do tabuleiro.</li>\n</ul>\n<h2>Objetivo</h2>\n<p>Para capturar uma regi\u00e3o cercada, substitua todos os <code>'O'</code> por <code>'X'</code> diretamente na matriz original. N\u00e3o \u00e9 necess\u00e1rio retornar nada.</p>\n<h2>Estrat\u00e9gia</h2>\n<ul>\n<li>Crie um mapa de visitados e visite todas as ilhas que est\u00e3o conectadas \u00e0s bordas do tabuleiro. Se est\u00e1 na borda, ent\u00e3o n\u00e3o \u00e9 cercada.</li>\n<li>Depois, percorra a matriz e substitua os <code>'O'</code> n\u00e3o visitados por <code>'X'</code>.</li>\n</ul>\n<h2>IO</h2>\n<ul>\n<li>Entrada<ul>\n<li>n\u00famero de linhas e n\u00famero de colunas da matriz</li>\n<li>matriz com letras <code>'X'</code> e <code>'O'</code></li>\n</ul>\n</li>\n<li>Sa\u00edda<ul>\n<li>matriz modificada com as regi\u00f5es cercadas capturadas com <code>'X'</code></li>\n</ul>\n</li>\n</ul>\n<h2>Testes</h2>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT\n4 4\nXXXX\nXOOX\nXXOX\nXOXX\n======== EXPECT\nXXXX\nXXXX\nXXXX\nXOXX\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n</code></pre></div>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT\n1 1\nX\n======== EXPECT\nX\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n</code></pre></div>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT\n5 5\nXXXXX\nXOOOX\nXXOXX\nXXXOX\nXXXOX\n======== EXPECT\nXXXXX\nXXXXX\nXXXXX\nXXXOX\nXXXOX\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n4 4\nXXXX\nXOOX\nXXOX\nXOXX\n======== EXPECT\nXXXX\nXXXX\nXXXX\nXOXX\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n1 1\nX\n======== EXPECT\nX\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5 5\nXXXXX\nXOOOX\nXXOXX\nXXXOX\nXXXOX\n======== EXPECT\nXXXXX\nXXXXX\nXXXXX\nXXXOX\nXXXOX\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// N\u00c3O ALTERE A ASSINATURA DA FUN\u00c7\u00c3O solve\nfunc solve(board [][]byte) {\n\t_ = board\n}\n\n// N\u00c3O ALTERE A MAIN\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tscanner.Scan()\n\tvar nrows, ncols int\n\tfmt.Sscanf(scanner.Text(), \"%d %d\", &nrows, &ncols)\n\tboard := make([][]byte, nrows)\n\tfor i := 0; i < nrows; i++ {\n\t\tscanner.Scan()\n\t\tboard[i] = []byte(scanner.Text())\n\t}\n\tsolve(board)\n\tfor _, row := range board {\n\t\tfmt.Println(string(row))\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
