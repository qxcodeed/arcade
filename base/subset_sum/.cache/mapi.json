{
    "title": "@subset_sum: Soma subconjuntos",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@subset_sum: Soma subconjuntos</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Soma subconjuntos</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/subset_sum/cover.jpg\" /></p>\n<p>O problema da <strong>Soma dos Subconjuntos</strong> consiste em verificar se existe algum subconjunto de um conjunto de inteiros que tenha a soma igual a um valor alvo. \u00c9 um problema cl\u00e1ssico da ci\u00eancia da computa\u00e7\u00e3o e pode ser resolvido eficientemente para pequenos conjuntos usando a t\u00e9cnica de <strong>Backtracking</strong>.</p>\n<h2>Entrada</h2>\n<p>A entrada \u00e9 composta por duas linhas:</p>\n<ul>\n<li>A primeira linha cont\u00e9m um n\u00famero inteiro <code>n</code> (<span class=\"arithmatex\">\\(1 \\leq n \\leq 20\\)</span>) e <code>k</code> (<span class=\"arithmatex\">\\(1 \\leq k \\leq 10^4\\)</span>), representando o n\u00famero de elementos no conjunto e a soma desejada, respectivamente.</li>\n<li>A segunda linha cont\u00e9m <code>n</code> inteiros separados por espa\u00e7o.<br />\n<span class=\"arithmatex\">\\(1 \\leq a_i \\leq 10^4\\)</span></li>\n</ul>\n<h2>Sa\u00edda</h2>\n<ul>\n<li>Uma resposta contendo \"true\" se \u00e9 poss\u00edvel fazer tal soma ou \"false\" caso contr\u00e1rio.</li>\n</ul>\n<p>\u00c9 garantido que <span class=\"arithmatex\">\\(\\sum_{i = 0}^{n-1} a_i &lt; 2^{31}\\)</span></p>\n<h3>Exemplo</h3>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n5 9\n3 34 4 12 5\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\ntrue\n</code></pre></div>\n<h3>Explica\u00e7\u00e3o</h3>\n<p>Para a soma 9 temos <span class=\"arithmatex\">\\(4 + 5 = 9\\)</span></p>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n6 10  \n3 34 4 12 5 2  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n6 19  \n3 34 4 12 5 2  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5 30  \n7 14 3 8 1  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n4 100  \n20 30 40 50  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n3 15  \n5 5 5  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n1 7  \n6  \n======== EXPECT\nfalse\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n2 13  \n13 1  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n6 0  \n1 2 3 4 5 6  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5 10  \n10 2 3 4 5  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5 11  \n1 2 3 4 5  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n3 9  \n2 4 5  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5 9999  \n2000 3000 1500 2500 1000  \n======== EXPECT\nfalse\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n7 10000  \n10 20 30 40 50 60 10000  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n20 10001  \n500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500  \n======== EXPECT\nfalse\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n4 5000  \n1000 2000 3000 4000  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n4 10000  \n1000 2000 3000 4000  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n3 10000  \n9999 1 10000  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5 1  \n1 2 3 4 5  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5 1  \n2 3 4 5 6  \n======== EXPECT\nfalse\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n6 7654  \n654 1000 2000 3000 4000 5000  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n6 7655  \n654 1000 2000 3000 4000 5000  \n======== EXPECT\nfalse\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10 9999  \n999 1000 1001 1002 1003 1004 1005 1006 1007 1008  \n======== EXPECT\nfalse\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n15 1234  \n100 200 300 400 134 250 50 600 10 9 1 5 7 3 20  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n20 10000  \n500 450 550 600 700 800 1000 1200 900 850 50 100 150 250 300 400 475 425 375 625  \n======== EXPECT\ntrue\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
