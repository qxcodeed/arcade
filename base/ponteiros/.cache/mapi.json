{
    "title": "@ponteiros: Implementando vector com ponteiros",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@ponteiros: Implementando vector com ponteiros</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@ponteiros: Implementando vector com ponteiros</h1>\n            <h1 id=\"implementando-vector-com-ponteiros\">Implementando vector com ponteiros</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/ponteiros/cover.jpg\" /></p>\n<p>Implemente as seguintes fun\u00e7\u00f5es do vetor din\u00e2mico.</p>\n<ul>\n<li>Ele deve ser iniciado utilizando aloca\u00e7\u00e3o din\u00e2mica e conter al\u00e9m do vetor de dados, <code>size</code> e <code>capacity</code> que definem o tamanho atual e a capacidade do vetor.</li>\n<li>Verifique no final utilizando o valgrind se voc\u00ea desalocou corrretamente todos os blocos de mem\u00f3ria.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case create\n$init 3\n$status\nsize:0 capacity:3\n$end\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case add\n$init 5\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n#__case tentar estourar\n\n$add 7 3 2 1\n$show\n[ 3 4 5 1 7 ]\n$end\n</code></pre>\n\n<h2 id=\"codigo-base\">C\u00f3digo Base</h2>\n<pre class=\"codehilite\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;sstream&gt;\nusing namespace std;\n\nstruct Vector{\n    int capacity;\n    int size;\n    int * data;\n};\n\nVector * vector_create(int capacity){\n    //crie um vetor din\u00e2micamente\n    //cria a struct\n    //crie o vetor data\n    //inicialize size e capacity\n}\n\nvoid vector_destroy(Vector * vector){\n    //destrua data\n    //destrua a struct\n}\n\nvoid vector_add(Vector * vector, int value){\n    //utilize capacity e size para verificar se ainda existe espa\u00e7o\n}\n\n//retorne a string no formato \n// [ a b c ]\nstring vector_show(Vector * vector){\n    //retorne uma string com os dados do vetor\n    //voc\u00ea pode usar uma stringstream como buffer\n    //stringstream ss;\n    //ss &lt;&lt; 5 &lt;&lt; &quot; eh inteiro&quot;;\n    //ss.str() ser\u00e1 &quot;5 eh inteiro&quot;\n}\n\n\n/* NAO MEXA DAQUI PRA BAIXO */\nint main(){\n    string line, cmd;\n    int value;\n    Vector * v = vector_create(0);\n    while(true){\n        getline(cin, line);\n        cout &lt;&lt; &quot;$&quot; &lt;&lt; line &lt;&lt; endl;\n        stringstream ss(line);\n        ss &gt;&gt; cmd;\n        if(cmd == &quot;end&quot;){\n            break;\n        } else if(cmd == &quot;init&quot;){\n            ss &gt;&gt; value;\n            if(v != nullptr)\n                vector_destroy(v);\n            v = vector_create(value);\n        } else if(cmd == &quot;status&quot;){\n            cout &lt;&lt; &quot;size:&quot; &lt;&lt; v-&gt;size &lt;&lt; &quot; capacity:&quot; &lt;&lt; v-&gt;capacity &lt;&lt; &quot;\\n&quot;;\n        } else if(cmd == &quot;add&quot;){\n            while(ss &gt;&gt; value)\n                vector_add(v, value);\n        } else if(cmd == &quot;show&quot;){\n            cout &lt;&lt; vector_show(v) &lt;&lt; endl;\n        } else {\n            cout &lt;&lt; &quot;fail: comando invalido\\n&quot;;\n        }\n    }\n    vector_destroy(v);\n}\n</code></pre>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT create\ninit 3\nstatus\nend\n======== EXPECT\n$init 3\n$status\nsize:0 capacity:3\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT add\ninit 5\nshow\nadd 3 4 5 1\nshow\nend\n======== EXPECT\n$init 5\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT tentar estourar\ninit 5\nshow\nadd 3 4 5 1\nshow\nadd 7 3 2 1\nshow\nend\n======== EXPECT\n$init 5\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$add 7 3 2 1\n$show\n[ 3 4 5 1 7 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 01 init vazio 10%\nshow\nend\n======== EXPECT\n$show\n[ ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02 add !%\ninit 10\nshow\nadd 3 4 5 1\nshow\nend\n======== EXPECT\n$init 10\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03 add mais !%\ninit 10\nshow\nadd 3 4 5 1\nshow\nadd 7\nshow\nend\n======== EXPECT\n$init 10\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$add 7\n$show\n[ 3 4 5 1 7 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07 add mais !%\ninit 5\nshow\nadd 3 4 5 1\nshow\nadd 7\nshow\nend\n======== EXPECT\n$init 5\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$add 7\n$show\n[ 3 4 5 1 7 ]\n$end\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
