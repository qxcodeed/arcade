{
    "title": "@list_basic: Lista Simplesmente Encadeada - CPP",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@list_basic: Lista Simplesmente Encadeada - CPP</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n  </style>\n</head>\n<body>\n<h1 id=\"lista-simplesmente-encadeada---cpp\">Lista Simplesmente Encadeada\n- CPP</h1>\n<p>Nesse exerc\u00edcio, implementaremos nossa primeira estrutura encadeada:\nLista Simplesmente Encadeada.</p>\n<p>Uma lista simplesmente encadeada \u00e9 uma estrutura de dados que\nconsiste em uma sequ\u00eancia de elementos, onde cada elemento (chamado de\nN\u00f3) cont\u00e9m dois componentes: uma informa\u00e7\u00e3o do elemento e um ponteiro\npara o pr\u00f3ximo N\u00f3 na sequ\u00eancia.</p>\n<p>Por simplicidade, implementaremos as informa\u00e7\u00f5es como apenas um\ninteiro.</p>\n<p>No arquivo lib.cpp, se encontra a classe SLinkedList que possui os\nseguintes m\u00e9todos:</p>\n<ul>\n<li>SLinkedList();</li>\n<li>~SLinkedList();</li>\n<li>bool hasInfo(int info);</li>\n<li>int get(int index);</li>\n<li>int operator<a href=\"int%20index\"></a>;</li>\n<li>void push_front(int info);</li>\n<li>void push_back(int info);</li>\n<li><del>void pop_front();</del></li>\n<li>void pop_back();</li>\n<li>void clear();</li>\n<li>int length();</li>\n<li>bool empty();</li>\n<li><del>Node* sucessor(Node* node);</del></li>\n<li>Node* predecessor(Node* node);</li>\n<li><del>void print();</del></li>\n</ul>\n<p>M\u00e9todos riscados j\u00e1 est\u00e3o implementados, voc\u00ea precisa implementar os\ndemais. A funcionalidade de cada m\u00e9todo est\u00e1 descrita em coment\u00e1rios no\npr\u00f3prio arquivo lib.cpp. Sua tarefa \u00e9 alterar o arquivo lib.cpp,\nimplementando as funcionalidades faltantes citadas. Seu c\u00f3digo deve\npassar no caso de teste para ser considerado correto.</p>\n<p>OBS.: N\u00e3o altere os m\u00e9todos j\u00e1 implementados.</p>\n<p>OBS.2: N\u00e3o precisa escrever a main() nem alterar o arquivo\nmain.cpp.</p>\n<!-- links .cache/draft -->\n<!-- links -->\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
