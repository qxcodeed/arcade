{
    "title": "@pilha_dupla: Pilha Dupla - CPP",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@pilha_dupla: Pilha Dupla - CPP</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n  </style>\n  <script src=\"https://polyfill.io/v3/polyfill.min.js?features=es6\"></script>\n  <script\n  src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml-full.js\"\n  type=\"text/javascript\"></script>\n</head>\n<body>\n<h1 id=\"pilha-dupla---cpp\">Pilha Dupla - CPP</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr class=\"header\">\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<h2 id=\"intro\">Intro</h2>\n<p>Neste exerc\u00edcio, voc\u00ea implementar\u00e1 uma <strong>Pilha Dupla</strong>\nusando um \u00fanico vetor para gerenciar duas pilhas diferentes: Pilha A e\nPilha B. Nessa configura\u00e7\u00e3o, o topo da <strong>Pilha A</strong> come\u00e7a\nno in\u00edcio do vetor, enquanto o topo da <strong>Pilha B</strong> come\u00e7a\nno final. Essa abordagem permite que as duas pilhas compartilhem o mesmo\nespa\u00e7o de armazenamento sem sobrepor seus elementos.</p>\n<p>As opera\u00e7\u00f5es de inser\u00e7\u00e3o, remo\u00e7\u00e3o e visualiza\u00e7\u00e3o de cada pilha\n(<code>push</code>, <code>pop</code>, <code>peek</code>) devem ser\nseparadas para cada uma das pilhas, garantindo que n\u00e3o haja sobrescrita\nde elementos entre Pilha A e Pilha B. O objetivo \u00e9 que as opera\u00e7\u00f5es\nsejam o mais eficientes poss\u00edvel <span\nclass=\"math inline\">\\(O(1)\\)</span>, sem desperd\u00edcio de espa\u00e7o.</p>\n<p>A estrutura de dados ser\u00e1 uma <strong>Lista Sequencial</strong> onde\nos elementos s\u00e3o armazenados em um array chamado <code>Arr</code>, com\nas informa\u00e7\u00f5es representadas como inteiros. O arquivo\n<code>lib.cpp</code> cont\u00e9m a classe <code>DoubleStack</code>, com\nm\u00e9todos j\u00e1 implementados e outros a serem desenvolvidos. Os m\u00e9todos\nriscados j\u00e1 est\u00e3o implementados.</p>\n<h3 id=\"m\u00e9todos-na-classe-doublestack\">M\u00e9todos na Classe\n<code>DoubleStack</code></h3>\n<ul>\n<li><del><code>DoubleStack()</code></del></li>\n<li><del><code>~DoubleStack()</code></del></li>\n<li><del><code>void pushA(int info)</code></del></li>\n<li><code>void popA()</code></li>\n<li><code>int peekA()</code></li>\n<li><code>void clearA()</code></li>\n<li><code>void pushB(int info)</code></li>\n<li><code>void popB()</code></li>\n<li><code>int peekB()</code></li>\n<li><code>void clearB()</code></li>\n<li><del><code>bool full()</code></del></li>\n<li><del><code>void print()</code></del></li>\n</ul>\n<h3 id=\"observa\u00e7\u00f5es\">Observa\u00e7\u00f5es</h3>\n<ul>\n<li><strong>OBS. 1:</strong> N\u00e3o altere os m\u00e9todos j\u00e1\nimplementados.</li>\n<li><strong>OBS. 2:</strong> N\u00e3o \u00e9 necess\u00e1rio escrever a fun\u00e7\u00e3o\n<code>main()</code>, pois ela j\u00e1 est\u00e1 implementada internamente no\nambiente de avalia\u00e7\u00e3o.</li>\n</ul>\n<h2 id=\"draft\">Draft</h2>\n<ul>\n<li>Implemente os m\u00e9todos faltantes no arquivo <code>lib.cpp</code> com\nbase nas descri\u00e7\u00f5es fornecidas para cada opera\u00e7\u00e3o.</li>\n</ul>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/pilha_dupla/.cache/draft/cpp/lib.cpp\">lib.cpp</a></li>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/pilha_dupla/.cache/draft/cpp/main.cpp\">main.cpp</a>\n<!-- links --></li>\n</ul></li>\n</ul>\n<h2 id=\"tests\">Tests</h2>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A entrada consistir\u00e1 em uma sequ\u00eancia de opera\u00e7\u00f5es realizadas nas\nPilhas A e B, incluindo inser\u00e7\u00f5es, remo\u00e7\u00f5es e verifica\u00e7\u00f5es de estado,\ncomo se ambas est\u00e3o cheias ou qual elemento est\u00e1 no topo.</li>\n</ul>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<ul>\n<li>A sa\u00edda ser\u00e1 composta pelos resultados das opera\u00e7\u00f5es, incluindo o\nvalor no topo de cada pilha ou mensagens indicando o estado de cada\npilha.</li>\n</ul>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste peek\ntest_peek\n======== EXPECT\nTESTE peek\ncapacidade == 4\npushA 10\npeekA == 10\npushA 20\npeekA == 10\npushB 30\npeekB == 30\npushB 40\npeekB == 40\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste push\ntest_push\n======== EXPECT\nTESTE push (capacity 6)\nPilha A: []\nPilha B: []\npushA 10\nPilha A: [10]\nPilha B: []\npushA 20\nPilha A: [10, 20]\nPilha B: []\npushA 30\nPilha A: [10, 20, 30]\nPilha B: []\npushA 40\nPilha A: [10, 20, 30, 40]\nPilha B: []\npushB 50\nPilha A: [10, 20, 30, 40]\nPilha B: [50]\npushB 60\nPilha A: [10, 20, 30, 40]\nPilha B: [50, 60]\npushA 70\nPilha A: [10, 20, 30, 40]\nPilha B: [50, 60]\npushB 80\nPilha A: [10, 20, 30, 40]\nPilha B: [50, 60]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste pop\ntest_pop\n======== EXPECT\nTESTE pop (capacity 6)\nPilha A: []\nPilha B: []\npushA 10\npushA 20\npushA 30\npushA 40\nPilha A: [10, 20, 30, 40]\nPilha B: []\npushB 50\npushB 60\nPilha A: [10, 20, 30, 40]\nPilha B: [50, 60]\npopA\nPilha A: [10, 20, 30]\nPilha B: [50, 60]\npushB 70\nPilha A: [10, 20, 30]\nPilha B: [50, 60, 70]\npushB 80\nPilha A: [10, 20, 30]\nPilha B: [50, 60, 70]\npopA\nPilha A: [10, 20]\nPilha B: [50, 60, 70]\npopA\nPilha A: [10]\nPilha B: [50, 60, 70]\npopA\nPilha A: []\nPilha B: [50, 60, 70]\npopA\nPilha A: []\nPilha B: [50, 60, 70]\npopB\nPilha A: []\nPilha B: [50, 60]\npopB\nPilha A: []\nPilha B: [50]\npopB\nPilha A: []\nPilha B: []\npopB\nPilha A: []\nPilha B: []\npushA 90\nPilha A: [90]\nPilha B: []\npushB 100\nPilha A: [90]\nPilha B: [100]\npopA\nPilha A: []\nPilha B: [100]\npopB\nPilha A: []\nPilha B: []\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste clear\ntest_clear\n======== EXPECT\nTESTE clear capacity(4)\npushA 10\npushA 20\npushB 30\npushB 40\nPilha A: [10, 20]\nPilha B: [30, 40]\nclearA\nPilha A: []\nPilha B: [30, 40]\nclearB\nPilha A: []\nPilha B: []\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "lib.cpp",
                "contents": "#include <iostream>\n#include <stack>\n\n// Pilha Dupla\n// Classe implementa duas pilhas sequenciais A e B que\n// compartilham o mesmo Array de elementos\n// Altere somente os campos marcados com \"TODO\"\nstruct DoubleStack {\n    int sizeA;  // Quantidade de elementos da pilha A\n    int sizeB;  // Quantidade de elementos da pilha B\n    int capacity;  // Quantidade m\u00e1xima de elementos permitidos dentro da pilha\n    int *Arr; // Array onde sao salvas ambas informacoes da pilha A e pilha B\n\n    DoubleStack(int capacity){\n        sizeA = 0;\n        sizeB = 0;\n        this->capacity = capacity;\n        Arr = new int[capacity];\n    }\n\n    ~DoubleStack() {\n        delete[] Arr;\n    }\n\n\n    bool full() {\n        return sizeA + sizeB == capacity;\n    }\n\n    ////              PILHA A             ////\n\n    // Adiciona um elemento no topo da pilha A.\n    // Nao faz nada caso a pilha esteja cheia.\n    // info: informacao do elemento a ser inserido\n    void pushA(int info) {\n        if(!full()) {\n            Arr[sizeA] = info;\n            sizeA++;\n        }\n    }\n    // Exemplo:\n    // Pilha A:[1,2,3]\n    // Pilha B:[4,5]\n    // pushA(10)\n    // Pilha A:[1,2,3,10]\n    // Pilha B:[4,5]\n\n\n    // Remove um elemento do topo da pilha.\n    // Nao faz nada caso a pilha esteja vazia.\n    void popA() {\n        // TODO: Complexidade O(1)\n    }\n    // Exemplo:\n    // Pilha A:[1,2,3]\n    // Pilha B:[4,5]\n    // popA()\n    // Pilha A:[1,2]\n    // Pilha B:[4,5]\n\n\n    // Retorna a informacao do elemento no topo da pilha A.\n    // Retorna -1, caso a pilha A esteja vazia.\n    int peekA() {\n        // TODO: Complexidade O(1)\n        return -1;\n\n    }\n    // Exemplo:\n    // Pilha A:[1,2,3]\n    // Pilha B:[4,5]\n    // peekA() == 3\n\n\n    // Remove todos os elementos da pilha\n    void clearA() {\n        // TODO: Complexidade O(1)\n    }\n    // Exemplo:\n    // Pilha A:[]\n    // Pilha B:[4,5]\n    // peekA() == 3\n\n\n    // Devolve true se vazia e false caso contrario\n    bool emptyA() {\n        // TODO: Complexidade O(1)\n        return false;\n    }\n    // Exemplo:\n    // Pilha A:[]\n    // Pilha B:[4,5]\n    // emptyA() == true\n\n\n    // Devolve true se cheia e false caso contrario\n    // Considere o tamanho da Pilha A e Pilha B\n\n    ///        PILHA B        ///\n\n    // Adiciona um elemento no topo da pilha A.\n    // Nao faz nada caso a pilha esteja cheia.\n    // info: informacao do elemento a ser inserido\n    void pushB(int info) {\n        // TODO: Complexidade O(1)\n        (void) info;\n    }\n    // Exemplo:\n    // Pilha A:[1,2,3]\n    // Pilha B:[4,5]\n    // pushB(10)\n    // Pilha A:[1,2,3]\n    // Pilha B:[4,5,10]\n\n\n    // Remove um elemento do topo da pilha.\n    // Nao faz nada caso a pilha esteja vazia.\n    void popB() {\n        // TODO: Complexidade O(1)\n\n    }\n    // Exemplo:\n    // Pilha A:[1,2,3]\n    // Pilha B:[4,5]\n    // popB()\n    // Pilha A:[1,2,3]\n    // Pilha B:[4]\n\n\n    // Retorna a informacao do elemento no topo da pilha A.\n    // Retorna -1, caso a pilha A esteja vazia.\n    int peekB() {\n        // TODO: Complexidade O(1)\n        return -1;\n    }\n    // Exemplo:\n    // Pilha A:[1,2,3]\n    // Pilha B:[4,5]\n    // peekB() == 5\n\n\n    // Remove todos os elementos da pilha\n    void clearB() {\n        // TODO: Complexidade O(1)\n    }\n    // Exemplo:\n    // Pilha A:[1,2,3]\n    // Pilha B:[4,5]\n    // clearB()\n    // Pilha A:[1,2,3]\n    // Pilha B:[]\n\n\n    // Devolve true se vazia e false caso contrario\n    bool emptyB() {\n        // TODO: Complexidade O(1)\n        return false;\n    }\n\n\n    // Printa as informacoes da lista\n    void print() {\n        std::cout << \"Pilha A: [\";\n        for (int i = 0; i < sizeA; i++) {\n            std::cout << Arr[i];\n            if (i < sizeA - 1) std::cout << \", \";\n        }\n        std::cout << \"]\\n\";\n\n        std::cout << \"Pilha B: [\";\n        for (int i = capacity - 1; i >= capacity - sizeB; i--) {\n            std::cout << Arr[i];\n            if (i > capacity - sizeB) std::cout << \", \";\n        }\n        std::cout << \"]\\n\";\n    }\n\n\n};\n",
                "encoding": 0
            },
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <map>\n#include \"lib.cpp\"\n\nusing std::cout;\nusing std::endl;\n\nbool LOG_ALLOCATED = false;\nstd::map<void*, int> allocated_nodes_status = {};\nstd::map<int, int> mapa = {};\nconst int ALLOCATED = 1;\nconst int DELETED = 2;\n\n// Salvar Nos alocados\n\ntemplate <typename K, typename V>\nvoid printMap(const std::map<K, V>& m) {\n    for (const auto& pair : m) {\n        std::cout << \"Key: \" << pair.first << \", Value: \" << pair.second << std::endl;\n    }\n}\n\n/////////////// TESTE CONSTRUCT ///////////////\n\nvoid test_constructor() {\n    cout << \"TESTE Construtor\" << endl;\n    DoubleStack* stack = new DoubleStack(8); \n\n    if(stack->sizeA == 0 && stack->sizeB == 0 && stack->capacity == 8) {\n        cout << \"Ok\" << endl;\n    } else {\n        cout << \"Atributos incorretos\";\n    }\n}\n\n/////////////// TESTE PUSH ///////////////\n\nvoid test_push() {\n    cout << \"TESTE push (capacity 6)\" << endl;\n    DoubleStack stack(6);\n    \n    stack.print();\n\n    cout << \"pushA 10\" << endl; stack.pushA(10);\n    stack.print();\n\n    cout << \"pushA 20\" << endl; stack.pushA(20);\n    stack.print();\n\n    cout << \"pushA 30\" << endl; stack.pushA(30);\n    stack.print();\n\n    cout << \"pushA 40\" << endl; stack.pushA(40);\n    stack.print();\n\n    cout << \"pushB 50\" << endl; stack.pushB(50);\n    stack.print();\n\n    cout << \"pushB 60\" << endl; stack.pushB(60);\n    stack.print();\n\n    cout << \"pushA 70\" << endl; stack.pushA(70);\n    stack.print();\n\n    cout << \"pushB 80\" << endl; stack.pushB(80);\n    stack.print();\n}\n\n\n/////////////// TESTE PEEK ///////////////\n\nvoid test_peek() {\n    allocated_nodes_status.clear();\n    cout << \"TESTE peek\" << endl;\n    cout << \"capacidade == 4\" << endl;\n    DoubleStack stack(4);\n\n    cout << \"pushA 10\" << endl; stack.pushA(10);\n    cout << \"peekA == \" << stack.peekA() << endl;\n\n    cout << \"pushA 20\" << endl; stack.pushA(10);\n    cout << \"peekA == \" << stack.peekA() << endl;\n\n    cout << \"pushB 30\" << endl; stack.pushB(30);\n    cout << \"peekB == \" << stack.peekB() << endl;\n\n    cout << \"pushB 40\" << endl; stack.pushB(40);\n    cout << \"peekB == \" << stack.peekB() << endl;\n}\n\n/////////////// TESTE POP ///////////////\n\nvoid test_pop() {\n    cout << \"TESTE pop (capacity 6)\" << endl;\n    DoubleStack stack(6);\n    \n    stack.print();\n\n    cout << \"pushA 10\" << endl; stack.pushA(10);\n    cout << \"pushA 20\" << endl; stack.pushA(20);\n    cout << \"pushA 30\" << endl; stack.pushA(30);\n    cout << \"pushA 40\" << endl; stack.pushA(40);\n    stack.print();\n\n    cout << \"pushB 50\" << endl; stack.pushB(50);\n    cout << \"pushB 60\" << endl; stack.pushB(60);\n    stack.print();\n\n    cout << \"popA\" << endl; stack.popA();\n    stack.print();\n\n    cout << \"pushB 70\" << endl; stack.pushB(70);\n    stack.print();\n\n    cout << \"pushB 80\" << endl; stack.pushB(80);\n    stack.print();\n\n\n    cout << \"popA\" << endl; stack.popA();\n    stack.print();\n\n    cout << \"popA\" << endl; stack.popA();\n    stack.print();\n    \n    cout << \"popA\" << endl; stack.popA();\n    stack.print();\n    \n    cout << \"popA\" << endl; stack.popA();\n    stack.print();\n\n    cout << \"popB\" << endl; stack.popB();\n    stack.print();\n    \n    cout << \"popB\" << endl; stack.popB();\n    stack.print();\n    \n    cout << \"popB\" << endl; stack.popB();\n    stack.print();\n    \n    cout << \"popB\" << endl; stack.popB();\n    stack.print();\n\n    cout << \"pushA 90\" << endl; stack.pushA(90);\n    stack.print();\n\n    cout << \"pushB 100\" << endl; stack.pushB(100);\n    stack.print();\n\n    cout << \"popA\" << endl; stack.popA();\n    stack.print();\n\n    cout << \"popB\" << endl; stack.popB();\n    stack.print();\n}\n\n/////////////// TESTE CLEAR ///////////////\n\nvoid test_clear() {\n    cout << \"TESTE clear capacity(4)\" << endl;\n    DoubleStack stack(4);\n\n    cout << \"pushA 10\" << endl; stack.pushA(10);\n    cout << \"pushA 20\" << endl; stack.pushA(20);\n    cout << \"pushB 30\" << endl; stack.pushB(30);\n    cout << \"pushB 40\" << endl; stack.pushB(40);\n    stack.print();\n\n    cout << \"clearA\" << endl; stack.clearA();\n    stack.print();\n\n    cout << \"clearB\" << endl; stack.clearB();\n    stack.print();\n}\n\n\n/////////////// FIM TESTES ///////////////\n\nint main() {\n    std::string input;\n    std::cin >> input;\n\n    if(input == \"test_peek\") test_peek();\n    if(input == \"test_push\") test_push();\n    if(input == \"test_pop\") test_pop();\n    if(input == \"test_clear\") test_clear();\n}\n",
                "encoding": 0
            }
        ]
    }
}
