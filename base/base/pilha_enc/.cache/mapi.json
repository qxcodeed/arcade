{
    "title": "@pilha_enc: Construindo Pilha com Lista Encadeada - CPP",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@pilha_enc: Construindo Pilha com Lista Encadeada - CPP</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n  </style>\n</head>\n<body>\n<h1 id=\"construindo-pilha-com-lista-encadeada---cpp\">Construindo Pilha\ncom Lista Encadeada - CPP</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr class=\"header\">\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<h2 id=\"intro\">Intro</h2>\n<p>Neste exerc\u00edcio, voc\u00ea implementar\u00e1 uma estrutura de dados fundamental\nna computa\u00e7\u00e3o: a <strong>Pilha</strong>. A pilha \u00e9 uma estrutura linear\nque segue o princ\u00edpio <strong>LIFO</strong> (Last In, First Out), o que\nsignifica que o \u00faltimo elemento inserido \u00e9 o primeiro a ser removido. Um\nexemplo cl\u00e1ssico de pilha \u00e9 uma pilha de pratos, onde voc\u00ea s\u00f3 pode\nremover o prato que est\u00e1 no topo.</p>\n<p>A pilha neste exerc\u00edcio \u00e9 implementada usando uma <strong>Lista\nSimplesmente Encadeada</strong>, onde cada n\u00f3 cont\u00e9m um valor inteiro e\num ponteiro para o pr\u00f3ximo n\u00f3. \u00c9 importante manter o atributo\n<code>size</code> atualizado ap\u00f3s cada opera\u00e7\u00e3o de inser\u00e7\u00e3o ou\nremo\u00e7\u00e3o.</p>\n<p><strong>Detalhes da implementa\u00e7\u00e3o</strong>: Por simplicidade, os\nelementos armazenados na pilha ser\u00e3o n\u00fameros inteiros.</p>\n<p>No arquivo <code>lib.cpp</code>, voc\u00ea encontrar\u00e1 a classe\n<code>Stack</code> com os seguintes m\u00e9todos:</p>\n<ul>\n<li><del><code>Stack()</code></del></li>\n<li><del><code>~Stack()</code></del></li>\n<li><code>void push(int info)</code></li>\n<li><code>void pop()</code></li>\n<li><code>int peek()</code></li>\n<li><code>void clear()</code></li>\n<li><del><code>bool empty()</code></del></li>\n<li><del><code>void print()</code></del></li>\n</ul>\n<p><strong>Importante</strong>: N\u00e3o altere os m\u00e9todos que j\u00e1 est\u00e3o\nimplementados no arquivo <code>lib.cpp</code>. Concentre-se em completar\nas funcionalidades faltantes conforme as instru\u00e7\u00f5es nos coment\u00e1rios. O\narquivo <code>main()</code> j\u00e1 est\u00e1 implementado no Moodle, ent\u00e3o voc\u00ea\nn\u00e3o precisa se preocupar com a entrada e sa\u00edda padr\u00e3o.</p>\n<p>Os m\u00e9todos riscados j\u00e1 est\u00e3o implementados. Voc\u00ea deve completar os\nm\u00e9todos <code>push</code>, <code>pop</code>, <code>peek</code> e\n<code>clear</code>. As descri\u00e7\u00f5es de cada m\u00e9todo est\u00e3o nos coment\u00e1rios\ndentro do arquivo <code>lib.cpp</code>. Sua tarefa \u00e9 completar o c\u00f3digo\nconforme especificado.</p>\n<h2 id=\"draft\">Draft</h2>\n<ul>\n<li>Implemente os m\u00e9todos faltantes no arquivo <code>lib.cpp</code>\nconforme as instru\u00e7\u00f5es fornecidas.</li>\n</ul>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/pilha_enc/.cache/draft/cpp/lib.cpp\">lib.cpp</a></li>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/pilha_enc/.cache/draft/cpp/main.cpp\">main.cpp</a>\n<!-- links --></li>\n</ul></li>\n</ul>\n<h2 id=\"tests\">Tests</h2>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A entrada para este exerc\u00edcio ser\u00e1 gerada automaticamente com uma\ns\u00e9rie de opera\u00e7\u00f5es que ser\u00e3o testadas na sua implementa\u00e7\u00e3o da classe\n<code>Stack</code>. Voc\u00ea n\u00e3o precisa implementar a leitura ou a escrita\nda entrada/sa\u00edda, pois isso j\u00e1 est\u00e1 dispon\u00edvel na infraestrutura do\nMoodle.</li>\n</ul>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<ul>\n<li>Seu c\u00f3digo deve garantir que as opera\u00e7\u00f5es de <code>push</code>,\n<code>pop</code>, <code>peek</code> E <code>clear</code> funcionem\ncorretamente e que o tamanho da pilha (<code>size</code>) seja\natualizado de forma precisa ap\u00f3s cada opera\u00e7\u00e3o.</li>\n</ul>\n<h3 id=\"dicas-para-implementa\u00e7\u00e3o\">Dicas para Implementa\u00e7\u00e3o</h3>\n<ol type=\"1\">\n<li><strong>Push</strong>: Crie um novo n\u00f3, fa\u00e7a-o apontar para o n\u00f3\natualmente no topo e atualize o ponteiro de topo para o novo n\u00f3.\nLembre-se de incrementar <code>size</code>.</li>\n<li><strong>Pop</strong>: Verifique se a pilha n\u00e3o est\u00e1 vazia antes de\nremover o n\u00f3 do topo. Atualize o ponteiro de topo e decremente\n<code>size</code>. N\u00e3o se esque\u00e7a de liberar a mem\u00f3ria do n\u00f3\nremovido.</li>\n<li><strong>Peek</strong>: Retorne o valor do elemento no topo,\ngarantindo que a pilha n\u00e3o esteja vazia.</li>\n<li><strong>Clear</strong>: Limpa toda a pilha e atualiza o\n<code>size</code>.</li>\n</ol>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste peek\ntest_peek\n======== EXPECT\nTESTE peek\n[]\npush 10\npeek == 10\npush 15\npeek == 15\npush 20\npeek == 20\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste push\ntest_push\n======== EXPECT\nTESTE push\npush 10\npush 15\npush 20\npush 25\nEsperado: [25 -> 20 -> 15 -> 10]\nPilha: [25 -> 20 -> 15 -> 10]\n4 Nos alocados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste pop\ntest_pop\n======== EXPECT\nTESTE pop\nPilha: [30 -> 25 -> 20 -> 15 -> 10]\npop\nPilha: [25 -> 20 -> 15 -> 10]\npop\nPilha: [20 -> 15 -> 10]\npop\nPilha: [15 -> 10]\npop\nPilha: [10]\npop\nPilha: []\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste tudo\ntest_all\n======== EXPECT\nTESTE todos (push, pop, peek, size)\npush 0 to 99\npeek == 99\nsize == 100\n\npush 100 to 199\npeek == 199\nsize == 200\n\npush 200 to 299\npeek == 299\nsize == 300\n\npush 300 to 399\npeek == 399\nsize == 400\n\npush 400 to 499\npeek == 499\nsize == 500\n\npush 500 to 599\npeek == 599\nsize == 600\n\npush 600 to 699\npeek == 699\nsize == 700\n\npush 700 to 799\npeek == 799\nsize == 800\n\npush 800 to 899\npeek == 899\nsize == 900\n\npush 900 to 999\npeek == 999\nsize == 1000\n\npop 100 times\npeek == 899\nsize == 900\n\npop 100 times\npeek == 799\nsize == 800\n\npop 100 times\npeek == 699\nsize == 700\n\npop 100 times\npeek == 599\nsize == 600\n\npop 100 times\npeek == 499\nsize == 500\n\npop 100 times\npeek == 399\nsize == 400\n\npop 100 times\npeek == 299\nsize == 300\n\npop 100 times\npeek == 199\nsize == 200\n\npop 100 times\npeek == 99\nsize == 100\n\npop 100 times\nLista: []\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "lib.cpp",
                "contents": "#include <iostream>\n\n// Node: classe utilizada para representar um No\n// NAO ALTERE ESSA CLASSE\nstruct Node {\n    int info; // Informacao salva pelo usuario na lista\n    Node *next; // Ponteiro para o proximo elemento da lista\n\n    Node(); // Construtor\n    Node(int info, Node *next=nullptr); // Construtor\n    \n    ~Node(); // Destrutor\n};\n\n// Stack ou Pilha\n// Altere somente os campos marcados com TODO\nstruct Stack {\n    Node *top; // Ponteiro para a cabeca da lista (primeiro No)\n    int size;  // Quantidade de elementos da pilha (salvar esse valor permite sua consulta em O(1))\n\n    Stack(){\n        top = nullptr;\n        size = 0;\n    }\n\n    ~Stack(){\n        clear();\n    }\n\n\n    // Adiciona um elemento no topo da pilha\n    // info: informacao do elemento a ser inserido\n    void push(int info){\n        // TODO\n        (void) info;\n    }\n\n\n    // Remove um elemento do topo da pilha.\n    // Nao faz nada caso a pilha esteja vazia.\n    void pop(){\n        // TODO\n    }\n\n\n    // Retorna a informacao do elemento no topo da pilha.\n    // Retorna -1, caso a pilha esteja vazia.\n    int peek(){\n        // TODO\n        return -1;\n    }\n\n\n    // Remove todos os elementos da pilha\n    void clear(){\n        // TODO\n    }\n\n\n    // Devolve true se cheia e false caso contrario\n    bool empty(){\n        return top == nullptr;\n    }\n\n\n    // Printa as informacoes da lista\n    void print(){\n        std::cout << \"[\";\n        for(Node* node = top; node != nullptr; node = node->next){\n            std::cout << node->info;\n            if(node->next != nullptr)\n                std::cout << \" -> \";\n        }\n        std::cout << \"]\" << std::endl;\n    }    \n};\n",
                "encoding": 0
            },
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <map>\n#include \"lib.cpp\"\n\nusing std::cout;\nusing std::endl;\n\nbool LOG_ALLOCATED = false;\nstd::map<void*, int> allocated_nodes_status = {};\nstd::map<int, int> mapa = {};\nconst int ALLOCATED = 1;\nconst int DELETED = 2;\n\n// Salvar Nos alocados\nNode::Node() {\n    allocated_nodes_status[this] = ALLOCATED;\n}\n\nNode::Node(int info, Node* next) {\n    allocated_nodes_status[this] = ALLOCATED;\n    this->info = info;\n    this->next = next;\n}\nNode::~Node() {\n    allocated_nodes_status[this] = DELETED;\n}\n\ntemplate <typename K, typename V>\nvoid printMap(const std::map<K, V>& m) {\n    for (const auto& pair : m) {\n        std::cout << \"Key: \" << pair.first << \", Value: \" << pair.second << std::endl;\n    }\n}\n\n/////////////// TESTE CONSTRUCT ///////////////\n\nvoid test_constructor() {\n    cout << \"TESTE Construtor\" << endl;\n    Stack* stack = new Stack(); \n\n    if(stack->top == nullptr && stack->size == 0) {\n        cout << \"Ok\" << endl;\n    } else {\n        cout << \"Atributos incorretos\";\n    }\n}\n\n\nvoid push_test(Stack &stack, int info) {\n    if(stack.top == nullptr) {\n        stack.top = new Node(info, nullptr);\n    } else {\n        stack.top = new Node(info, stack.top);\n    }\n}\n\nint peek_test(Stack &stack) {\n    if(stack.top == nullptr) {\n        return -1;\n    } else {\n        return stack.top->info;\n    }\n}\n\n/////////////// TESTE HAS_INFO ///////////////\n\nvoid test_peek() {\n    cout << \"TESTE peek\" << endl;\n    Stack stack;\n    \n    stack.print();\n\n    push_test(stack, 10);\n    cout << \"push 10\" << endl;\n    cout << \"peek == \" << stack.peek() << endl;\n\n    push_test(stack, 15);\n    cout << \"push 15\" << endl;\n    cout << \"peek == \" << stack.peek() << endl;\n    \n    push_test(stack, 20);\n    cout << \"push 20\" << endl;\n    cout << \"peek == \" << stack.peek() << endl;\n}\n\n\n/////////////// TESTE PUSH ///////////////\n\nvoid test_push() {\n    allocated_nodes_status.clear();\n    cout << \"TESTE push\" << endl;\n    Stack stack;\n\n    stack.push(10);\n    cout << \"push \" << 10 << endl;\n\n    stack.push(15);\n    cout << \"push \" << 15 << endl;\n\n    stack.push(20);\n    cout << \"push \" << 20 << endl;\n\n    stack.push(25);\n    cout << \"push \" << 25 << endl;\n\n    cout << \"Esperado: [25 -> 20 -> 15 -> 10]\" << endl;\n    cout << \"Pilha: \"; stack.print();\n    cout << allocated_nodes_status.size() << \" Nos alocados\" << endl;\n}\n\n/////////////// TESTE POP ///////////////\n\nvoid test_pop() {\n    cout << \"TESTE pop\" << endl;\n    Stack stack;\n\n    push_test(stack, 10);\n    push_test(stack, 15);\n    push_test(stack, 20);\n    push_test(stack, 25);\n    push_test(stack, 30);\n\n    Node *node1 = stack.top;\n    Node *node2 = node1->next;\n    Node *node3 = node2->next;\n    Node *node4 = node3->next;\n    Node *node5 = node4->next;\n\n    cout << \"Pilha: \"; stack.print();\n\n    cout << \"pop\" << endl; stack.pop();\n    cout << \"Pilha: \"; stack.print();\n\n    cout << \"pop\" << endl; stack.pop();\n    cout << \"Pilha: \"; stack.print();\n\n    cout << \"pop\" << endl; stack.pop();\n    cout << \"Pilha: \"; stack.print();\n\n    cout << \"pop\" << endl; stack.pop();\n    cout << \"Pilha: \"; stack.print();\n\n    cout << \"pop\" << endl; stack.pop();\n    cout << \"Pilha: \"; stack.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED &&\n                                allocated_nodes_status[node4] == DELETED &&\n                                allocated_nodes_status[node5] == DELETED;\n\n    if(all_nodes_deleted) {\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    } else {\n        cout << \"Existem Nos removidos da pilha que nao foram liberados na memoria\" << endl;\n    }\n}\n\n/////////////// TESTE CLEAR ///////////////\n\nvoid test_clear() {\n    cout << \"TESTE clear\" << endl;\n    Stack stack;\n\n    push_test(stack, 10);\n    push_test(stack, 15);\n    push_test(stack, 20);\n    push_test(stack, 25);\n    push_test(stack, 30);\n\n    Node *node1 = stack.top;\n    Node *node2 = node1->next;\n    Node *node3 = node2->next;\n    Node *node4 = node3->next;\n    Node *node5 = node4->next;\n\n    cout << \"Pilha: \"; stack.print();\n    cout << \"clear\" << endl;\n    cout << \"Pilha: \"; stack.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED &&\n                                allocated_nodes_status[node4] == DELETED &&\n                                allocated_nodes_status[node5] == DELETED;\n\n    if(all_nodes_deleted) {\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    } else {\n        cout << \"Existem Nos removidos da pilha que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE SIZE ///////////////\n\nvoid test_all() {\n    cout << \"TESTE todos (push, pop, peek, size)\" << endl;\n    Stack stack;\n\n    for(int i = 0; i < 1000; i++) {\n        stack.push(i);\n        if(i%100 == 0) {\n            cout << \"push \" << i << \" to \" << i + 99 << endl;\n        }\n        if(i%100 == 99) {\n            cout << \"peek == \" << stack.peek() << endl;\n            cout << \"size == \" << stack.size << endl << endl;\n        }\n    }\n\n    for(int i = 0; i < 1000; i++) {\n        stack.pop();\n        if(i%100 == 99) {\n            cout << \"pop 100 times\" << endl;\n            if(stack.size > 0) {\n                cout << \"peek == \" << stack.peek() << endl;\n                cout << \"size == \" << stack.size << endl << endl;\n            }\n        }\n    }\n\n    cout << \"Lista: \"; stack.print();\n}\n\n/////////////// FIM TESTES ///////////////\n\nint main() {\n    std::string input;\n    std::cin >> input;\n\n    if(input == \"test_peek\") test_peek();\n    if(input == \"test_push\") test_push();\n    if(input == \"test_pop\") test_pop();\n    if(input == \"test_all\") test_all();\n}\n",
                "encoding": 0
            }
        ]
    }
}
