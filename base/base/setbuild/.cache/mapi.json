{
    "title": "@setbuild: Conjunto usando Lista Sequencial Ordenada",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@setbuild: Conjunto usando Lista Sequencial Ordenada</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"conjunto-usando-lista-sequencial-ordenada\">Conjunto usando Lista\nSequencial Ordenada</h1>\n<ul>\n<li>Conjuntos normalmente s\u00e3o implementados com tabelas hash ou\n\u00e1rvores.</li>\n<li>Mas vamos implementar um conjunto usando uma lista sequencial\nordenada.</li>\n<li>A lista sequencial ordenada \u00e9 uma lista que mant\u00e9m os elementos em\nordem crescente sem repeti\u00e7\u00e3o.</li>\n<li>Vamos ter um custo de O(n) para inser\u00e7\u00e3o pela necessidade de\ndeslocar os elementos.</li>\n<li>Como os dados est\u00e3o em um vetor ordenado, podemos fazer uma busca\nbin\u00e1ria para encontrar o elemento.</li>\n<li>A busca bin\u00e1ria tem um custo de O(log n).</li>\n<li>A remo\u00e7\u00e3o de um elemento tamb\u00e9m tem um custo de O(n) pela\nnecessidade de deslocar os elementos.</li>\n</ul>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/setbuild/cover.jpg\"\nalt=\"_\" />\n<figcaption aria-hidden=\"true\">_</figcaption>\n</figure>\n<p>Implemente a classe do vetor din\u00e2mico.</p>\n<ul>\n<li><p>Cada linguagem vai ter um arquivo <code>extra.md</code> com\norienta\u00e7\u00f5es sobre a implementa\u00e7\u00e3o.</p></li>\n<li><p>Voc\u00ea deve criar a classe e implementar os m\u00e9todos conforme as\norienta\u00e7\u00f5es.</p></li>\n<li><p>Depois de implementar um m\u00e9todo, descomente e ajuste a entrada do\nm\u00e9todo na fun\u00e7\u00e3o main.</p></li>\n<li><p>Implemente apenas os m\u00e9todos necess\u00e1rios para passar no primeiro\nteste.</p></li>\n<li><p>Depois de passar no primeiro teste, implemente os m\u00e9todos\nnecess\u00e1rios para passar no segundo teste.</p></li>\n<li><p>Continue assim at\u00e9 passar em todos os testes.</p></li>\n<li><p>Os seguintes testes mostrar o comportamento esperado da classe\npara cada invoca\u00e7\u00e3o de m\u00e9todo.</p></li>\n</ul>\n<h2 id=\"drafts\">Drafts</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>go\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/setbuild/.cache/draft/go/extra.md\">extra.md</a></li>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/setbuild/.cache/draft/go/main.go\">main.go</a></li>\n</ul></li>\n<li>java\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/setbuild/.cache/draft/java/Main.java\">Main.java</a></li>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/setbuild/.cache/draft/java/extra.md\">extra.md</a>\n<!-- links --></li>\n</ul></li>\n</ul>\n<h2 id=\"testes\">Testes</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#__case insert</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 1</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 3</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[3]</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 4</span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[3,</span> 4]</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 5</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[3,</span> 4, 5]</span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 1</span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 3, 4, 5]</span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 2</span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 5]</span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 3</span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 5]</span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#__case contains</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 10</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 10 2 8 12 6</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[2,</span> 6, 8, 10, 12]</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$contains</span> 10</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">true</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$contains</span> 3</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">false</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb3\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#__case erase</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 6</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 1 2 3 4 5 6</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 5, 6]</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase</span> 3</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 4, 5, 6]</span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase</span> 1</span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[2,</span> 4, 5, 6]</span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase</span> 8</span>\n<span id=\"cb3-13\"><a href=\"#cb3-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">value</span> not found</span>\n<span id=\"cb3-14\"><a href=\"#cb3-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb3-15\"><a href=\"#cb3-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[2,</span> 4, 5, 6]</span>\n<span id=\"cb3-16\"><a href=\"#cb3-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT insert\ninit 1\nshow\ninsert 3\nshow\ninsert 4\nshow\ninsert 5\nshow\ninsert 1\nshow\ninsert 2\nshow\ninsert 3\nshow\nend\n======== EXPECT\n$init 1\n$show\n[]\n$insert 3\n$show\n[3]\n$insert 4\n$show\n[3, 4]\n$insert 5\n$show\n[3, 4, 5]\n$insert 1\n$show\n[1, 3, 4, 5]\n$insert 2\n$show\n[1, 2, 3, 4, 5]\n$insert 3\n$show\n[1, 2, 3, 4, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT contains\ninit 10\ninsert 10 2 8 12 6\nshow\ncontains 10\ncontains 3\nend\n======== EXPECT\n$init 10\n$insert 10 2 8 12 6\n$show\n[2, 6, 8, 10, 12]\n$contains 10\ntrue\n$contains 3\nfalse\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT erase\ninit 6\ninsert 1 2 3 4 5 6\nshow\nerase 3\nshow\nerase 1\nshow\nerase 8\nshow\nend\n======== EXPECT\n$init 6\n$insert 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$erase 3\n$show\n[1, 2, 4, 5, 6]\n$erase 1\n$show\n[2, 4, 5, 6]\n$erase 8\nvalue not found\n$show\n[2, 4, 5, 6]\n$end\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "java": [
            {
                "name": "Main.java",
                "contents": "import java.util.*;\npublic class Main {\n    static Scanner scanner = new Scanner(System.in);\n    public static void main(String[] args) {\n        // Set set = new Set(0);\n\n        while (true) {\n            System.out.print(\"$\");\n            String line = scanner.nextLine();\n            System.out.println(line);\n            String[] parts = line.trim().split(\"\\\\s+\");\n            if (parts.length == 0) continue;\n\n            String cmd = parts[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            } else if (cmd.equals(\"init\")) {\n                // int capacity = Integer.parseInt(parts[1]);\n                // set = new Set(capacity);\n            } else if (cmd.equals(\"insert\")) {\n                // for (int i = 1; i < parts.length; i++) {\n                //     int val = Integer.parseInt(parts[i]);\n                // }\n            } else if (cmd.equals(\"show\")) {\n            } else if (cmd.equals(\"erase\")) {\n                // int valErase = Integer.parseInt(parts[1]);\n            } else if (cmd.equals(\"contains\")) {\n                // int valCheck = Integer.parseInt(parts[1]);\n            } else if (cmd.equals(\"clear\")) {\n            } else {\n                System.out.println(\"comando invalido\");\n            }\n        }\n    }\n}\n",
                "encoding": 0
            },
            {
                "name": "extra.md",
                "contents": "# Java Set\n\n```ts\nclass Set {\n  - data: int[]                            ' Armazena os elementos da lista ordenada\n  - size: int                              ' N\u00famero atual de elementos na lista\n  - capacity: int                          ' Capacidade alocada da lista (tamanho de data)\n  --\n  + Set(): Set                             ' Construtor: cria nova lista com capacidade inicial padr\u00e3o\n  - reserve(newCapacity: int): void        ' Redimensiona a capacidade da lista se necess\u00e1rio (interno)\n  - binarySearch(value: int): int          ' Busca bin\u00e1ria: retorna \u00edndice ou -1 se n\u00e3o encontrado\n  - insertAt(value: int, index: int): void ' Insere value na posi\u00e7\u00e3o indicada, deslocando \u00e0 direita\n  - eraseAt(index: int): void              ' Remove o valor na posi\u00e7\u00e3o indicada, deslocando os demais\n  --\n  + insert(value: int): boolean            ' Insere valor mantendo ordem e sem duplicatas\n  + contains(value: int): boolean          ' Retorna true se o valor existir na lista\n  + erase(value: int): boolean             ' Remove valor se existir e retorna true, sen\u00e3o false\n  + toString(): String                     ' Representa\u00e7\u00e3o em string dos elementos da lista\n}\n```\n",
                "encoding": 0
            }
        ],
        "go": [
            {
                "name": "extra.md",
                "contents": "# Vector\n\n```ts\nclass Set {\n  - data: []int                             ' Guarda os elementos da lista ordenada\n  - size: int                               ' N\u00famero atual de elementos na lista\n  - capacity: int                           ' Capacidade alocada da lista (tamanho de data)\n  --\n  + NewSet(): *Set                          ' Cria uma nova lista ordenada com capacidade inicial padr\u00e3o\n  - reserve(newCapacity: int): void         ' Redimensiona a capacidade da lista se necess\u00e1rio (interno)\n  - binarySearch(value: int): int           ' Realiza busca bin\u00e1ria e retorna o \u00edndice do valor, ou -1 se n\u00e3o for encontrado\n  - insert(value: int, index: int): error   ' Insere value no \u00edndice indicado, deslocando os elementos \u00e0 direita\n  - erase(index: int): error                ' Remove o elemento na posi\u00e7\u00e3o index, deslocando os demais\n  --\n  + Insert(value: int): void                ' Insere um valor na posi\u00e7\u00e3o correta da lista, mantendo a ordem e sem duplicatas\n  + Contains(value: int): bool              ' Retorna true se o valor existir na lista, false caso contr\u00e1rio\n  + Erase(value: int): bool                 ' Remove o valor da lista, se existir, e retorna true. Retorna false se n\u00e3o for encontrado\n  + String(): string                        ' Retorna uma representa\u00e7\u00e3o em string dos elementos da lista\n}\n```\n",
                "encoding": 0
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tvar line, cmd string\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\t// v := NewSet(0)\n\tfor scanner.Scan() {\n\t\tfmt.Print(\"$\")\n\t\tline = scanner.Text()\n\t\tfmt.Println(line)\n\t\tparts := strings.Fields(line)\n\t\tif len(parts) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcmd = parts[0]\n\n\t\tswitch cmd {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"init\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\t\t// v = NewSet(value)\n\t\tcase \"insert\":\n\t\t\t// for _, part := range parts[1:] {\n\t\t\t// \tvalue, _ := strconv.Atoi(part)\n\t\t\t// }\n\t\tcase \"show\":\n\t\tcase \"erase\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\tcase \"contains\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\tcase \"clear\":\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "encoding": 0
            }
        ]
    }
}
