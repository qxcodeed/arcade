{
    "title": "@triangulo: Imprimindo ao contr\u00e1rio",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@triangulo: Imprimindo ao contr\u00e1rio</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Imprimindo ao contr\u00e1rio</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/triangulo/cover.jpg\" /></p>\n<p>Dado um vetor de inteiros A, imprima um tri\u00e2ngulo de n\u00fameros tal que na base do tri\u00e2ngulo estejam todos os elementos do vetor original, e tal que, a cada i-\u00e9simo n\u00edvel acima da base, o n\u00famero de elementos seja um a menos que no n\u00edvel inferior e cada elemento do i-\u00e9simo n\u00edvel seja a soma de dois elementos consecutivos do n\u00edvel inferior.</p>\n<ul>\n<li>Entrada<ul>\n<li>Os elementos da base.</li>\n</ul>\n</li>\n<li>Sa\u00edda<ul>\n<li>O tri\u00e2ngulo.</li>\n</ul>\n</li>\n</ul>\n<h2>Dica</h2>\n<p>Veja a resolu\u00e7\u00e3o da atividade \"Empilhamento da Recurs\u00e3o\" para entender como funciona a impress\u00e3o de tr\u00e1s pra frente.</p>\n<h2>Arquivos</h2>\n<p>Voc\u00ea deve implementar a fun\u00e7\u00e3o <code>processa</code> no arquivo <code>lib.cpp</code>.</p>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/triangulo/.cache/draft/cpp/main.cpp\">main.cpp</a></li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/triangulo/.cache/draft/cpp/user.cpp\">user.cpp</a></li>\n</ul>\n</li>\n<li>go<ul>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/triangulo/.cache/draft/go/main.go\">main.go</a></li>\n</ul>\n</li>\n<li>py<ul>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/triangulo/.cache/draft/py/main.py\">main.py</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Testes</h2>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01\n1 2 3\n========\n[ 8 ]\n[ 3 5 ]\n[ 1 2 3 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02\n3 2 1\n========\n[ 8 ]\n[ 5 3 ]\n[ 3 2 1 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03\n4 3 2 1\n========\n[ 20 ]\n[ 12 8 ]\n[ 7 5 3 ]\n[ 4 3 2 1 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 04\n1 1 2 3 5 8\n========\n[ 89 ]\n[ 34 55 ]\n[ 13 21 34 ]\n[ 5 8 13 21 ]\n[ 2 3 5 8 13 ]\n[ 1 1 2 3 5 8 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01\n1 2 3\n======== EXPECT\n[ 8 ]\n[ 3 5 ]\n[ 1 2 3 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02\n3 2 1\n======== EXPECT\n[ 8 ]\n[ 5 3 ]\n[ 3 2 1 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n4 3 2 1\n======== EXPECT\n[ 20 ]\n[ 12 8 ]\n[ 7 5 3 ]\n[ 4 3 2 1 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04\n1 1 2 3 5 8\n======== EXPECT\n[ 89 ]\n[ 34 55 ]\n[ 13 21 34 ]\n[ 5 8 13 21 ]\n[ 2 3 5 8 13 ]\n[ 1 1 2 3 5 8 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n1 2 4 8 16 32 64\n======== EXPECT\n[ 729 ]\n[ 243 486 ]\n[ 81 162 324 ]\n[ 27 54 108 216 ]\n[ 9 18 36 72 144 ]\n[ 3 6 12 24 48 96 ]\n[ 1 2 4 8 16 32 64 ]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\n\nvoid processa(std::vector<int> vet);\n\nint main(){\n    std::string line;\n    std::getline(std::cin, line);\n    std::stringstream ss(line);\n    std::vector<int> vet;\n    int value {};\n    while(ss >> value) {\n        vet.push_back(value);\n    }\n    processa(vet);\n}\n",
                "type": "show"
            },
            {
                "name": "user.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\n\nvoid processa(std::vector<int> vet){\n    (void) vet;\n    // 1. defina o ponto de parada\n    // 2. monte o vetor auxiliar com os resultados das somas\n    // 3. chame recursivamente a fun\u00e7\u00e3o processa para o vetor auxiliar\n    // 4. imprima o vetor original\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc processa(vet []int) {\n\t_ = vet;\n\t// 1. defina o ponto de parada\n\t// 2. monte o vetor auxiliar com os resultados das somas\n\t// 3. chame recursivamente a fun\u00e7\u00e3o processa para o vetor auxiliar\n\t// 4. imprima o vetor original\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tif !scanner.Scan() {\n\t\treturn\n\t}\n\tline := scanner.Text()\n\tparts := strings.Fields(line)\n\tvet := []int{}\n\tfor _, part := range parts {\n\t\tif value, err := strconv.Atoi(part); err == nil {\n\t\t\tvet = append(vet, value)\n\t\t}\n\t}\n\tprocessa(vet)\n}\n\nfunc Join[T any](v []T, sep string) string {\n\tif len(v) == 0 {\n\t\treturn \"\"\n\t}\n\ts := \"\"\n\tfor i, x := range v {\n\t\tif i > 0 {\n\t\t\ts += sep\n\t\t}\n\t\ts += fmt.Sprintf(\"%v\", x)\n\t}\n\treturn s\n}\n",
                "type": "show"
            }
        ],
        "py": [
            {
                "name": "main.py",
                "contents": "#!/usr/bin/env python3\nfrom typing import List\n\ndef processa(vet: List[int]) -> None:\n    if len(vet) == 0:\n        return\n    aux: List[int] = []\n    for i in range(len(vet) - 1):\n        aux.append(vet[i] + vet[i + 1])\n    processa(aux)\n    out = [str(x) for x in vet]\n    print(\"[ {} ]\".format(\" \".join(out)))\n    # $$\n    # pass\n    # ==\n    # 1. defina o ponto de parada\n    # 2. monte o vetor auxiliar com os resultados das somas\n    # 3. chame recursivamente a fun\u00e7\u00e3o processa para o vetor auxiliar\n    # 4. imprima o vetor original\n\n\ndef main():\n    line = input().split(\" \")\n    vet = [int(x) for x in line]\n    processa(vet)\n\nif __name__ == \"__main__\":\n    main()\n",
                "type": "show"
            }
        ]
    }
}
