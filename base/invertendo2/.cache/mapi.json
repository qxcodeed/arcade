{
    "title": "@invertendo2: Pilha - invertendo com pilhas auxiliares",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@invertendo2: Pilha - invertendo com pilhas auxiliares</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Pilha - invertendo com pilhas auxiliares</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<h2>Intro</h2>\n<p>Neste exerc\u00edcio, o objetivo \u00e9 inverter os elementos de uma pilha. A pilha original ser\u00e1 fornecida com uma sequ\u00eancia de inteiros, e voc\u00ea dever\u00e1 reordenar os elementos de modo que a sequ\u00eancia final seja invertida em rela\u00e7\u00e3o \u00e0 original.</p>\n<p>Para realizar essa invers\u00e3o, voc\u00ea ter\u00e1 acesso a duas pilhas auxiliares, <strong>PilhaB</strong> e <strong>PilhaC</strong>, e n\u00e3o \u00e9 permitido o uso de outras estruturas auxiliares, como arrays ou listas.</p>\n<h2>Draft</h2>\n<ul>\n<li>Voc\u00ea deve alterar o m\u00e9todo <code>invertStack</code> no arquivo <code>main.cpp</code></li>\n</ul>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/invertendo2/.cache/draft/cpp/main.cpp\">main.cpp</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Tests</h2>\n<h3>Entrada</h3>\n<ul>\n<li>A entrada consistir\u00e1 em um n\u00famero inteiro seguido de uma sequ\u00eancia de elementos da pilha.</li>\n</ul>\n<h3>Sa\u00edda</h3>\n<ul>\n<li>A sa\u00edda deve exibir a pilha com os elementos na ordem invertida.</li>\n</ul>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n5\n1 2 3 4 5\n========\nPilha: [ 1 2 3 4 5 ]\ninvert\nPilha: [ 5 4 3 2 1 ] \n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste 2\n1\n100 \n======== EXPECT\nPilha: [ 100 ]\ninvert\nPilha: [ 100 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 3\n6\n1 2 3 4 5 6\n======== EXPECT\nPilha: [ 1 2 3 4 5 6 ]\ninvert\nPilha: [ 6 5 4 3 2 1 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 4\n100\n23 73 56 20 93 81 9 18 57 16 55 84 49 15 22 76 4 48 19 67 78 40 35 17 24 33 94 47 86 45 98 27 43 64 79 7 37 75 92 89 87 85 34 60 8 46 72 95 2 61 54 11 90 59 99 91 65 38 71 63 13 30 39 100 28 69 26 32 5 14 21 31 68 1 36 62 53 66 97 42 58 74 77 51 10 44 80 12 3 50 83 25 70 82 41 96 6 88 29 52\n======== EXPECT\nPilha: [ 23 73 56 20 93 81 9 18 57 16 55 84 49 15 22 76 4 48 19 67 78 40 35 17 24 33 94 47 86 45 98 27 43 64 79 7 37 75 92 89 87 85 34 60 8 46 72 95 2 61 54 11 90 59 99 91 65 38 71 63 13 30 39 100 28 69 26 32 5 14 21 31 68 1 36 62 53 66 97 42 58 74 77 51 10 44 80 12 3 50 83 25 70 82 41 96 6 88 29 52 ]\ninvert\nPilha: [ 52 29 88 6 96 41 82 70 25 83 50 3 12 80 44 10 51 77 74 58 42 97 66 53 62 36 1 68 31 21 14 5 32 26 69 28 100 39 30 13 63 71 38 65 91 99 59 90 11 54 61 2 95 72 46 8 60 34 85 87 89 92 75 37 7 79 64 43 27 98 45 86 47 94 33 24 17 35 40 78 67 19 48 4 76 22 15 49 84 55 16 57 18 9 81 93 20 56 73 23 ]\n\n=======\nInput= main\nOutput=[ azul branco cinza dourado escarlate ]\n[ escarlate dourado cinza branco azul ]\n[ azul branco cinza dourado escarlate ]\n[ escarlate dourado cinza branco azul ]\n>>>>>>> origin/sequencial-encadeada\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 1\n0\n======== EXPECT\nPilha: [ ]\ninvert\nPilha: [ ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 2\n1\n100\n======== EXPECT\nPilha: [ 100 ]\ninvert\nPilha: [ 100 ]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <stack>\nusing std::stack;\n\n// Altere essa funcao.\n// Utilizando apenas a pilhaA, e duas pilhas vazias pilhaB e pilhaC\n// inverta os elementos da pilhaA.\nvoid invertStack(stack<int> &pilhaA, stack<int> &pilhaB, stack<int> &pilhaC){\n    //TODO: Complexidade tempo O(n), onde n = tamanho da pilha\n    //      Complexidade de memoria O(1)\n\n    // OBS: Nao e permitido alocar qualquer outra estrutura auxiliar\n    //      como vetor. Utilize somente as 3 pilhas recebidas nos parametros.\n\n    // OBS2: No parametro (stack<int> &pilha) utilizamos\n    //      o \"&pilha\" para receber a variavel como referencia\n    //      dessa forma, alteramos a pilha original sem\n    //      utilizar ponteiros explicitamente.\n\n    // DICA: Voce deve usar somente os metodos de pilha nativa do C++:\n    // pilha.top();       // retorna o elemento do topo (equivalente ao nosso 'peek')\n    // pilha.push(info);  // adiciona info no topo da pilha\n    // pilha.pop();       // remove do topo da pilha\n    // pilha.empty();     // retorna se a pilha esta vazia\n    // pilha.clear();     // remove todos os elementos da pilha\n    (void) pilhaA;\n    (void) pilhaB;\n    (void) pilhaC;\n\n}\n// Exemplo:\n// pilhaA: [10,20,30,40]\n// pilhaB: []\n// pilhaC: []\n// invertStack(pilhaA, pilhaB, pilhaC)\n// pilhaA: [40,30,20,10]\n// pilhaB: []\n// pilhaC: []\n\n\nvoid printStackRec(stack<int> &pilha){\n    if(!pilha.empty()){\n        int el = pilha.top();\n        pilha.pop();\n        printStackRec(pilha);\n        std::cout << el << \" \";\n    }\n}\n\nvoid printStack(stack<int> pilha){\n    std::cout << \"Pilha: [ \";\n    printStackRec(pilha);\n    std::cout << \"]\" << std::endl;\n}\n\nint main(){\n    int n;\n    stack<int> pilha;\n\n    std::cin >> n;\n    for(int i = 0; i < n; i++){\n        int el;\n        std::cin >> el;\n        pilha.push(el);\n    }\n\n    stack<int> pb, pc;\n    printStack(pilha);\n    std::cout << \"invert\" << std::endl; invertStack(pilha, pb, pc);\n    printStack(pilha);\n}\n",
                "type": "show"
            }
        ]
    }
}
