{
    "title": "@duplamente: Lista Duplamente Encadeada",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@duplamente: Lista Duplamente Encadeada</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@duplamente: Lista Duplamente Encadeada</h1>\n            <h1 id=\"lista-duplamente-encadeada\">Lista Duplamente Encadeada</h1>\n<p>Nesse exerc\u00edcio, implementaremos uma varia\u00e7\u00e3o de lista encadeada: a\u00a0Lista Duplamente Encadeada.</p>\n<p>Uma lista duplamente encadeada \u00e9 uma estrutura de lista semelhante a uma lista simplesmente encadeada, mas com uma diferen\u00e7a: cada n\u00f3 cont\u00e9m um ponteiro para o pr\u00f3ximo n\u00f3 e outro ponteiro para o n\u00f3 anterior. Dessa forma, podemos acessar o antecessor de um n\u00f3 de forma simples e r\u00e1pida.</p>\n<p>Por simplicidade, implementaremos as informa\u00e7\u00f5es dos N\u00f3s apenas como um inteiro.\nNo arquivo\u00a0lib.cpp, se encontra a classe DLinkedList\u00a0que possui os seguintes m\u00e9todos:</p>\n<ul>\n<li>~~DLinkedList();~~</li>\n<li>~~\\~DLinkedList();~~</li>\n<li>bool hasInfo(int info);</li>\n<li>~~void push_front(int info);~~</li>\n<li>void push_back(int info);</li>\n<li>void pop_front(int info);</li>\n<li>void pop_back(int info);</li>\n<li>void remove_one(int info);</li>\n<li>~~bool length();~~</li>\n<li>~~void empty();~~</li>\n<li>~~void print();~~</li>\n</ul>\n<p>M\u00e9todos riscados j\u00e1 est\u00e3o implementados, voc\u00ea precisa implementar os demais.</p>\n<p>A funcionalidade de cada m\u00e9todo est\u00e1 descrita em coment\u00e1rios no pr\u00f3prio arquivo\u00a0lib.cpp.\u00a0Sua tarefa \u00e9 alterar o arquivo\u00a0lib.cpp, implementando as funcionalidades faltantes citadas.\u00a0Seu c\u00f3digo deve passar no caso de teste para ser considerado correto.\nOBS.: N\u00e3o altere os m\u00e9todos j\u00e1 implementados.OBS.2: N\u00e3o precisa escrever a main(). Ela j\u00e1 est\u00e1 implementada internamente no Moodle.</p>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste has_info \ntest_has_info\n======== EXPECT\nTESTE has_info\nLista: [30 <-> 20 <-> 15 <-> 10]\nhas_info -1 == 0\nhas_info 0 == 0\nhas_info 5 == 0\nhas_info 10 == 1\nhas_info 15 == 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste push_back\ntest_push_back\n======== EXPECT\nTESTE push_back\npush_back 10\npush_back 15\npush_back 20\npush_back 30\nLista: [10 <-> 15 <-> 20 <-> 30]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste pop_front\ntest_pop_front\n======== EXPECT\nTESTE pop_front\nEsperado: [30 <-> 20 <-> 15 <-> 10]\nLista: [30 <-> 20 <-> 15 <-> 10]\npop_front\nEsperado: [20 <-> 15 <-> 10]\nLista: [20 <-> 15 <-> 10]\npop_front\nEsperado: [15 <-> 10]\nLista: [15 <-> 10]\npop_front\nEsperado: [10]\nLista: [10]\npop_front\nEsperado: []\nLista: []\npop_front\nEsperado: []\nLista: []\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste pop_back\ntest_pop_back\n======== EXPECT\nTESTE pop_back\nEsperado: [30 <-> 20 <-> 15 <-> 10]\nLista: [30 <-> 20 <-> 15 <-> 10]\npop_back\nEsperado: [30 <-> 20 <-> 15]\nLista: [30 <-> 20 <-> 15]\npop_back\nEsperado: [30 <-> 20]\nLista: [30 <-> 20]\npop_back\nEsperado: [30]\nLista: [30]\npop_back\nEsperado: []\nLista: []\npop_back\nEsperado: []\nLista: []\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste remove_one\ntest_remove_one\n======== EXPECT\nTESTE remove_one\nEsperado: [10 <-> 20 <-> 30 <-> 10 <-> 20 <-> 30]\nLista: [10 <-> 20 <-> 30 <-> 10 <-> 20 <-> 30]\nremove_one 30\nEsperado: [10 <-> 20 <-> 10 <-> 20 <-> 30]\nLista: [10 <-> 20 <-> 10 <-> 20 <-> 30]\nremove_one 30\nEsperado: [10 <-> 20 <-> 10 <-> 20]\nLista: [10 <-> 20 <-> 10 <-> 20]\nremove_one 30\nEsperado: [10 <-> 20 <-> 10 <-> 20]\nLista: [10 <-> 20 <-> 10 <-> 20]\nremove_one 20\nEsperado: [10 <-> 10 <-> 20]\nLista: [10 <-> 10 <-> 20]\nremove_one 20\nEsperado: [10 <-> 10]\nLista: [10 <-> 10]\nremove_one 10\nEsperado: [10]\nLista: [10]\nremove_one 10\nEsperado: []\nLista: []\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "lib.cpp",
                "contents": "/*       QUESTIONARIO (RESPONDA COM HONESTIDADE)\n\nQ1 - Voce resolveu esse problema em grupo? Se sim, indique com quem fez.\n\n\n\nQ2 - Quanto tempo voc\u00ea demorou para resolve-lo?\n\n\n\nQ3 - Voce considera o problema facil, medio ou dificil? Qual maior dificuldade encontrada?\n\n\n\n*/\n\n/*       ATIVIDADE        */\n#include <iostream>\n\n// Node: classe utilizada para representar um No\n// NAO ALTERE ESSA CLASSE\nstruct Node {\n    int info; // Informacao salva pelo usuario na lista\n    Node *next; // Ponteiro para o proximo elemento da lista\n    Node *previous; // Ponteiro para o elemento anterior da lista\n\n    // Construtor\n    Node(int info, Node *next=NULL, Node *previous=NULL);\n    ~Node(); // Destrutor\n};\n\n// Double Linked List ou\n// Lista Duplamente Encadeada\n// Altere somente os campos marcados com TODO\nstruct DLinkedList {\n    Node *head;   // Ponteiro para o No cabeca da lista (primeiro No)\n    Node *tail;  //  Ponteiro para o No cauda da lista (ultimo No)\n\n    DLinkedList(){\n        this->head = NULL;\n        this->tail = NULL;\n    }\n\n    ~DLinkedList(){ // Destrutor\n        clear();\n    }\n\n    // Retorna true se uma informacao pertence a lista\n    // index: posicao do elemento\n    bool hasInfo(int info){\n        // TODO: Complexidade O(n)\n        //DEL!\n        for(Node *temp = head; temp != NULL; temp = temp->next){\n            if(temp->info == info)\n                return true;\n        }\n        return false;\n        \n        //ACT!\n        (void)info;\n        return false;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.hasInfo(20) == true\n    // L.hasInfo(100) == false\n\n    // Adiciona um elemento no inicio da lista\n    // info: informacao do elemento a ser inserido\n    void push_front(int info){\n        // Complexidade: O(1)\n        if(head == NULL){ // lista vazia\n            // havera somente um No, ambos 'head' e 'tail'\n            // apontam para o primeiro No\n            head = tail = new Node(info, NULL, NULL);\n        }else{ // lista com pelo menos 1 No\n            Node* newNode = new Node(info, NULL, NULL);\n            newNode->next = head;\n            head->previous = newNode;\n            head = newNode;\n            // Adicionar um elemento no inicio\n            // nao altera 'tail'\n        }\n    }\n    // Exemplo:\n    // L == 10 <-> 20 <-> 15 <-> 50\n    // L.push_front(30)\n    // L == 30 <-> 10 <-> 20 <-> 15 <-> 50\n\n\n    // Adiciona um elemento ao final da lista\n    // info: informacao do elemento a ser inserido\n    void push_back(int info){\n        // TODO: Complexidade O(1)\n        // dica: utilize o 'tail' para realizar\n        //       a operacao em O(1)\n        //DEL!\n        if(tail == NULL){\n            head = tail = new Node(info, NULL, NULL);\n        }else{\n            Node* newNode = new Node(info, NULL, tail);\n            tail->next = newNode;\n            tail = newNode;\n        }\n\n        //ACT!\n        (void)info;\n    }\n    // Exemplo:\n    // L == 10 <-> 20 <-> 15 <-> 50\n    // L.push_back(30)\n    // L == 10 <-> 20 <-> 15 <-> 50 <-> 30\n\n\n    // Remove o primeiro elemento da lista.\n    // Nao faz nada se a lista esta vazia\n    void pop_front(){\n        // TODO: Complexidade O(1)\n        // dica: separe em 3 casos: lista vazia, somente 1 No, mais de 1 No\n        //DEL!\n        if(head == NULL) return;\n        if(head == tail){\n            delete head;\n            head = tail = NULL;\n        }else{\n            Node* temp = head;\n            head = head->next;\n            head->previous = NULL;\n            delete temp;\n        }\n    }\n    // Exemplo:\n    // L == 10 <-> 20 <-> 15 <-> 50\n    // L.pop_front()\n    // L == 20 <-> 15 <-> 50\n\n\n    // Remove o ultimo elemento da lista.\n    // Nao faz nada se a lista esta vazia\n    void pop_back(){\n        // TODO: Complexidade O(1)\n        // dica: utilize o 'tail->previous' para realizar\n        //       a operacao em O(1)\n        //DEL!\n        if(tail == NULL) return;\n        if(head == tail){\n            delete head;\n            head = tail = NULL;\n        }else{\n            Node* temp = tail;\n            tail = tail->previous;\n            tail->next = NULL;\n            delete temp;\n        }\n    }\n    // Exemplo:\n    // L == 10 <-> 20 <-> 15 <-> 50\n    // L.pop_back()\n    // L == 10 <-> 20 <-> 15\n\n    // Remove a ocorrencia do primeiro No com\n    // uma informacao especifica.\n    // Nao faz nada se nao existe No.\n    // info: informacao do No a ser removido.\n    void remove_one(int info){\n        //TODO: Complexidade O(n)\n        //DEL!\n        for(Node *temp = head; temp != NULL; temp = temp->next){\n            if(temp->info == info){\n                if(temp == head){\n                    pop_front();\n                }else if(temp == tail){\n                    pop_back();\n                }else{\n                    temp->previous->next = temp->next;\n                    temp->next->previous = temp->previous;\n                    delete temp;\n                }\n                return;\n            }\n        }\n\n        //ACT!\n        (void)info;\n    }\n    // Exemplo:\n    // L == 10 <-> 20 <-> 15 <-> 50\n    // L.removeOne(20)\n    // L == 10 <-> 15 <-> 50\n\n    // Exemplo 2:\n    // L == 2 <-> 10 <-> 4 <-> 6 <-> 4 <-> 4\n    // L.removeOne(4)\n    // L == 2 <-> 10 <-> 6 <-> 4 <-> 4\n    // L.removeOne(4)\n    // L == 2 <-> 10 <-> 6 <-> 4\n    // L.removeOne(4)\n    // L == 2 <-> 10 <-> 6\n    // L.removeOne(4)\n    // L == 2 <-> 10 <-> 6\n\n\n    // Deixa a lista vazia, removendo todos os Nos\n    void clear(){\n        Node* current = head;\n        while (current != NULL) {\n            Node* nextNode = current->next;\n            delete current;\n            current = nextNode;\n        }\n        head = tail = NULL;\n    }\n    // Exemplo:\n    // L == 10 <-> 20 <-> 15 <-> 50\n    // L.clear()\n    // L == []\n\n\n    // Retorna o numero de elementos da lista\n    int length(){\n        int count = 0;\n        for(Node *temp = head; temp != NULL; temp = temp->next)\n            count++;\n\n        return count;\n    }\n    // Exemplo:\n    // L == 10 <-> 20 <-> 15 <-> 50\n    // L.length() == 4\n\n\n    // Devolve true se vazia e false caso contrario\n    bool empty(){\n        return head == NULL;\n    }\n    // Exemplo:\n    // L == 10 <-> 20 <-> 15 <-> 50\n    // L.empty() == false\n    // L == ''\n    // L.empty() == true\n\n    // Printa as informacoes da lista\n    void print(){\n        std::cout << \"Lista: [\";\n        for(Node* node = head; node != NULL; node = node->next){\n            std::cout << node->info;\n            if(node->next != NULL)\n                std::cout << ((node->next->previous == node) ? \" <-> \" : \" -> \");\n        }\n        std::cout << \"]\" << std::endl;\n    }    \n};\n\n",
                "encoding": 0
            },
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao\n#include <iostream>\n#include <map>\n//#include \"solution_lib.cpp\"\n#include \"lib.cpp\"\n\nusing std::cout;\nusing std::endl;\n\nbool LOG_ALLOCATED = false;\nstd::map<void*, int> allocated_nodes_status = {};\nstd::map<int, int> mapa = {};\nconst int ALLOCATED = 1;\nconst int DELETED = 2;\n\n// Salvar Nos alocados\nNode::Node(int info, Node* next, Node* previous){\n    allocated_nodes_status[this] = ALLOCATED;\n    this->info = info;\n    this->next = next;\n    this->previous = previous;\n}\nNode::~Node() {\n    allocated_nodes_status[this] = DELETED;\n}\n\ntemplate <typename K, typename V>\nvoid printMap(const std::map<K, V>& m) {\n    for (const auto& pair : m) {\n        std::cout << \"Key: \" << pair.first << \", Value: \" << pair.second << std::endl;\n    }\n}\n\n/////////////// TESTE CONSTRUCT ///////////////\n\nvoid test_constructor(){\n    cout << \"TESTE Construtor\" << endl;\n    DLinkedList* list = new DLinkedList(); \n\n    if(list->head == NULL){\n        cout << \"Ok\" << endl;\n    }else{\n        cout << \"Atributos incorretos\";\n    }\n}\n\n\n/////////////// TESTE HAS_INFO ///////////////\n\nvoid test_has_info(){\n    cout << \"TESTE has_info\" << endl;\n    DLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    list.print();\n    cout << \"has_info \" << -1  << \" == \" << list.hasInfo(-1) << endl;\n    cout << \"has_info \" << 0  << \" == \" << list.hasInfo(0) << endl;\n    cout << \"has_info \" << 5  << \" == \" << list.hasInfo(5) << endl;\n    cout << \"has_info \" << 10 << \" == \" << list.hasInfo(10) << endl;\n    cout << \"has_info \" << 15 << \" == \" << list.hasInfo(15) << endl;\n}\n\n/////////////// TESTE PUSH_FRONT ///////////////\n\nvoid test_push_front(){\n    cout << \"TESTE push_front\" << endl;\n    DLinkedList list;\n\n    cout << \"push_front \" << 10 << endl;\n    cout << \"push_front \" << 15 << endl;\n    cout << \"push_front \" << 20 << endl;\n    cout << \"push_front \" << 30 << endl;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    cout << \"Esperado: [30 <-> 20 <-> 15 <-> 10]\" << endl;\n    list.print();\n    cout << allocated_nodes_status.size() << \" Nos alocados\" << endl;\n}\n\n/////////////// TESTE PUSH_BACK ///////////////\n\nbool test_previous_and_tail(DLinkedList &list){\n    if(list.head == NULL) return true;\n\n    if(list.head->previous != NULL){\n        cout << \"O valor previous do primeiro No deve ser NULL.\" << endl;\n        return false;\n    }\n    Node *temp;\n    for(temp = list.head; temp->next != NULL; temp = temp->next){\n        if(temp->next->previous != temp){\n            cout << \"Valor atribuido ao previous incorreto.\" << endl;\n            return false;\n        }\n    }\n    if(temp != list.tail){\n        cout << \"O valor atribuido a 'tail' esta incorreto.\" << endl;\n    }\n    return true;\n}\n\nvoid test_push_back(){\n    cout << \"TESTE push_back\" << endl;\n    DLinkedList list;\n\n    cout << \"push_back \" << 10 << endl;\n    cout << \"push_back \" << 15 << endl;\n    cout << \"push_back \" << 20 << endl;\n    cout << \"push_back \" << 30 << endl;\n\n    list.push_back(10);\n    list.push_back(15);\n    list.push_back(20);\n    list.push_back(30);\n\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n}\n\n/////////////// TESTE POP_FRONT ///////////////\n\nvoid test_pop_front(){\n    cout << \"TESTE pop_front\" << endl;\n    DLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    Node* node0 = list.head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    cout << \"Esperado: [30 <-> 20 <-> 15 <-> 10]\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: [20 <-> 15 <-> 10]\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: [15 <-> 10]\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: [10]\" << endl;\n    if(!test_previous_and_tail(list)) return;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE POP_BACK ///////////////\n\nvoid test_pop_back(){\n    cout << \"TESTE pop_back\" << endl;\n    DLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    Node* node0 = list.head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    cout << \"Esperado: [30 <-> 20 <-> 15 <-> 10]\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: [30 <-> 20 <-> 15]\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: [30 <-> 20]\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: [30]\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: []\" << endl;\n    if(!test_previous_and_tail(list)) return;\n    list.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE REMOVE_ONE ///////////////\n\nvoid test_remove_one(){\n    cout << \"TESTE remove_one\" << endl;\n    DLinkedList list;\n\n    list.push_front(30);\n    list.push_front(20);\n    list.push_front(10);\n    list.push_front(30);\n    list.push_front(20);\n    list.push_front(10);\n    // 10, 20, 30, 10, 20, 30 //\n    Node* node0 = list.head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n    Node* node4 = node3->next;\n    Node* node5 = node4->next;\n\n    cout << \"Esperado: [10 <-> 20 <-> 30 <-> 10 <-> 20 <-> 30]\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n\n    cout << \"remove_one 30\" << endl; list.remove_one(30);\n    cout << \"Esperado: [10 <-> 20 <-> 10 <-> 20 <-> 30]\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n\n    cout << \"remove_one 30\" << endl; list.remove_one(30);\n    cout << \"Esperado: [10 <-> 20 <-> 10 <-> 20]\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n\n    cout << \"remove_one 30\" << endl; list.remove_one(30);\n    cout << \"Esperado: [10 <-> 20 <-> 10 <-> 20]\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n\n    cout << \"remove_one 20\" << endl; list.remove_one(20);\n    cout << \"Esperado: [10 <-> 10 <-> 20]\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n\n    cout << \"remove_one 20\" << endl; list.remove_one(20);\n    cout << \"Esperado: [10 <-> 10]\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n\n    cout << \"remove_one 10\" << endl; list.remove_one(10);\n    cout << \"Esperado: [10]\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n\n    cout << \"remove_one 10\" << endl; list.remove_one(10);\n    cout << \"Esperado: []\" << endl;\n    list.print();\n    if(!test_previous_and_tail(list)) return;\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED &&\n                                allocated_nodes_status[node4] == DELETED &&\n                                allocated_nodes_status[node5] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE CLEAR ///////////////\n\nvoid test_clear(){\n    cout << \"TESTE clear\" << endl;\n    DLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    Node* node0 = list.head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    cout << \"Esperado: [30 <-> 20 <-> 15 <-> 10]\" << endl;\n    list.print();\n\n    cout << \"clear\" << endl; list.clear();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    cout << \"clear\" << endl; list.clear();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE LENGTH ///////////////\n\nvoid test_length(){\n    cout << \"TESTE length\" << endl;\n    DLinkedList list;\n\n    list.print();\n    cout << \"length \" << \" == \" << list.length() << endl;    \n    list.push_front(42);\n\n    list.print();\n    cout << \"length \" << \" == \" << list.length() << endl;    \n    list.push_front(42);\n\n    list.print();\n    cout << \"length \" << \" == \" << list.length() << endl;\n}\n\n\n/////////////// TESTE EMPTY ///////////////\n\nvoid test_empty(){\n    cout << \"TESTE empty\" << endl;\n    DLinkedList list;\n\n    list.print();\n    cout << \"empty \" << \" == \" << list.empty() << endl;    \n    list.push_front(42);\n\n    list.print();\n    cout << \"empty \" << \" == \" << list.empty() << endl;    \n}\n\n/////////////// TESTE DESTRUCTOR ///////////////\n\nvoid test_destructor(){\n    cout << \"TESTE destructor\" << endl;\n    DLinkedList* list = new DLinkedList;\n\n    list->push_front(10);\n    list->push_front(15);\n    list->push_front(20);\n    list->push_front(30);\n\n    Node* node0 = list->head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n    list->print();\n    delete list;\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// FIM TESTES ///////////////\n\nint main(){\n    std::string input;\n    std::cin >> input;\n\n    if(input == \"test_has_info\") test_has_info();\n    if(input == \"test_push_front\") test_push_front();\n    if(input == \"test_push_back\") test_push_back();\n    if(input == \"test_pop_front\") test_pop_front();\n    if(input == \"test_pop_back\") test_pop_back();\n    if(input == \"test_remove_one\") test_remove_one();\n}\n\n\n",
                "encoding": 0
            }
        ]
    }
}
