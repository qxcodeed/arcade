{
    "title": "@sudoku: Sudoku",
    "description": "# Sudoku\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/sudoku/cover.jpg)\n\nO Sudoku tem v\u00e1rias vers\u00f5es para diferentes dificuldades. O mais conhecido \u00e9 o modelo 9x9.\n\nO site [sudoku](https://www.sudokuonline.io/pt/criancas) tem vers\u00f5es simplificadas para crian\u00e7as com vers\u00f5es 4x4 e 6x6.\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/sudoku/__exemplos.png)\n\nSeu objetivo \u00e9 resolver um sudoku NxN com n\u00fameros de 1 a N.\n\nN pode ser 4 ou 9\n\n- Se for 4, um n\u00famero de 1 a 4 deve aparecer em cada linha, coluna e quadrante 2x2.\n- Se for 9, um n\u00famero de 1 a 9 deve aparecer em cada linha, coluna e quadrante 3x3.\n\n- Entrada\n  - Valor de N\n  - Uma matriz N x N composta por n\u00fameros de 1 a N e pontos para os valores faltantes.\n- Sa\u00edda\n  - O problema resolvido.\n\n```txt\n>>>>>>>>\n4\n1.3.\n2...\n...4\n.1..\n========\n1432\n2341\n3214\n4123\n<<<<<<<<\n\n>>>>>>>>\n4\n..2.\n.1..\n..4.\n.3..\n========\n3421\n2134\n1243\n4312\n<<<<<<<<\n\n\n>>>>>>>>\n4\n....\n.2.1\n1.3.\n....\n========\n4123\n3241\n1432\n2314\n<<<<<<<<\n\n>>>>>>>>\n4\n....\n3.2.\n.1.4\n....\n========\n1243\n3421\n2134\n4312\n<<<<<<<<\n\n>>>>>>>>\n9\n53..7....\n6..195...\n.98....6.\n8...6...3\n4..8.3..1\n7...2...6\n.6....28.\n...419..5\n....8..79\n========\n534678912\n672195348\n198342567\n859761423\n426853791\n713924856\n961537284\n287419635\n345286179\n<<<<<<<<\n\n\n```\n\n## Ajuda\n\nUse a mesma l\u00f3gica do problema dist\u00e2ncia para percorrer a matriz. Voc\u00ea pode usar um \u00edndice progressivo e converter esse valor para linha e coluna como no exemplo abaixo:\n\n- Crie fun\u00e7\u00f5es diferentes para verificar se o n\u00famero j\u00e1 existe na linha, coluna e quadrante.\n- Para calcular o quadrante, voc\u00ea pode usar a divis\u00e3o inteira e o resto da divis\u00e3o.\n- A fun\u00e7\u00e3o abaixo retorna uma lista com todos os valores do quadrante do elemento.\n- A fun\u00e7\u00e3o \u00e9 feita propositalmente feia para voc\u00ea entender como ela funciona.\n\n```go\nfunc quadrante(matriz [][]rune, lin, col int) []rune {\n    dim := len(matriz)\n    l := (lin // dim) * dim\n    c := (col // dim) * dim\n\n    if dim == 4 {\n        return []rune{\n            matriz[l+0][c], matriz[l+0][c+1],\n            matriz[l+1][c], matriz[l+1][c+1],\n        }\n    }\n\n    if dim == 9 {\n        return []rune{\n            matriz[l+0][c], matriz[l+0][c+1], matriz[l+0][c+2],\n            matriz[l+1][c], matriz[l+1][c+1], matriz[l+1][c+2],\n            matriz[l+2][c], matriz[l+2][c+1], matriz[l+2][c+2],\n        }\n    }\n    return nil\n}\n```\n\n```go\nfunc resolver(matriz [][]rune, index int) bool {\n    nl := len(matriz)\n    l := index / nl\n    c := index % nl\n    if index == nl * nl {\n        return True\n    }\n    // se n\u00e3o for ponto, continue\n    // para todos os n\u00fameros de [1 a N]\n    //     se o n\u00famero n\u00e3o estiver na linha, coluna e quadrante\n    //         coloque o n\u00famero na matriz\n    //         se resolver(matriz, index + 1):\n    //             return True\n    //         matriz[l][c] = '.' // desfaz a tentativa\n    // return False\n}\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n4\n1.3.\n2...\n...4\n.1..\n======== EXPECT\n1432\n2341\n3214\n4123\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n4\n..2.\n.1..\n..4.\n.3..\n======== EXPECT\n3421\n2134\n1243\n4312\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n4\n....\n.2.1\n1.3.\n....\n======== EXPECT\n4123\n3241\n1432\n2314\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n4\n....\n3.2.\n.1.4\n....\n======== EXPECT\n1243\n3421\n2134\n4312\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n9\n53..7....\n6..195...\n.98....6.\n8...6...3\n4..8.3..1\n7...2...6\n.6....28.\n...419..5\n....8..79\n======== EXPECT\n534678912\n672195348\n198342567\n859761423\n426853791\n713924856\n961537284\n287419635\n345286179\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
