{
    "title": "@hex: Desenhando labirinto perfeito",
    "description": "# Desenhando labirinto perfeito\n\n- Baixe o rascunho em go.\n- Navegue at\u00e9 a pasta do projeto em ed/database/hex\n\n```bash\ntouch grid.svg # cria pela primeira vez o arquivo\ncode grid.svg # abre o arquivo no vscode\ntko run *.go # executa o c\u00f3digo\n```\n\n- Abre o arquivo grid.svg e veja o svg sendo atualizado em tempo real.\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "matrix.go",
                "contents": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"math/rand/v2\"\n\t\"os\"\n)\n\ntype Pos struct {\n\tL int\n\tC int\n}\n\nfunc NewPos(l, c int) Pos {\n\treturn Pos{L: l, C: c}\n}\n\nfunc (v Pos) GetHexNeighbors() []Pos {\n\tdelta := 1\n\tif v.L%2 == 0 {\n\t\tdelta = 0\n\t}\n\treturn []Pos{\n\t\t{v.L - 1, delta + v.C - 1}, // up left\n\t\t{v.L - 1, delta + v.C},     // up right\n\t\t{v.L, v.C + 1},             // right\n\t\t{v.L + 1, delta + v.C},     // down right\n\t\t{v.L + 1, delta + v.C - 1}, // down left\n\t\t{v.L, v.C - 1},             // left\n\t}\n}\n\nfunc (v Pos) GetSquareNeighbors() []Pos {\n\treturn []Pos{\n\t\t{v.L - 1, v.C}, // up\n\t\t{v.L, v.C + 1}, // right\n\t\t{v.L + 1, v.C}, // down\n\t\t{v.L, v.C - 1}, // left\n\t}\n}\n\ntype Matrix struct {\n\tNL   int\n\tNC   int\n\tInfo [][]rune\n}\n\nfunc NewMatrix(nl, nc int, color rune) *Matrix {\n\tmatrix := Matrix{\n\t\tNL:   nl,\n\t\tNC:   nc,\n\t\tInfo: make([][]rune, nl),\n\t}\n\tfor l := range matrix.Info {\n\t\tmatrix.Info[l] = make([]rune, nc)\n\t\tfor c := range matrix.Info[l] {\n\t\t\tmatrix.Info[l][c] = color // default color\n\t\t}\n\t}\n\treturn &matrix\n}\n\nfunc (m *Matrix) Contains(pos Pos) bool {\n\treturn pos.L >= 0 && pos.L < m.NL && pos.C >= 0 && pos.C < m.NC\n}\n\nfunc (m *Matrix) Get(pos Pos) rune {\n\tif m.Contains(pos) {\n\t\treturn m.Info[pos.L][pos.C]\n\t}\n\treturn ' '\n}\n\nfunc (m *Matrix) Set(pos Pos, color rune) {\n\tif m.Contains(pos) {\n\t\tm.Info[pos.L][pos.C] = color\n\t}\n}\n\nfunc Shuffle[T any](slice []T) []T {\n\tother := make([]T, len(slice))\n\tcopy(other, slice)\n\n\trand.Shuffle(len(other), func(i, j int) {\n\t\tother[i], other[j] = other[j], other[i]\n\t})\n\treturn other\n}\n\nfunc getColor(c rune) string {\n\tcolorCodeMap := map[rune]string{\n\t\t'r': \"red\", 'g': \"green\", 'b': \"blue\", 'w': \"white\", 'k': \"black\", 'y': \"yellow\",\n\t\t'o': \"orange\", 'p': \"purple\", 'm': \"magenta\", 'c': \"cyan\",\n\t}\n\tif color, ok := colorCodeMap[c]; ok {\n\t\treturn color\n\t}\n\treturn \"\"\n}\n\nfunc (m *Matrix) SaveSquareGrid(filename string) {\n\ta := 30.0 // tamanho do lado do quadrado\n\t// C\u00e1lculo aproximado da largura e altura do SVG\n\tsvgWidth := float64(m.NC) * a\n\tsvgHeight := float64(m.NL) * a\n\t// Cria (ou sobrescreve) o arquivo grid.svg\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\t// Cabe\u00e7alho do SVG\n\tfmt.Fprintf(file, `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"%f\" height=\"%f\">`+\"\\n\", svgWidth, svgHeight)\n\t// Gera\u00e7\u00e3o dos quadrados com preenchimento branco\n\tfor i := range m.NL {\n\t\tfor j := range m.NC {\n\t\t\t// F\u00f3rmula para o centro do quadrado:\n\t\t\tcx := float64(j)*a + a/2\n\t\t\tcy := float64(i)*a + a/2\n\t\t\t// Adiciona o ret\u00e2ngulo SVG para o quadrado com preenchimento branco\n\t\t\tcolor := getColor(m.Get(Pos{i, j}))\n\t\t\tif color == \"\" {\n\t\t\t\tcolor = \"white\"\n\t\t\t}\n\t\t\tfmt.Fprintf(file, `<rect x=\"%f\" y=\"%f\" width=\"%f\" height=\"%f\" stroke=\"black\" fill=\"%s\"/>`+\"\\n\", cx-a/2, cy-a/2, a, a, color)\n\t\t}\n\t}\n\t// Fecha o SVG\n\tfmt.Fprintln(file, \"</svg>\")\n}\n\nfunc (m *Matrix) SaveHexGrid(filename string) {\n\n\tnl := m.NL // n\u00famero de linhas\n\tnc := m.NC // n\u00famero de colunas\n\ta := 30.0  // tamanho do lado do hex\u00e1gono\n\t// Para hex\u00e1gonos pointy top:\n\t// - A dist\u00e2ncia horizontal entre os centros \u00e9: sqrt(3)*a\n\t// - A dist\u00e2ncia vertical entre os centros \u00e9: 1.5*a\n\t// C\u00e1lculo aproximado da largura e altura do SVG\n\tsvgWidth := math.Sqrt(3)*a*float64(nc) + math.Sqrt(3)/2*a\n\tsvgHeight := 1.5*a*float64(nl-1) + 2*a\n\t// Cria (ou sobrescreve) o arquivo grid.svg\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\t// Cabe\u00e7alho do SVG\n\tfmt.Fprintf(file, `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"%f\" height=\"%f\">`+\"\\n\", svgWidth, svgHeight)\n\t// Gera\u00e7\u00e3o dos hex\u00e1gonos com preenchimento branco\n\t// Cria um grande rect branco para cobrir o fundo\n\tfmt.Fprintf(file, `<rect x=\"0\" y=\"0\" width=\"%f\" height=\"%f\" fill=\"black\"/>`+\"\\n\", svgWidth, svgHeight)\n\tfor i := range nl {\n\t\tfor j := range nc {\n\t\t\t// F\u00f3rmula para o centro do hex\u00e1gono:\n\t\t\t// Em linhas \u00edmpares (come\u00e7ando em 0), deslocamos o centro para a direita em (sqrt(3)/2*a)\n\t\t\tcx := float64(j) * math.Sqrt(3) * a\n\t\t\tif i%2 == 1 {\n\t\t\t\tcx += math.Sqrt(3) / 2 * a\n\t\t\t}\n\t\t\t// Ajuste vertical: desloca o grid para baixo em \"a\" para evitar corte superior\n\t\t\tcy := float64(i)*1.5*a + a\n\t\t\t// Calcula os 6 v\u00e9rtices do hex\u00e1gono\n\t\t\tpoints := \"\"\n\t\t\tfor k := range 6 {\n\t\t\t\tangle := math.Pi/6 + float64(k)*math.Pi/3 // \u00e2ngulo inicial de 30\u00b0 (\u03c0/6)\n\t\t\t\tx := cx + a*math.Cos(angle) + a*math.Sqrt(3)/2\n\t\t\t\ty := cy + a*math.Sin(angle)\n\t\t\t\tpoints += fmt.Sprintf(\"%f,%f \", x, y)\n\t\t\t}\n\t\t\t// Adiciona o pol\u00edgono SVG para o hex\u00e1gono com preenchimento branco\n\t\t\tcolor := getColor(m.Get(Pos{i, j}))\n\t\t\tif color == \"\" {\n\t\t\t\tcolor = \"white\"\n\t\t\t}\n\t\t\tfmt.Fprintf(file, `<polygon points=\"%s\" stroke=\"black\" fill=\"%s\"/>`+\"\\n\", points, color)\n\t\t}\n\t}\n\n\t// Fecha o SVG\n\tfmt.Fprintln(file, \"</svg>\")\n}\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\nconst interval = 150 * time.Millisecond\n\n// ----------------------- CREATE MAZE -----------------------\n\nfunc dig(matrix *Matrix, pos Pos, wall, path, hole rune) {\n\t//count how many neighbors are 'w' or are outside the matrix\n\tcount := 0\n\tneibs := pos.GetHexNeighbors()\n\tfor _, n := range neibs {\n\t\tif !matrix.Contains(n) {\n\t\t\tcount++\n\t\t} else if matrix.Get(n) == hole || matrix.Get(n) == path {\n\t\t\tcount++\n\t\t}\n\t}\n\tif count == 0 || count == 1 {\n\t\tmatrix.Set(pos, path)\n\t\tmatrix.SaveHexGrid(\"grid.svg\")\n\t\ttime.Sleep(interval)\n\t\tfor _, n := range Shuffle(pos.GetHexNeighbors()) {\n\t\t\tdig(matrix, n, wall, path, hole)\n\t\t}\n\t\tmatrix.Set(pos, hole)\n\t\tmatrix.SaveHexGrid(\"grid.svg\")\n\t\ttime.Sleep(interval)\n\t}\n}\n\nfunc createPerfectMaze(nl, nc int) *Matrix {\n\tmatrix := NewMatrix(nl, nc, 'b')\n\tdig(matrix, Pos{1, 1}, 'c', 'y', 'w')\n\treturn matrix\n}\n\n// ----------------------- BURNING -----------------------\n\nfunc Burn(matrix *Matrix, pos Pos) {\n\tif !matrix.Contains(pos) {\n\t\treturn\n\t}\n\tif matrix.Get(pos) != 'g' {\n\t\treturn\n\t}\n\tmatrix.Set(pos, 'r') //queimando\n\tmatrix.SaveHexGrid(\"grid.svg\")\n\t//wait for 1 second\n\ttime.Sleep(interval)\n\t//wait hit enter\n\t// fmt.Scanln()\n\n\tneibs := pos.GetHexNeighbors()\n\n\tfor _, n := range neibs {\n\t\tBurn(matrix, n)\n\t}\n\tmatrix.Set(pos, 'o') // burned\n\tmatrix.SaveHexGrid(\"grid.svg\")\n\ttime.Sleep(interval)\n\t// fmt.Scanln()\n}\n\nfunc RandomPaint(matrix *Matrix, color rune, prob int) {\n\tfor l := range matrix.NL {\n\t\tfor c := range matrix.NC {\n\t\t\tif rand.Intn(100) < prob {\n\t\t\t\tmatrix.Info[l][c] = color\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc createRandAndBurn(nl, nc int) {\n\tmatrix := NewMatrix(nl, nc, 'w')\n\tRandomPaint(matrix, 'g', 70)\n\tBurn(matrix, NewPos(0, 0))\n\tmatrix.SaveHexGrid(\"grid.svg\")\n\n\tfmt.Println(\"SVG file created successfully.\")\n}\n\nfunc main() {\n\toption := \"maze\"\n\tif option == \"burn\" {\n\t\tcreateRandAndBurn(10, 10)\n\t}\n\tif option == \"maze\" {\n\t\tcreatePerfectMaze(15, 15)\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
