{
    "title": "@magicsearch: Magic Search com busca bin\u00e1ria",
    "description": "# Magic Search com busca bin\u00e1ria\n\nDado uma lista de elementos ordenados, com possibilidade de repeti\u00e7\u00e3o de valores, utilize uma varia\u00e7\u00e3o da busca bin\u00e1ria para retornar:\n\n- Se o elemento existir, retorne a posi\u00e7\u00e3o da \u00faltima ocorr\u00eancia.\n- Se ele n\u00e3o existir, retorne a posi\u00e7\u00e3o onde ele deveria ser inserido na lista ordenada.\n\nSeu algoritmo deve utilizar a busca bin\u00e1ria para encontrar alguma ocorr\u00eancia do elemento.\n\n- Se encontrar, a partir dessa posi\u00e7\u00e3o, voc\u00ea deve percorrer a lista para encontrar a \u00faltima ocorr\u00eancia do elemento.\n- Se n\u00e3o encontrar, o ponto de cruzamento da busca bin\u00e1ria \u00e9 a posi\u00e7\u00e3o onde o elemento deve ser inserido.\n\n## Entrada e Sa\u00edda\n\n- Entrada\n  - 1a linha: vetor com os elementos inteiros entre colchetes separados por espa\u00e7o\n  - 2a linha: elemento a ser pesquisado\n- Sa\u00edda\n  - Posi\u00e7\u00e3o da \u00faltima ocorr\u00eancia do elemento ou onde ele deve ser inserido\n\n## Testes\n\n```bash\n>>>>>>>> INSERT\n[ ]\n4\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 1 1 ]\n1\n======== EXPECT\n2\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 2 3 ]\n1\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 2 3 ]\n3\n======== EXPECT\n2\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 1 1 2 2 3 ]\n2\n======== EXPECT\n4\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 1 1 3 3 5 ]\n0\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 1 1 4 4 6 6 ]\n2\n======== EXPECT\n3\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 1 1 4 4 6 6 ]\n5\n======== EXPECT\n5\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 1 1 4 4 6 6 ]\n8\n======== EXPECT\n7\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 1 1 4 4 6 6 6 6 6 6 6 6 6 ]\n6\n======== EXPECT\n13\n<<<<<<<< FINISH\n\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n[ ]\n4\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 ]\n1\n======== EXPECT\n2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 3 ]\n1\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 3 ]\n3\n======== EXPECT\n2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 2 2 3 ]\n2\n======== EXPECT\n4\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 3 3 5 ]\n0\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 4 4 6 6 ]\n2\n======== EXPECT\n3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 4 4 6 6 ]\n5\n======== EXPECT\n5\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 4 4 6 6 ]\n8\n======== EXPECT\n7\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 4 4 6 6 6 6 6 6 6 6 6 ]\n6\n======== EXPECT\n13\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc MagicSearch(slice []int, value int) int {\n\t_, _ = slice, value\n\treturn 0\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tscanner.Scan()\n\tparts := strings.Fields(scanner.Text())\n\tslice := make([]int, 0, 1)\n\tfor _, elem := range parts[1 : len(parts)-1] {\n\t\tvalue, _ := strconv.Atoi(elem)\n\t\tslice = append(slice, value)\n\t}\n\n\tscanner.Scan()\n\tvalue, _ := strconv.Atoi(scanner.Text())\n\tresult := MagicSearch(slice, value)\n\tfmt.Println(result)\n}\n",
                "type": "show"
            }
        ]
    }
}
