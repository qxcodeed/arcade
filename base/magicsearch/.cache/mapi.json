{
    "title": "@magicsearch: Magic Search com busca bin\u00e1ria",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@magicsearch: Magic Search com busca bin\u00e1ria</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@magicsearch: Magic Search com busca bin\u00e1ria</h1>\n            <h1 id=\"magic-search-com-busca-binaria\">Magic Search com busca bin\u00e1ria</h1>\n<p>Dado uma lista de elementos ordenados, com possibilidade de repeti\u00e7\u00e3o de valores, utilize uma varia\u00e7\u00e3o da busca bin\u00e1ria para retornar:</p>\n<ul>\n<li>Se o elemento existir, retorne a posi\u00e7\u00e3o da \u00faltima ocorr\u00eancia.</li>\n<li>Se ele n\u00e3o existir, retorne a posi\u00e7\u00e3o onde ele deveria ser inserido na lista ordenada.</li>\n</ul>\n<p>Seu algoritmo deve u</p>\n<h2 id=\"entrada-e-saida\">Entrada e Sa\u00edda</h2>\n<ul>\n<li>Entrada</li>\n<li>1a linha: vetor com os elementos inteiros entre colchetes separados por espa\u00e7o</li>\n<li>2a linha: elemento a ser pesquisado</li>\n<li>Sa\u00edda</li>\n<li>Posi\u00e7\u00e3o da \u00faltima ocorr\u00eancia do elemento ou onde ele deve ser inserido</li>\n</ul>\n<h2 id=\"testes\">Testes</h2>\n<pre class=\"codehilite\"><code class=\"language-bash\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT\n[ ]\n4\n======== EXPECT\n0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT\n[ 1 1 1 ]\n1\n======== EXPECT\n2\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT\n[ 1 2 3 ]\n1\n======== EXPECT\n0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT\n[ 1 2 3 ]\n3\n======== EXPECT\n2\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT\n[ 1 1 1 2 2 3 ]\n2\n======== EXPECT\n4\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT\n[ 1 1 1 3 3 5 ]\n0\n======== EXPECT\n0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT\n[ 1 1 1 4 4 6 6 ]\n2\n======== EXPECT\n3\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT\n[ 1 1 1 4 4 6 6 ]\n5\n======== EXPECT\n5\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT\n[ 1 1 1 4 4 6 6 ]\n8\n======== EXPECT\n7\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n</code></pre>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n[ ]\n4\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 ]\n1\n======== EXPECT\n2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 3 ]\n1\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 3 ]\n3\n======== EXPECT\n2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 2 2 3 ]\n2\n======== EXPECT\n4\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 3 3 5 ]\n0\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 4 4 6 6 ]\n2\n======== EXPECT\n3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 4 4 6 6 ]\n5\n======== EXPECT\n5\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 4 4 6 6 ]\n8\n======== EXPECT\n7\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# Multiset\n\n```ts\nclass MultiSet {\n  - data: []int                             ' Guarda os elementos do multiconjunto (ordenados, com repeti\u00e7\u00f5es)\n  - size: int                               ' N\u00famero atual de elementos no multiconjunto\n  - capacity: int                           ' Capacidade alocada do vetor data\n  --\n  + NewMultiSet(capacity: int): *MultiSet   ' Cria um novo multiconjunto com a capacidade especificada\n  - expand(): void                          ' Aumenta a capacidade do vetor quando necess\u00e1rio (dobrando ou iniciando)\n  --\n  + magicSearch(value: int): int            ' Retorna o \u00edndice da \u00faltima ocorr\u00eancia de value ou onde deve ser inserido\n  - match(index: int, value: int): bool     ' Verifica se o valor no \u00edndice corresponde ao valor dado\n  --\n  + Insert(value: int): void                ' Insere o valor na posi\u00e7\u00e3o correta, mantendo a ordem e permitindo repeti\u00e7\u00f5es\n  - insert(value: int, index: int): error   ' Insere value no \u00edndice indicado, deslocando os elementos \u00e0 direita\n  --\n  + Erase(value: int): error                ' Remove uma ocorr\u00eancia do valor, se existir; retorna erro caso n\u00e3o exista\n  - erase(index: int): error                ' Remove o elemento na posi\u00e7\u00e3o index, deslocando os demais\n  --\n  + Contains(value: int): bool              ' Retorna true se o valor estiver presente no multiconjunto\n  + Count(value: int): int                  ' Retorna o n\u00famero de ocorr\u00eancias do valor no multiconjunto\n  + Unique(): int                           ' Retorna o n\u00famero de valores distintos no multiconjunto\n  + Clear(): void                           ' Remove todos os elementos do multiconjunto\n  + String(): string                        ' Retorna uma representa\u00e7\u00e3o textual dos elementos do multiconjunto\n}\n```\n",
                "encoding": 0
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc MagicSearch(slice []int, value int) int {\n\t_, _ = slice, value\n\treturn 0\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tscanner.Scan()\n\tparts := strings.Fields(scanner.Text())\n\tslice := make([]int, 0, 1)\n\tfor _, elem := range parts[1 : len(parts)-1] {\n\t\tvalue, _ := strconv.Atoi(elem)\n\t\tslice = append(slice, value)\n\t}\n\n\tscanner.Scan()\n\tvalue, _ := strconv.Atoi(scanner.Text())\n\tresult := MagicSearch(slice, value)\n\tfmt.Println(result)\n}\n",
                "encoding": 0
            }
        ]
    }
}
