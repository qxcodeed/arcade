{
    "title": "@magicsearch: Magic Search com busca bin\u00e1ria",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@magicsearch: Magic Search com busca bin\u00e1ria</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Magic Search com busca bin\u00e1ria</h1>\n<p>Dado uma lista de elementos ordenados, com possibilidade de repeti\u00e7\u00e3o de valores, utilize uma varia\u00e7\u00e3o da busca bin\u00e1ria para retornar:</p>\n<ul>\n<li>Se o elemento existir, retorne a posi\u00e7\u00e3o da \u00faltima ocorr\u00eancia.</li>\n<li>Se ele n\u00e3o existir, retorne a posi\u00e7\u00e3o onde ele deveria ser inserido na lista ordenada.</li>\n</ul>\n<p>Seu algoritmo deve utilizar a busca bin\u00e1ria para encontrar alguma ocorr\u00eancia do elemento.</p>\n<ul>\n<li>Se encontrar, a partir dessa posi\u00e7\u00e3o, voc\u00ea deve percorrer a lista para encontrar a \u00faltima ocorr\u00eancia do elemento.</li>\n<li>Se n\u00e3o encontrar, o ponto de cruzamento da busca bin\u00e1ria \u00e9 a posi\u00e7\u00e3o onde o elemento deve ser inserido.</li>\n</ul>\n<h2>Entrada e Sa\u00edda</h2>\n<ul>\n<li>Entrada<ul>\n<li>1a linha: vetor com os elementos inteiros entre colchetes separados por espa\u00e7o</li>\n<li>2a linha: elemento a ser pesquisado</li>\n</ul>\n</li>\n<li>Sa\u00edda<ul>\n<li>Posi\u00e7\u00e3o da \u00faltima ocorr\u00eancia do elemento ou onde ele deve ser inserido</li>\n</ul>\n</li>\n</ul>\n<h2>Testes</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class=\"w\"> </span>INSERT\n<span class=\"o\">[</span><span class=\"w\"> </span><span class=\"o\">]</span>\n<span class=\"nv\">4</span>\n<span class=\"o\">========</span><span class=\"w\"> </span>EXPECT\n<span class=\"m\">0</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span><span class=\"s\">&lt;&lt; FINISH</span>\n\n<span class=\"s\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT</span>\n<span class=\"s\">[ 1 1 1 ]</span>\n<span class=\"s\">1</span>\n<span class=\"s\">======== EXPECT</span>\n<span class=\"s\">2</span>\n<span class=\"s\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH</span>\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class=\"w\"> </span>INSERT\n<span class=\"o\">[</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"o\">]</span>\n<span class=\"nv\">1</span>\n<span class=\"o\">========</span><span class=\"w\"> </span>EXPECT\n<span class=\"m\">0</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span><span class=\"s\">&lt;&lt; FINISH</span>\n\n<span class=\"s\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT</span>\n<span class=\"s\">[ 1 2 3 ]</span>\n<span class=\"s\">3</span>\n<span class=\"s\">======== EXPECT</span>\n<span class=\"s\">2</span>\n<span class=\"s\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH</span>\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class=\"w\"> </span>INSERT\n<span class=\"o\">[</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"o\">]</span>\n<span class=\"nv\">2</span>\n<span class=\"o\">========</span><span class=\"w\"> </span>EXPECT\n<span class=\"m\">4</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span><span class=\"s\">&lt;&lt; FINISH</span>\n\n<span class=\"s\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT</span>\n<span class=\"s\">[ 1 1 1 3 3 5 ]</span>\n<span class=\"s\">0</span>\n<span class=\"s\">======== EXPECT</span>\n<span class=\"s\">0</span>\n<span class=\"s\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH</span>\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class=\"w\"> </span>INSERT\n<span class=\"o\">[</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">6</span><span class=\"w\"> </span><span class=\"m\">6</span><span class=\"w\"> </span><span class=\"o\">]</span>\n<span class=\"nv\">2</span>\n<span class=\"o\">========</span><span class=\"w\"> </span>EXPECT\n<span class=\"m\">3</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span><span class=\"s\">&lt;&lt; FINISH</span>\n\n<span class=\"s\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT</span>\n<span class=\"s\">[ 1 1 1 4 4 6 6 ]</span>\n<span class=\"s\">5</span>\n<span class=\"s\">======== EXPECT</span>\n<span class=\"s\">5</span>\n<span class=\"s\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH</span>\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class=\"w\"> </span>INSERT\n<span class=\"o\">[</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">6</span><span class=\"w\"> </span><span class=\"m\">6</span><span class=\"w\"> </span><span class=\"o\">]</span>\n<span class=\"nv\">8</span>\n<span class=\"o\">========</span><span class=\"w\"> </span>EXPECT\n<span class=\"m\">7</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span><span class=\"s\">&lt;&lt; FINISH</span>\n\n<span class=\"s\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT</span>\n<span class=\"s\">[ 1 1 1 4 4 6 6 6 6 6 6 6 6 6 ]</span>\n<span class=\"s\">6</span>\n<span class=\"s\">======== EXPECT</span>\n<span class=\"s\">13</span>\n<span class=\"s\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n[ ]\n4\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 ]\n1\n======== EXPECT\n2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 3 ]\n1\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 3 ]\n3\n======== EXPECT\n2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 2 2 3 ]\n2\n======== EXPECT\n4\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 3 3 5 ]\n0\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 4 4 6 6 ]\n2\n======== EXPECT\n3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 4 4 6 6 ]\n5\n======== EXPECT\n5\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 4 4 6 6 ]\n8\n======== EXPECT\n7\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 1 1 4 4 6 6 6 6 6 6 6 6 6 ]\n6\n======== EXPECT\n13\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc MagicSearch(slice []int, value int) int {\n\t_, _ = slice, value\n\treturn 0\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tscanner.Scan()\n\tparts := strings.Fields(scanner.Text())\n\tslice := make([]int, 0, 1)\n\tfor _, elem := range parts[1 : len(parts)-1] {\n\t\tvalue, _ := strconv.Atoi(elem)\n\t\tslice = append(slice, value)\n\t}\n\n\tscanner.Scan()\n\tvalue, _ := strconv.Atoi(scanner.Text())\n\tresult := MagicSearch(slice, value)\n\tfmt.Println(result)\n}\n",
                "type": "show"
            }
        ],
        "py": [
            {
                "name": "main.py",
                "contents": "\ndef magic_search(lst, value):\n    return -1\n\ndef main() -> None:\n    parts = input().strip().split() \n    slice_ = list(map(int, parts[1:-1])) \n\n    value = int(input().strip()) \n\n    result = magic_search(slice_, value) \n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n",
                "type": "show"
            }
        ]
    }
}
