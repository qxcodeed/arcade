{
    "title": "@mm_pilha: MinMax Pilha CPP",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@mm_pilha: MinMax Pilha CPP</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"minmax-pilha-cpp\">MinMax Pilha CPP</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr class=\"header\">\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<h2 id=\"intro\">Intro</h2>\n<p>Neste exerc\u00edcio, voc\u00ea dever\u00e1 encontrar o menor e o maior elemento em\numa pilha de inteiros. A pilha ser\u00e1 fornecida com um conjunto de\nelementos, e sua tarefa ser\u00e1 identificar os valores m\u00ednimo e m\u00e1ximo\npresentes na estrutura.</p>\n<p>A pilha \u00e9 uma <strong>estrutura de dados linear</strong> que segue o\nprinc\u00edpio <strong>LIFO (Last In, First Out)</strong>, ou seja, o \u00faltimo\nelemento inserido \u00e9 o primeiro a ser removido. Neste exerc\u00edcio, por\u00e9m,\nvoc\u00ea n\u00e3o precisar\u00e1 modificar a pilha, apenas analisar seu conte\u00fado para\nextrair as informa\u00e7\u00f5es necess\u00e1rias.</p>\n<h2 id=\"draft\">Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/mm_pilha/.cache/draft/cpp/main.cpp\">main.cpp</a>\n<!-- links --></li>\n</ul></li>\n</ul>\n<h2 id=\"tests\">Tests</h2>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A entrada consistir\u00e1 em um n\u00famero inteiro seguido de uma sequ\u00eancia\nde elementos da pilha.</li>\n</ul>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<ul>\n<li>A sa\u00edda deve conter o menor e o maior valor da pilha, separados por\num espa\u00e7o.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>5</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>3 9 1 6 4</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>1 9</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n5\n3 9 1 6 4\n======== EXPECT\n1 9\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 1\n5\n1 2 3 4 5\n======== EXPECT\n1 5\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 2\n7\n-12 15 -20 44 12 13 23 \n======== EXPECT\n-20 44\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 3\n4\n42 42 42 42 \n======== EXPECT\n42 42\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 3\n4\n42 42 42 42\n======== EXPECT\n42 42\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao\n#include <iostream>\n#include <stack>\nusing std::stack;\n\n// Altere essa funcao.\n// Retorne o menor elemento da pilha\n// Pode assumir que a pilha possui pelo menos um elemento\nint minStack(stack<int> pilha){\n    //TODO: Complexidade O(n), onde n = tamanho da pilha\n\n    // DICA: Voce deve usar a pilha nativa do C++:\n    // pilha.top();       // retorna o elemento do topo (equivalente ao nosso 'peek')\n    // pilha.push(info);  // adiciona info no topo da pilha\n    // pilha.pop();       // remove do topo da pilha\n    // pilha.empty();     // retorna se a pilha esta vazia\n    ( void ) pilha;\n    return -1;\n}\n\n\n// Altere essa funcao.\n// Retorne o maior elemento da pilha\n// Pode assumir que a pilha possui pelo menos um elemento\nint maxStack(stack<int> pilha) {\n    //TODO: Complexidade O(n), onde n = tamanho da pilha\n    ( void ) pilha;\n    return -1;\n}\n\n\nint main() {\n    int n;\n    stack<int> pilha;\n\n    std::cin >> n;\n    for(int i = 0; i < n; i++){\n        int el;\n        std::cin >> el;\n        pilha.push(el);\n    }\n\n    int min = minStack(pilha);    \n    int max = maxStack(pilha);   \n\n    std::cout << min << \" \" << max << std::endl;\n}\n",
                "encoding": 0
            }
        ]
    }
}
