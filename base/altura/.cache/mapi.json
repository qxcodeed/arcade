{
    "title": "@altura: Altura e profundidade da \u00e1rvore",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@altura: Altura e profundidade da \u00e1rvore</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Altura e profundidade da \u00e1rvore</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#descri\u00e7\u00e3o\">Descri\u00e7\u00e3o</a></th>\n<th><a href=\"#testes\">Testes</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/altura/cover.jpg\" /></p>\n<h2>Descri\u00e7\u00e3o</h2>\n<p>Dado o modelo de \u00e1rvore utilizado nas quest\u00f5es anteriores, implemente os seguintes m\u00e9todos.</p>\n<div class=\"language-cpp highlight\"><pre><span></span><code><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">//retorna o n\u00f3 dado o valor ou retorna null</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">getAltura</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">);</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">getProfundidade</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">);</span>\n</code></pre></div>\n<ul>\n<li>Entrada<ul>\n<li>linha 1: o serial de uma \u00e1rvore</li>\n<li>linha 2: uma lista de valores de n\u00f3</li>\n</ul>\n</li>\n<li>Sa\u00edda<ul>\n<li>Para cada n\u00f3 da lista, um n\u00f3 por linha, altura e profundidade do n\u00f3 ou -1 se o n\u00f3 n\u00e3o for encontrado</li>\n</ul>\n</li>\n</ul>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/altura/__altura.jpg\" /></p>\n<h2>Testes</h2>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT 01 um\n4 # # \n4\n======== EXPECT\nArvore:\n4\nAltura: 1, Profundidade: 1\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT 02 dois\n1 # 0 # # \n0 1\n======== EXPECT\nArvore:\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25000\nAltura: 1, Profundidade: 2\nAltura: 2, Profundidade: 1\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT 03 tres\n4 # 8 2 # # # \n2 8 4\n======== EXPECT\nArvore:\n\u256d\u2500\u2500\u2500#\n4\n\u2502   \u256d\u2500\u2500\u25002\n\u2570\u2500\u2500\u25008\n    \u2570\u2500\u2500\u2500#\nAltura: 1, Profundidade: 3\nAltura: 2, Profundidade: 2\nAltura: 3, Profundidade: 1\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT 04 quatro\n0 9 4 # # # 5 # # \n5 4 3 0 9\n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25004\n\u256d\u2500\u2500\u25009\n\u2502   \u2570\u2500\u2500\u2500#\n0\n\u2570\u2500\u2500\u25005\nAltura: 1, Profundidade: 2\nAltura: 1, Profundidade: 3\n-1\nAltura: 3, Profundidade: 1\nAltura: 2, Profundidade: 2\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT 05 cinco\n8 4 # # 2 0 # # 3 # # \n0 4 8 2 3 7\n======== EXPECT\nArvore:\n\u256d\u2500\u2500\u25004\n8\n\u2502   \u256d\u2500\u2500\u25000\n\u2570\u2500\u2500\u25002\n    \u2570\u2500\u2500\u25003\nAltura: 1, Profundidade: 3\nAltura: 1, Profundidade: 2\nAltura: 3, Profundidade: 1\nAltura: 2, Profundidade: 2\nAltura: 1, Profundidade: 3\n-1\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT 06 seis\n2 1 0 # # # 3 # 7 # 9 # # \n9 7 3 6 1 2 0\n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25000\n\u256d\u2500\u2500\u25001\n\u2502   \u2570\u2500\u2500\u2500#\n2\n\u2502   \u256d\u2500\u2500\u2500#\n\u2570\u2500\u2500\u25003\n    \u2502   \u256d\u2500\u2500\u2500#\n    \u2570\u2500\u2500\u25007\n        \u2570\u2500\u2500\u25009\nAltura: 1, Profundidade: 4\nAltura: 2, Profundidade: 3\nAltura: 3, Profundidade: 2\n-1\nAltura: 2, Profundidade: 2\nAltura: 4, Profundidade: 1\nAltura: 1, Profundidade: 3\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT 07 dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n1 2 3 4 5 6 7 8 9\n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25007\n\u256d\u2500\u2500\u25008\n\u2502   \u2502   \u256d\u2500\u2500\u2500#\n\u2502   \u2570\u2500\u2500\u25004\n\u2502       \u2570\u2500\u2500\u25006\n1\n\u2502   \u256d\u2500\u2500\u25000\n\u2570\u2500\u2500\u25005\n    \u2502   \u256d\u2500\u2500\u2500#\n    \u2570\u2500\u2500\u25009\n        \u2502   \u256d\u2500\u2500\u25002\n        \u2570\u2500\u2500\u25003\n            \u2570\u2500\u2500\u2500#\nAltura: 5, Profundidade: 1\nAltura: 1, Profundidade: 5\nAltura: 2, Profundidade: 4\nAltura: 2, Profundidade: 3\nAltura: 4, Profundidade: 2\nAltura: 1, Profundidade: 4\nAltura: 1, Profundidade: 3\nAltura: 3, Profundidade: 2\nAltura: 3, Profundidade: 3\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01 um\n4 # # \n4\n======== EXPECT\nArvore:\n4\nAltura: 1, Profundidade: 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02 dois\n1 # 0 # # \n0 1\n======== EXPECT\nArvore:\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25000\nAltura: 1, Profundidade: 2\nAltura: 2, Profundidade: 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03 tres\n4 # 8 2 # # # \n2 8 4\n======== EXPECT\nArvore:\n\u256d\u2500\u2500\u2500#\n4\n\u2502   \u256d\u2500\u2500\u25002\n\u2570\u2500\u2500\u25008\n    \u2570\u2500\u2500\u2500#\nAltura: 1, Profundidade: 3\nAltura: 2, Profundidade: 2\nAltura: 3, Profundidade: 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04 quatro\n0 9 4 # # # 5 # # \n5 4 3 0 9\n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25004\n\u256d\u2500\u2500\u25009\n\u2502   \u2570\u2500\u2500\u2500#\n0\n\u2570\u2500\u2500\u25005\nAltura: 1, Profundidade: 2\nAltura: 1, Profundidade: 3\n-1\nAltura: 3, Profundidade: 1\nAltura: 2, Profundidade: 2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05 cinco\n8 4 # # 2 0 # # 3 # # \n0 4 8 2 3 7\n======== EXPECT\nArvore:\n\u256d\u2500\u2500\u25004\n8\n\u2502   \u256d\u2500\u2500\u25000\n\u2570\u2500\u2500\u25002\n    \u2570\u2500\u2500\u25003\nAltura: 1, Profundidade: 3\nAltura: 1, Profundidade: 2\nAltura: 3, Profundidade: 1\nAltura: 2, Profundidade: 2\nAltura: 1, Profundidade: 3\n-1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06 seis\n2 1 0 # # # 3 # 7 # 9 # # \n9 7 3 6 1 2 0\n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25000\n\u256d\u2500\u2500\u25001\n\u2502   \u2570\u2500\u2500\u2500#\n2\n\u2502   \u256d\u2500\u2500\u2500#\n\u2570\u2500\u2500\u25003\n    \u2502   \u256d\u2500\u2500\u2500#\n    \u2570\u2500\u2500\u25007\n        \u2570\u2500\u2500\u25009\nAltura: 1, Profundidade: 4\nAltura: 2, Profundidade: 3\nAltura: 3, Profundidade: 2\n-1\nAltura: 2, Profundidade: 2\nAltura: 4, Profundidade: 1\nAltura: 1, Profundidade: 3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07 dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n1 2 3 4 5 6 7 8 9\n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25007\n\u256d\u2500\u2500\u25008\n\u2502   \u2502   \u256d\u2500\u2500\u2500#\n\u2502   \u2570\u2500\u2500\u25004\n\u2502       \u2570\u2500\u2500\u25006\n1\n\u2502   \u256d\u2500\u2500\u25000\n\u2570\u2500\u2500\u25005\n    \u2502   \u256d\u2500\u2500\u2500#\n    \u2570\u2500\u2500\u25009\n        \u2502   \u256d\u2500\u2500\u25002\n        \u2570\u2500\u2500\u25003\n            \u2570\u2500\u2500\u2500#\nAltura: 5, Profundidade: 1\nAltura: 1, Profundidade: 5\nAltura: 2, Profundidade: 4\nAltura: 2, Profundidade: 3\nAltura: 4, Profundidade: 2\nAltura: 1, Profundidade: 4\nAltura: 1, Profundidade: 3\nAltura: 3, Profundidade: 2\nAltura: 3, Profundidade: 3\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "solver.cpp",
                "contents": "\n#include <iostream>\n#include <cstdlib>\n#include <sstream>\nusing namespace std;\n\nstruct Node{\n    int value;\n    Node * left;\n    Node * right;\n    Node(int _value = 0, Node * _left = nullptr, Node * _right = nullptr){\n        this->value = _value;\n        this->left = _left;\n        this->right = _right;\n    }\n};\n\nstruct BTree{\n    Node * root;\n    BTree(){\n        this->root = nullptr;\n    }\n    void clone(stringstream& ss, Node ** elo);\n\n\n    BTree(string serial){\n        stringstream ss(serial);\n        clone(ss, &root);\n    }\n\n    void __destroy(Node * node){\n        if(node == nullptr)\n            return;\n        __destroy(node->left);\n        __destroy(node->right);\n        delete node;\n    }\n\n    ~BTree(){\n        __destroy(this->root);\n    }\n\n    Node * find(Node * node, int value){\n        if(node == nullptr)\n            return nullptr;\n        if(node->value == value)\n            return node;\n        auto left = find(node->left, value);\n        if(left != nullptr)\n            return left;\n        return find(node->right, value);\n    }\n\n    Node * find(int value){\n        return find(this->root, value);\n    }\n\n    int getAltura(Node * node){\n        if(node == nullptr)\n            return 0;\n        int max = std::max(getAltura(node->left), getAltura(node->right));\n        return max + 1;\n    }\n\n    int getHeight(){\n        return getAltura(root);\n    }\n\n    int getNivel(Node * node, int nivel, int value){\n        if(node == nullptr)\n            return 0;\n        if(node->value == value)\n            return nivel;\n        auto left = getNivel(node->left, nivel + 1, value);\n        if(left != 0)\n            return left;\n        return getNivel(node->right, nivel + 1, value);\n    }\n\n    int getProfundidade(int value){\n        return getNivel(this->root, 1, value);\n    }\n    \n    void bshow(){\n        __bshow(this->root);\n    }\n    \n    void __bshow(Node * node, string heranca = \"\"){\n        if(node != nullptr && (node->left != nullptr || node->right != nullptr))\n            __bshow(node->left , heranca + \"l\");\n        for(int i = 0; i < (int) heranca.size() - 1; i++)\n            cout << (heranca[i] != heranca[i + 1] ? \"\u2502   \" : \"    \");\n        if(heranca != \"\")\n            cout << (heranca.back() == 'l' ? \"\u256d\u2500\u2500\u2500\" : \"\u2570\u2500\u2500\u2500\");\n        if(node == nullptr){\n            cout << \"#\" << endl;\n            return;\n        }\n        cout << node->value << endl;\n        if(node->left != nullptr || node->right != nullptr) {\n            __bshow(node->right, heranca + \"r\");\n        }\n    }\n};\n\nint main(){\n    string line;\n    getline(cin, line);\n    BTree bt(line);\n    getline(cin, line);\n    stringstream ss(line);\n    bt.bshow();\n    int value;\n        while(ss >> value){ //enquanto houver elementos no buffer\n        Node * node = bt.find(value);\n        if(node != nullptr)\n            cout << \"valor:\" << value << \", alt:\" << bt.getAltura(node) << \", prof:\" << bt.getProfundidade(value) << \"\\n\";\n        else\n            cout << \"-1\\n\";\n    }\n}\n\nvoid BTree::clone(stringstream& ss, Node ** elo){\n    string value;\n    ss >> value;\n    if(value == \"#\")\n        return;\n    int num;\n    stringstream(value) >> num;\n    *elo =  new Node(num);\n    clone(ss, &(*elo)->left);\n    clone(ss, &(*elo)->right);\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Node struct {\n\tValue int\n\tLeft  *Node\n\tRight *Node\n}\n\n// Search node with value\n// Starts with node == root\n// Value is the value we are looking for\n// Returns the node with the value or nil if not found\nfunc find(node *Node, value int) *Node {\n\t_, _ = node,  value\n\treturn nil\n}\n\n// node is the node we want to find the height of\n// the height of a node is the number of edges on the longest path from the node to a leaf\nfunc getHeight(node *Node) int {\n\t_ = node\n\treturn 0\n}\n\n// node is the root of the tree\n// level is the current level in the tree (1 for root)\n// value is the value we are looking for\nfunc calcNodeDepth(node *Node, level int, value int) int {\n\t_, _, _ = node, level, value\n\treturn 0\n}\n\n// --------------------------------------------------------------------\n// Don't change from here\nfunc BShow(node *Node, heranca string) {\n\tif node != nil && (node.Left != nil || node.Right != nil) {\n\t\tBShow(node.Left, heranca+\"l\")\n\t}\n\tfor i := 0; i < len(heranca)-1; i++ {\n\t\tif heranca[i] != heranca[i+1] {\n\t\t\tfmt.Print(\"\u2502   \")\n\t\t} else {\n\t\t\tfmt.Print(\"    \")\n\t\t}\n\t}\n\tif heranca != \"\" {\n\t\tif heranca[len(heranca)-1] == 'l' {\n\t\t\tfmt.Print(\"\u256d\u2500\u2500\u2500\")\n\t\t} else {\n\t\t\tfmt.Print(\"\u2570\u2500\u2500\u2500\")\n\t\t}\n\t}\n\tif node == nil {\n\t\tfmt.Println(\"#\")\n\t\treturn\n\t}\n\tfmt.Println(node.Value)\n\tif node.Left != nil || node.Right != nil {\n\t\tBShow(node.Right, heranca+\"r\")\n\t}\n}\n\nfunc create(parts *[]string) *Node {\n\telem := (*parts)[0]\n\t*parts = (*parts)[1:]\n\tif elem == \"#\" {\n\t\treturn nil\n\t}\n\tvalue, _ := strconv.Atoi(elem)\n\tnode := &Node{Value: value}\n\tnode.Left = create(parts)\n\tnode.Right = create(parts)\n\treturn node\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\tscanner.Scan()\n\n\tline := scanner.Text()\n\tparts := strings.Split(line, \" \")\n\troot := create(&parts)\n\n\tscanner.Scan()\n\tline = scanner.Text()\n\tfmt.Println(\"Arvore:\")\n\tBShow(root, \"\")\n\n\t// values := strings.FieldsSeq(line)\n\t// for s := range values {\n\t// \tvalue, _ := strconv.Atoi(s)\n\t// \tnode := find(root, value)\n\t// \tif node != nil {\n\t// \t\tfmt.Printf(\"Altura: %d, Profundidade: %d\\n\", getHeight(node), calcNodeDepth(root, 1, value))\n\t// \t} else {\n\t// \t\tfmt.Println(\"-1\")\n\t// \t}\n\t// }\n}\n",
                "type": "show"
            }
        ],
        "py": [
            {
                "name": "main.py",
                "contents": "class Node:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\nclass BTree:\n    def __init__(self, serial=None):\n        self.root = None\n    def __clone(self, ss, index=[0]):\n        if index[0] >= len(ss):\n            return None\n            \n        value = ss[index[0]]\n        index[0] += 1\n        \n        if value == '#':\n            return None\n            \n        try:\n            num = int(value)\n            node = Node(num)\n            node.left = self.__clone(ss, index)\n            node.right = self.__clone(ss, index)\n            return node\n        except ValueError:\n            return None\n    def bshow(self):\n        self.__bshow(self.root)\n    \n    def __bshow(self, node, inheritance=\"\"):\n        if node is not None and (node.left is not None or node.right is not None):\n            self.__bshow(node.left, inheritance + \"l\")\n        \n        for i in range(len(inheritance) - 1):\n            print(\"\u2502   \" if inheritance[i] != inheritance[i+1] else \"    \", end=\"\")\n        \n        if inheritance:\n            print(\"\u250c\u2500\u2500\u2500\" if inheritance[-1] == 'l' else \"\u2514\u2500\u2500\u2500\", end=\"\")\n        \n        print(\"#\" if node is None else node.value)\n        \n        if node is not None and (node.left is not None or node.right is not None):\n            self.__bshow(node.right, inheritance + \"r\")\n\nif __name__ == \"__main__\":\n    line = input().strip()\n    bt = BTree(line)\n    line = input().strip()\n    values = line.split()\n    \n    bt.bshow()\n",
                "type": "show"
            }
        ]
    }
}
