{
    "title": "@altura: Altura e profundidade da \u00e1rvore",
    "description": "# Altura e profundidade da \u00e1rvore\n\n<!--TOC_BEGIN-->\n- [Descri\u00e7\u00e3o](#descri\u00e7\u00e3o)\n- [C\u00f3digo base](#c\u00f3digo-base)\n- [Testes](#testes)\n<!--TOC_END-->\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/altura/cover.jpg)\n\n## Descri\u00e7\u00e3o\n\nDado o modelo de \u00e1rvore utilizado nas quest\u00f5es anteriores, implemente os seguintes m\u00e9todos.\n\n```cpp\nNode * find(int value); //retorna o n\u00f3 dado o valor ou retorna null\nint getAltura(Node * node);\nint getProfundidade(Node * node);\n```\n\n- Entrada\n  - linha 1: o serial de uma \u00e1rvore\n  - linha 2: uma lista de valores de n\u00f3\n- Sa\u00edda\n  - Para cada n\u00f3 da lista, um n\u00f3 por linha, altura e profundidade do n\u00f3 ou -1 se o n\u00f3 n\u00e3o for encontrado\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/altura/__altura.jpg)\n\n## C\u00f3digo base\n\n```cpp \nint main(){\n    string line;\n    getline(cin, line);\n    BTree bt(line);\n    getline(cin, line);\n    stringstream ss(line);\n    int value;\n        while(ss >> value){ //enquanto houver elementos no buffer\n        Node * node = bt.find(value);\n        if(node != nullptr)\n            cout << bt.getAltura(node) << \" \" << bt.getProfundidade(value) << \"\\n\";\n        else\n            cout << \"-1\\n\";\n    }\n}\n```\n\n## Testes\n\n```txt\n>>>>>>>> 01 um\n4 # # \n4\n========\n1 1\n<<<<<<<<\n\n>>>>>>>> 02 dois\n1 # 0 # # \n0 1\n========\n1 2\n2 1\n<<<<<<<<\n\n>>>>>>>> 03 tres\n4 # 8 2 # # # \n2 8 4\n========\n1 3\n2 2\n3 1\n<<<<<<<<\n\n>>>>>>>> 04 quatro\n0 9 4 # # # 5 # # \n5 4 3 0 9\n========\n1 2\n1 3\n-1\n3 1\n2 2\n<<<<<<<<\n\n>>>>>>>> 05 cinco\n8 4 # # 2 0 # # 3 # # \n0 4 8 2 3 7\n========\n1 3\n1 2\n3 1\n2 2\n1 3\n-1\n<<<<<<<<\n\n>>>>>>>> 06 seis\n2 1 0 # # # 3 # 7 # 9 # # \n9 7 3 6 1 2 0\n========\n1 4\n2 3\n3 2\n-1\n2 2\n4 1\n1 3\n<<<<<<<<\n\n>>>>>>>> 07 dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n1 2 3 4 5 6 7 8 9\n========\n5 1\n1 5\n2 4\n2 3\n4 2\n1 4\n1 3\n3 2\n3 3\n<<<<<<<<\n\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01 um\n4 # # \n4\n======== EXPECT\n1 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02 dois\n1 # 0 # # \n0 1\n======== EXPECT\n1 2\n2 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03 tres\n4 # 8 2 # # # \n2 8 4\n======== EXPECT\n1 3\n2 2\n3 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04 quatro\n0 9 4 # # # 5 # # \n5 4 3 0 9\n======== EXPECT\n1 2\n1 3\n-1\n3 1\n2 2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05 cinco\n8 4 # # 2 0 # # 3 # # \n0 4 8 2 3 7\n======== EXPECT\n1 3\n1 2\n3 1\n2 2\n1 3\n-1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06 seis\n2 1 0 # # # 3 # 7 # 9 # # \n9 7 3 6 1 2 0\n======== EXPECT\n1 4\n2 3\n3 2\n-1\n2 2\n4 1\n1 3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07 dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n1 2 3 4 5 6 7 8 9\n======== EXPECT\n5 1\n1 5\n2 4\n2 3\n4 2\n1 4\n1 3\n3 2\n3 3\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
