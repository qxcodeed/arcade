{
    "title": "@queimando: Pilha: Queimando \u00e1rvores",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@queimando: Pilha: Queimando \u00e1rvores</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Pilha: Queimando \u00e1rvores</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/queimando/cover.jpg\" /></p>\n<ul>\n<li>Seja uma matriz de caracteres que representa um mapa de uma floresta.</li>\n<li>Cada caractere representa um espa\u00e7o vazio ou uma \u00e1rvore.</li>\n<li>O espa\u00e7o vazio \u00e9 representado por um ponto <code>.</code> e a \u00e1rvore por uma hashtag <code>#</code>.</li>\n<li>O fogo come\u00e7a em um ponto inicial e se espalha para os vizinhos at\u00e9 que n\u00e3o haja mais \u00e1rvores para queimar.</li>\n</ul>\n<p>Dado a matriz da floresta e o ponto inicial onde come\u00e7a o fogo, queime as \u00e1rvores. O fogo n\u00e3o se espalha nas diagonais, apenas nas 4 dire\u00e7\u00f5es cardeais.</p>\n<h2>Entrada</h2>\n<ul>\n<li>1a linha: <code>nl, nc, l, c</code>:<ul>\n<li>N\u00famero de linhas e colunas da matriz, linha e coluna onde come\u00e7a o fogo.</li>\n</ul>\n</li>\n<li>Nas linhas subsequentes a matriz da floresta sendo que<ul>\n<li>'#' representa uma \u00e1rvore</li>\n<li>'.' representa um espa\u00e7o vazio</li>\n</ul>\n</li>\n</ul>\n<h2>Sa\u00edda</h2>\n<ul>\n<li>A matriz ap\u00f3s a queimada acontecer colocando 'o' para cada \u00e1rvore queimada.</li>\n</ul>\n<h2>Rascunhos</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>go<ul>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/queimando/.cache/draft/go/main.go\">main.go</a></li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/queimando/.cache/draft/go/stack.go\">stack.go</a></li>\n</ul>\n</li>\n<li>py<ul>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/queimando/.cache/draft/py/main.py\">main.py</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Testes</h2>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01\n2 3 1 1\n#.#\n.##\n========\n#.o\n.oo\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02\n5 5 0 0\n#..#.\n#...#\n###..\n..#.#\n..###\n========\no..#.\no...#\nooo..\n..o.o\n..ooo\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03\n5 7 2 0\n#..#.#.\n#..####\n###...#\n..#.###\n#.###..\n========\no..o.o.\no..oooo\nooo...o\n..o.ooo\n#.ooo..\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 04\n5 5 0 0\n...#.\n#...#\n###..\n..#.#\n..###\n========\n...#.\n#...#\n###..\n..#.#\n..###\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 05\n10 40 0 3\n..####..##.##.#..#.#####.##.####.#.#.###\n.##.####..#####.##..##.#.###...##.#.#.#.\n.#....#..##.#...#.#.#..#.##.#.###.#.###.\n.###.#.##.##.######.###..##..#####.#..##\n.##########.##########.########.######.#\n.########.#####.###.########.#..##.####.\n###.###..##.#..###.#.##.##.###..####.###\n..######..#.#..#.###.##......####..#.###\n######.##.##.#.####.####.##############.\n##.##.#.###.###........###.##.####.###..\n========\n..oooo..##.oo.o..o.ooooo.oo.oooo.#.#.###\n.oo.oooo..ooooo.oo..oo.o.ooo...oo.#.#.#.\n.o....o..oo.o...o.o.o..o.oo.#.ooo.#.###.\n.ooo.o.oo.oo.oooooo.ooo..oo..ooooo.o..##\n.oooooooooo.oooooooooo.oooooooo.oooooo.#\n.oooooooo.ooooo.ooo.oooooooo.o..oo.oooo.\nooo.ooo..oo.o..ooo.o.oo.oo.ooo..oooo.ooo\n..oooooo..o.o..o.ooo.oo......oooo..o.ooo\noooooo.oo.oo.#.oooo.oooo.oooooooooooooo.\noo.oo.#.ooo.###........ooo.oo.oooo.ooo..\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01\n2 3 1 1\n#.#\n.##\n======== EXPECT\n#.o\n.oo\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02\n5 5 0 0\n#..#.\n#...#\n###..\n..#.#\n..###\n======== EXPECT\no..#.\no...#\nooo..\n..o.o\n..ooo\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n5 7 2 0\n#..#.#.\n#..####\n###...#\n..#.###\n#.###..\n======== EXPECT\no..o.o.\no..oooo\nooo...o\n..o.ooo\n#.ooo..\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04\n5 5 0 0\n...#.\n#...#\n###..\n..#.#\n..###\n======== EXPECT\n...#.\n#...#\n###..\n..#.#\n..###\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05\n10 40 0 3\n..####..##.##.#..#.#####.##.####.#.#.###\n.##.####..#####.##..##.#.###...##.#.#.#.\n.#....#..##.#...#.#.#..#.##.#.###.#.###.\n.###.#.##.##.######.###..##..#####.#..##\n.##########.##########.########.######.#\n.########.#####.###.########.#..##.####.\n###.###..##.#..###.#.##.##.###..####.###\n..######..#.#..#.###.##......####..#.###\n######.##.##.#.####.####.##############.\n##.##.#.###.###........###.##.####.###..\n======== EXPECT\n..oooo..##.oo.o..o.ooooo.oo.oooo.#.#.###\n.oo.oooo..ooooo.oo..oo.o.ooo...oo.#.#.#.\n.o....o..oo.o...o.o.o..o.oo.#.ooo.#.###.\n.ooo.o.oo.oo.oooooo.ooo..oo..ooooo.o..##\n.oooooooooo.oooooooooo.oooooooo.oooooo.#\n.oooooooo.ooooo.ooo.oooooooo.o..oo.oooo.\nooo.ooo..oo.o..ooo.o.oo.oo.ooo..oooo.ooo\n..oooooo..o.o..o.ooo.oo......oooo..o.ooo\noooooo.oo.oo.#.oooo.oooo.oooooooooooooo.\noo.oo.#.ooo.###........ooo.oo.oooo.ooo..\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc burnTrees(grid [][]rune, l, c int) {\n\tstack := NewStack[Pos]()\n\t_ , _ , _ = mat, l, c\n\n\t// Essa fun\u00e7\u00e3o deve usar uma list como pilha\n\t// e marcar as \u00e1rvores na matriz como queimados\n\t// Uma sugest\u00e3o de como fazer isso \u00e9:\n\t// - adicionar a primeira posi\u00e7\u00e3o na pilha\n\t// - enquanto a pilha n\u00e3o estiver vazia:\n\t//   - retirar o elemento do topo\n\t//   - se puder ser queimado, queime e adicione seus vizinhos \u00e0 pilha\n\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tscanner.Scan()\n\tline := scanner.Text()\n\tvar nl, nc, lfire, cfire int\n\tfmt.Sscanf(line, \"%d %d %d %d\", &nl, &nc, &lfire, &cfire)\n\n\tgrid := make([][]rune, 0, nl)\n\tfor range nl {\n\t\tscanner.Scan()\n\t\tline := []rune(scanner.Text())\n\t\tgrid = append(grid, line)\n\t}\n\tburnTrees(grid, lfire, cfire)\n\tshowGrid(grid)\n}\n\nfunc showGrid(mat [][]rune) {\n\tfor _, linha := range mat {\n\t\tfmt.Println(string(linha))\n\t}\n}\n",
                "type": "show"
            },
            {
                "name": "stack.go",
                "contents": "package main\n\ntype Stack[T any] struct {\n\tdata []T\n}\n\nfunc NewStack[T any]() *Stack[T] {\n\treturn &Stack[T]{data: []T{}}\n}\n\nfunc (s *Stack[T]) Push(value T) {\n\ts.data = append(s.data, value)\n}\n\nfunc (s *Stack[T]) Top() T {\n\tif len(s.data) == 0 {\n\t\tpanic(\"stack is empty\")\n\t}\n\treturn s.data[len(s.data)-1]\n}\n\nfunc (s *Stack[T]) IsEmpty() bool {\n\treturn len(s.data) == 0\n}\n\nfunc (s *Stack[T]) Pop() T {\n\tif s.IsEmpty() {\n\t\tpanic(\"stack is empty\")\n\t}\n\tvalue := s.data[len(s.data)-1]\n\ts.data = s.data[:len(s.data)-1]\n\treturn value\n}\n",
                "type": "show"
            }
        ],
        "py": [
            {
                "name": "main.py",
                "contents": "# -*- coding: utf-8 -*-\n\nclass Pos:\n    def __init__(self, l: int, c: int):\n        self.l: int = l\n        self.c: int = c\n\n    # Sobrescreve o m\u00e9todo __eq__ para permitir compara\u00e7\u00e3o direta de objetos Pos\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Pos):\n            return NotImplemented\n        return self.l == other.l and self.c == other.c\n    \n# Retorna uma lista de vizinhos (acima, abaixo, esquerda, direita)\ndef get_neib(p: Pos) -> list[Pos]: # Usando 'list' diretamente\n    return [\n        Pos(p.l - 1, p.c),\n        Pos(p.l + 1, p.c),\n        Pos(p.l, p.c - 1),\n        Pos(p.l, p.c + 1),\n    ]\n\n# Verifica se a posi\u00e7\u00e3o est\u00e1 dentro da matriz\ndef inside(mat: list[list[str]], p: Pos) -> bool: # Usando 'list' diretamente\n    \"\"\"\n    Essa fun\u00e7\u00e3o retorna uma booleana que\n    diz se a posi\u00e7\u00e3o p est\u00e1 dentro da\n    matriz mat\n    \"\"\"\n    return 0 <= p.l < len(mat) and 0 <= p.c < len(mat[0])\n\n# Fun\u00e7\u00e3o para propagar a \"chama\" (substitui '#' por 'o')\ndef queimar(mat: list[list[str]], l: int, c: int) -> None: # Usando 'list' diretamente\n    \"\"\"\n    Essa fun\u00e7\u00e3o deve usar uma list como pilha\n    e marcar as \u00e1rvores na matriz como\n    queimados.\n    Uma sugest\u00e3o de como fazer isso \u00e9:\n    - adicionar a primeira posi\u00e7\u00e3o na pilha se poss\u00edvel tocar fogo nele\n    - enquanto a pilha n\u00e3o estiver vazia:\n      - pegar o elemento do topo\n      - ver se tem algum de seus vizinhos que pode ser queimado\n      - se sim, tocar fogo nele e adicionar na pilha\n      - se n\u00e3o, remover o elemento do topo da pilha\n    \"\"\"\n    pass\n# Fun\u00e7\u00e3o para exibir a matriz\ndef show_mat(mat: list[list[str]]) -> None: # Usando 'list' diretamente\n    for row in mat:\n        print(\"\".join(row)) # Junta os caracteres de volta em uma string para imprimir\n\ndef main() -> None:\n    nl, nc, l, c = map(int, input().split()) # Alterado para input()\n    _ = nc\n\n    mat: list[list[str]] = [] # Usando 'list' diretamente\n    for _ in range(nl):\n        mat.append(list(input().strip())) # Alterado para input()\n\n    queimar(mat, l, c) # Chama a fun\u00e7\u00e3o de queimar\n    show_mat(mat) # Exibe o resultado\n\n# Garante que main() seja chamado apenas quando o script for executado diretamente\nif __name__ == \"__main__\":\n    main()\n",
                "type": "show"
            }
        ]
    }
}
