{
    "title": "@arvore-path: Caminho at\u00e9 o n\u00f3",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@arvore-path: Caminho at\u00e9 o n\u00f3</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@arvore-path: Caminho at\u00e9 o n\u00f3</h1>\n            <h1 id=\"caminho-ate-o-no\">Caminho at\u00e9 o n\u00f3</h1>\n<!--TOC_BEGIN-->\n<ul>\n<li><a href=\"#descri\u00e7\u00e3o\">Descri\u00e7\u00e3o</a></li>\n<li><a href=\"#exemplo\">Exemplo</a></li>\n<li><a href=\"#testes\">Testes</a></li>\n<li><a href=\"#c\u00f3digo-base\">C\u00f3digo base</a></li>\n</ul>\n<!--TOC_END-->\n\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/arvore-path/cover.jpg\" /></p>\n<h2 id=\"descricao\">Descri\u00e7\u00e3o</h2>\n<ul>\n<li>Entrada</li>\n<li>linha 1: o serial de uma \u00e1rvore bin\u00e1ria</li>\n<li>linha 2: um valor de n\u00f3</li>\n<li>Sa\u00edda</li>\n<li>se o valor existe:<ul>\n<li>mostre o caminho da raiz at\u00e9 o n\u00f3,</li>\n<li>indicando 'l' ou 'r' se o caminho \u00e9 pelo filho da esquerda ou da direita.</li>\n<li>ponha um 'x' para quando achar o n\u00f3.</li>\n</ul>\n</li>\n<li>Se o valor n\u00e3o existir na \u00e1rvore<ul>\n<li>imprima \"!\"</li>\n</ul>\n</li>\n<li>Limita\u00e7\u00e3o</li>\n<li>Voc\u00ea deve percorrer a \u00e1rvore UMA \u00fanica vez para obter os caminhos e montar o caminho atrav\u00e9s do retorno da fun\u00e7\u00e3o.</li>\n</ul>\n<h2 id=\"exemplo\">Exemplo</h2>\n<p>Para encontrar o 2 na \u00e1rvore abaixo, seguimos o caminho <code>rrrlx</code></p>\n<pre class=\"codehilite\"><code class=\"language-c\">//serial\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # #\n\n//bshow()\n    \u250c\u2500\u2500\u25007\n\u250c\u2500\u2500\u25008\n\u2502   \u2502   \u250c\u2500\u2500\u2500#\n\u2502   \u2514\u2500\u2500\u25004\n\u2502       \u2514\u2500\u2500\u25006\n1\n\u2502   \u250c\u2500\u2500\u25000\n\u2514\u2500\u2500\u25005\n    \u2502   \u250c\u2500\u2500\u2500#\n    \u2514\u2500\u2500\u25009\n        \u2502   \u250c\u2500\u2500\u25002\n        \u2514\u2500\u2500\u25003\n            \u2514\u2500\u2500\u2500#\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-cpp\">//a fun\u00e7\u00e3o recursiva find deve retornar uma sequencia o path at\u00e9 o destino com x no final\nstring find_path(Node * root, int value);\n</code></pre>\n\n<h2 id=\"testes\">Testes</h2>\n<pre class=\"codehilite\"><code class=\"language-txt\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01 um\n4 # #\n4\n========\nx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02 dois\n1 # 0 # # \n0\n========\nrx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03 tres\n4 # 8 2 # # # \n2\n========\nrlx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 04 not found\n0 9 4 # # # 5 # # \n7\n========\n!\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # #\n2\n========\nrrrlx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre>\n\n<h2 id=\"codigo-base\">C\u00f3digo base</h2>\n<pre class=\"codehilite\"><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;sstream&gt;\nusing namespace std;\n\nstruct Node{\n    int value;\n    Node * left;\n    Node * right;\n    Node(int value = 0, Node * left = nullptr, Node * right = nullptr){\n        this-&gt;value = value;\n        this-&gt;left = left;\n        this-&gt;right = right;\n    }\n};\n\nstruct BTree{\n    Node * root;\n    BTree(){\n        this-&gt;root = nullptr;\n    }\n\n    void clone(stringstream&amp; ss, Node ** elo){\n        string value;\n        ss &gt;&gt; value;\n        if(value == &quot;#&quot;)\n            return;\n        int num;\n        stringstream(value) &gt;&gt; num;\n        *elo =  new Node(num);\n        clone(ss, &amp;(*elo)-&gt;left);\n        clone(ss, &amp;(*elo)-&gt;right);\n    }\n\n    BTree(string serial){\n        stringstream ss(serial);\n        clone(ss, &amp;root);\n    }\n\n    void __destroy(Node * node){\n        if(node == nullptr)\n            return;\n        __destroy(node-&gt;left);\n        __destroy(node-&gt;right);\n        delete node;\n    }\n\n    ~BTree(){\n        __destroy(this-&gt;root);\n    }\n\n    string find_path(Node * node, int value){\n        //TODO\n    }\n};\n\nint main(){\n    string line;\n    getline(cin, line);\n    BTree bt(line);\n    int value;\n    cin &gt;&gt; value;\n    string path = bt.find_path(bt.root, value);\n    cout &lt;&lt; path &lt;&lt; &quot;\\n&quot;;\n}\n</code></pre>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01 um\n4 # #\n4\n======== EXPECT\nx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02 dois\n1 # 0 # # \n0\n======== EXPECT\nrx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03 tres\n4 # 8 2 # # # \n2\n======== EXPECT\nrlx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04 not found\n0 9 4 # # # 5 # # \n7\n======== EXPECT\n!\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # #\n2\n======== EXPECT\nrrrlx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05 quatro\n0 9 4 # # # 5 # # \n5\n======== EXPECT\nrx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06 cinco\n0 4 # # 2 0 # # 1 # # \n4\n======== EXPECT\nlx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07 seis\n2 1 5 # # # 9 # 7 # 8 # # \n9\n======== EXPECT\nrx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 08 dez\n1 8 7 # # 5 # 6 # # 3 0 # # 9 # 4 2 # # # \n2\n======== EXPECT\nrrrlx\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
