{
    "title": "@arvore-path: Caminho at\u00e9 o n\u00f3",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@arvore-path: Caminho at\u00e9 o n\u00f3</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Caminho at\u00e9 o n\u00f3</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#descri\u00e7\u00e3o\">Descri\u00e7\u00e3o</a></th>\n<th><a href=\"#exemplo\">Exemplo</a></th>\n<th><a href=\"#testes\">Testes</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/arvore-path/cover.jpg\" /></p>\n<h2>Descri\u00e7\u00e3o</h2>\n<ul>\n<li>Entrada<ul>\n<li>linha 1: o serial de uma \u00e1rvore bin\u00e1ria</li>\n<li>linha 2: um valor de n\u00f3</li>\n</ul>\n</li>\n<li>Sa\u00edda<ul>\n<li>se o valor existe:<ul>\n<li>mostre o caminho da raiz at\u00e9 o n\u00f3,</li>\n<li>indicando 'l' ou 'r' se o caminho \u00e9 pelo filho da esquerda ou da direita.</li>\n<li>ponha um 'x' para quando achar o n\u00f3.</li>\n</ul>\n</li>\n<li>Se o valor n\u00e3o existir na \u00e1rvore<ul>\n<li>imprima \"!\"</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Limita\u00e7\u00e3o<ul>\n<li>Voc\u00ea deve percorrer a \u00e1rvore UMA \u00fanica vez para obter os caminhos e montar o caminho atrav\u00e9s do retorno da fun\u00e7\u00e3o.</li>\n</ul>\n</li>\n</ul>\n<h2>Exemplo</h2>\n<p>Para encontrar o 2 na \u00e1rvore abaixo, seguimos o caminho <code>rrrlx</code></p>\n<div class=\"language-c highlight\"><pre><span></span><code><span class=\"c1\">//serial</span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">#</span>\n\n<span class=\"c1\">//bshow()</span>\n<span class=\"w\">    </span><span class=\"err\">\u250c\u2500\u2500\u2500</span><span class=\"mi\">7</span>\n<span class=\"err\">\u250c\u2500\u2500\u2500</span><span class=\"mi\">8</span>\n<span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u250c\u2500\u2500\u2500#</span>\n<span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u2514\u2500\u2500\u2500</span><span class=\"mi\">4</span>\n<span class=\"err\">\u2502</span><span class=\"w\">       </span><span class=\"err\">\u2514\u2500\u2500\u2500</span><span class=\"mi\">6</span>\n<span class=\"mi\">1</span>\n<span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u250c\u2500\u2500\u2500</span><span class=\"mi\">0</span>\n<span class=\"err\">\u2514\u2500\u2500\u2500</span><span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u250c\u2500\u2500\u2500#</span>\n<span class=\"w\">    </span><span class=\"err\">\u2514\u2500\u2500\u2500</span><span class=\"mi\">9</span>\n<span class=\"w\">        </span><span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u250c\u2500\u2500\u2500</span><span class=\"mi\">2</span>\n<span class=\"w\">        </span><span class=\"err\">\u2514\u2500\u2500\u2500</span><span class=\"mi\">3</span>\n<span class=\"w\">            </span><span class=\"err\">\u2514\u2500\u2500\u2500#</span>\n</code></pre></div>\n<div class=\"language-cpp highlight\"><pre><span></span><code><span class=\"c1\">//a fun\u00e7\u00e3o recursiva find deve retornar uma sequencia o path at\u00e9 o destino com x no final</span>\n<span class=\"n\">string</span><span class=\"w\"> </span><span class=\"nf\">find_path</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">);</span>\n</code></pre></div>\n<h2>Testes</h2>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01 um\n4 # #\n4\n========\nArvore:\n4\nCaminho: x\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02 dois\n1 # 0 # # \n0\n========\nArvore:\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25000\nCaminho: rx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03 tres\n4 # 8 2 # # # \n2\n========\nArvore:\n\u256d\u2500\u2500\u2500#\n4\n\u2502   \u256d\u2500\u2500\u25002\n\u2570\u2500\u2500\u25008\n    \u2570\u2500\u2500\u2500#\nCaminho: rlx\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 04 not found\n0 9 4 # # # 5 # # \n7\n========\nArvore:\n    \u256d\u2500\u2500\u25004\n\u256d\u2500\u2500\u25009\n\u2502   \u2570\u2500\u2500\u2500#\n0\n\u2570\u2500\u2500\u25005\nCaminho: !\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01 um\n4 # #\n4\n======== EXPECT\nArvore:\n4\nCaminho: x\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02 dois\n1 # 0 # # \n0\n======== EXPECT\nArvore:\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25000\nCaminho: rx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03 tres\n4 # 8 2 # # # \n2\n======== EXPECT\nArvore:\n\u256d\u2500\u2500\u2500#\n4\n\u2502   \u256d\u2500\u2500\u25002\n\u2570\u2500\u2500\u25008\n    \u2570\u2500\u2500\u2500#\nCaminho: rlx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04 not found\n0 9 4 # # # 5 # # \n7\n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25004\n\u256d\u2500\u2500\u25009\n\u2502   \u2570\u2500\u2500\u2500#\n0\n\u2570\u2500\u2500\u25005\nCaminho: !\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05 quatro\n0 9 4 # # # 5 # # \n5\n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25004\n\u256d\u2500\u2500\u25009\n\u2502   \u2570\u2500\u2500\u2500#\n0\n\u2570\u2500\u2500\u25005\nCaminho: rx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06 cinco\n0 4 # # 2 0 # # 1 # # \n4\n======== EXPECT\nArvore:\n\u256d\u2500\u2500\u25004\n0\n\u2502   \u256d\u2500\u2500\u25000\n\u2570\u2500\u2500\u25002\n    \u2570\u2500\u2500\u25001\nCaminho: lx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07 seis\n2 1 5 # # # 9 # 7 # 8 # # \n9\n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25005\n\u256d\u2500\u2500\u25001\n\u2502   \u2570\u2500\u2500\u2500#\n2\n\u2502   \u256d\u2500\u2500\u2500#\n\u2570\u2500\u2500\u25009\n    \u2502   \u256d\u2500\u2500\u2500#\n    \u2570\u2500\u2500\u25007\n        \u2570\u2500\u2500\u25008\nCaminho: rx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 08 dez\n1 8 7 # # 5 # 6 # # 3 0 # # 9 # 4 2 # # # \n2\n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25007\n\u256d\u2500\u2500\u25008\n\u2502   \u2502   \u256d\u2500\u2500\u2500#\n\u2502   \u2570\u2500\u2500\u25005\n\u2502       \u2570\u2500\u2500\u25006\n1\n\u2502   \u256d\u2500\u2500\u25000\n\u2570\u2500\u2500\u25003\n    \u2502   \u256d\u2500\u2500\u2500#\n    \u2570\u2500\u2500\u25009\n        \u2502   \u256d\u2500\u2500\u25002\n        \u2570\u2500\u2500\u25004\n            \u2570\u2500\u2500\u2500#\nCaminho: rrrlx\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "solver.cpp",
                "contents": "\n#include <iostream>\n#include <sstream>\nusing namespace std;\n\nstruct Node{\n    int value;\n    Node * left;\n    Node * right;\n    Node(int value = 0, Node * left = nullptr, Node * right = nullptr){\n        this->value = value;\n        this->left = left;\n        this->right = right;\n    }\n};\n\nstruct BTree{\n    Node * root;\n    BTree(){\n        this->root = nullptr;\n    }\n\n    void clone(stringstream& ss, Node ** elo){\n        string value;\n        ss >> value;\n        if(value == \"#\")\n            return;\n        int num;\n        stringstream(value) >> num;\n        *elo =  new Node(num);\n        clone(ss, &(*elo)->left);\n        clone(ss, &(*elo)->right);\n    }\n\n    BTree(string serial){\n        stringstream ss(serial);\n        clone(ss, &root);\n    }\n\n    void __destroy(Node * node){\n        if(node == nullptr)\n            return;\n        __destroy(node->left);\n        __destroy(node->right);\n        delete node;\n    }\n\n    ~BTree(){\n        __destroy(this->root);\n    }\n\n    string find_path(Node * node, int value){\n        if(node == nullptr)\n            return \"!\";\n        if(node->value == value)\n            return \"x\";\n        string left = find_path(node->left, value);\n        if(left.back() == 'x')\n            return \"l\" + left;\n        string right = find_path(node->right, value);\n        if(right.back() == 'x')\n            return \"r\" + right;\n        return \"!\";\n    }\n};\n\nint main(){\n    string line;\n    getline(cin, line);\n    BTree bt(line);\n    int value;\n    cin >> value;\n    string path = bt.find_path(bt.root, value);\n    cout << path << \"\\n\";\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Node struct {\n\tValue int\n\tLeft  *Node\n\tRight *Node\n}\n\n// retorne o caminho at\u00e9 o n\u00f3 ou ! se n\u00e3o existir\n// voc\u00ea pode fazer recursivo ou interativo\n// tamb\u00e9m pode criar fun\u00e7\u00f5es auxiliares se achar necess\u00e1rio\nfunc findPath(node *Node, value int) string {\n\t// TODO\n\t// ACT\n\t// _, _ = node, value\n\t// return \"\"\n}\n\n// ----------------------------------------------------------------------------------\nfunc BShow(node *Node, heranca string) {\n\tif node != nil && (node.Left != nil || node.Right != nil) {\n\t\tBShow(node.Left, heranca+\"l\")\n\t}\n\tfor i := 0; i < len(heranca)-1; i++ {\n\t\tif heranca[i] != heranca[i+1] {\n\t\t\tfmt.Print(\"\u2502   \")\n\t\t} else {\n\t\t\tfmt.Print(\"    \")\n\t\t}\n\t}\n\tif heranca != \"\" {\n\t\tif heranca[len(heranca)-1] == 'l' {\n\t\t\tfmt.Print(\"\u256d\u2500\u2500\u2500\")\n\t\t} else {\n\t\t\tfmt.Print(\"\u2570\u2500\u2500\u2500\")\n\t\t}\n\t}\n\tif node == nil {\n\t\tfmt.Println(\"#\")\n\t\treturn\n\t}\n\tfmt.Println(node.Value)\n\tif node.Left != nil || node.Right != nil {\n\t\tBShow(node.Right, heranca+\"r\")\n\t}\n}\n\nfunc create(parts *[]string) *Node {\n\telem := (*parts)[0]\n\t*parts = (*parts)[1:]\n\tif elem == \"#\" {\n\t\treturn nil\n\t}\n\tvalue, _ := strconv.Atoi(elem)\n\tnode := &Node{Value: value}\n\tnode.Left = create(parts)\n\tnode.Right = create(parts)\n\treturn node\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tscanner.Scan()\n\tparts := strings.Split(scanner.Text(), \" \")\n\tscanner.Scan()\n\tvalue, _ := strconv.Atoi(scanner.Text())\n\troot := create(&parts)\n\tfmt.Println(\"Arvore:\")\n\tBShow(root, \"\") // Chama a fun\u00e7\u00e3o de impress\u00e3o formatada\n\tfmt.Println(\"Caminho:\", findPath(root, value))\n}\n",
                "type": "show"
            }
        ]
    }
}
