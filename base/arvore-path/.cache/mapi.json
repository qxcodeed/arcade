{
    "title": "@arvore-path: Caminho at\u00e9 o n\u00f3",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@arvore-path: Caminho at\u00e9 o n\u00f3</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@arvore-path: Caminho at\u00e9 o n\u00f3</h1>\n            <h1 id=\"caminho-ate-o-no\">Caminho at\u00e9 o n\u00f3</h1>\n<!--TOC_BEGIN-->\n<ul>\n<li><a href=\"#descri\u00e7\u00e3o\">Descri\u00e7\u00e3o</a></li>\n<li><a href=\"#exemplo\">Exemplo</a></li>\n<li><a href=\"#testes\">Testes</a></li>\n<li><a href=\"#c\u00f3digo-base\">C\u00f3digo base</a></li>\n</ul>\n<!--TOC_END-->\n\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/arvore-path/cover.jpg\" /></p>\n<h2 id=\"descricao\">Descri\u00e7\u00e3o</h2>\n<ul>\n<li>Entrada</li>\n<li>linha 1: o serial de uma \u00e1rvore bin\u00e1ria</li>\n<li>linha 2: um valor de n\u00f3</li>\n<li>Sa\u00edda</li>\n<li>se o valor existe:<ul>\n<li>mostre o caminho da raiz at\u00e9 o n\u00f3,</li>\n<li>indicando 'l' ou 'r' se o caminho \u00e9 pelo filho da esquerda ou da direita.</li>\n<li>ponha um 'x' para quando achar o n\u00f3.</li>\n</ul>\n</li>\n<li>Se o valor n\u00e3o existir na \u00e1rvore<ul>\n<li>imprima \"!\"</li>\n</ul>\n</li>\n<li>Limita\u00e7\u00e3o</li>\n<li>Voc\u00ea deve percorrer a \u00e1rvore UMA \u00fanica vez para obter os caminhos e montar o caminho atrav\u00e9s do retorno da fun\u00e7\u00e3o.</li>\n</ul>\n<h2 id=\"exemplo\">Exemplo</h2>\n<p>Para encontrar o 2 na \u00e1rvore abaixo, seguimos o caminho <code>rrrlx</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">//serial</span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">#</span>\n\n<span class=\"c1\">//bshow()</span>\n<span class=\"w\">    </span><span class=\"err\">\u250c\u2500\u2500\u2500</span><span class=\"mi\">7</span>\n<span class=\"err\">\u250c\u2500\u2500\u2500</span><span class=\"mi\">8</span>\n<span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u250c\u2500\u2500\u2500#</span>\n<span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u2514\u2500\u2500\u2500</span><span class=\"mi\">4</span>\n<span class=\"err\">\u2502</span><span class=\"w\">       </span><span class=\"err\">\u2514\u2500\u2500\u2500</span><span class=\"mi\">6</span>\n<span class=\"mi\">1</span>\n<span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u250c\u2500\u2500\u2500</span><span class=\"mi\">0</span>\n<span class=\"err\">\u2514\u2500\u2500\u2500</span><span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u250c\u2500\u2500\u2500#</span>\n<span class=\"w\">    </span><span class=\"err\">\u2514\u2500\u2500\u2500</span><span class=\"mi\">9</span>\n<span class=\"w\">        </span><span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u250c\u2500\u2500\u2500</span><span class=\"mi\">2</span>\n<span class=\"w\">        </span><span class=\"err\">\u2514\u2500\u2500\u2500</span><span class=\"mi\">3</span>\n<span class=\"w\">            </span><span class=\"err\">\u2514\u2500\u2500\u2500#</span>\n</code></pre></div>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">//a fun\u00e7\u00e3o recursiva find deve retornar uma sequencia o path at\u00e9 o destino com x no final</span>\n<span class=\"n\">string</span><span class=\"w\"> </span><span class=\"nf\">find_path</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">);</span>\n</code></pre></div>\n\n<h2 id=\"testes\">Testes</h2>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nv\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><span class=\"c\"> 01 um</span>\n<span class=\"c\">4 # #</span>\n<span class=\"c\">4</span>\n<span class=\"c\">========</span>\n<span class=\"c\">x</span>\n<span class=\"nv\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n\n<span class=\"nv\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><span class=\"c\"> 02 dois</span>\n<span class=\"c\">1 # 0 # # </span>\n<span class=\"c\">0</span>\n<span class=\"c\">========</span>\n<span class=\"c\">rx</span>\n<span class=\"nv\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n\n<span class=\"nv\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><span class=\"c\"> 03 tres</span>\n<span class=\"c\">4 # 8 2 # # # </span>\n<span class=\"c\">2</span>\n<span class=\"c\">========</span>\n<span class=\"c\">rlx</span>\n<span class=\"nv\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n\n<span class=\"nv\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><span class=\"c\"> 04 not found</span>\n<span class=\"c\">0 9 4 # # # 5 # # </span>\n<span class=\"c\">7</span>\n<span class=\"c\">========</span>\n<span class=\"c\">!</span>\n<span class=\"nv\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n\n<span class=\"nv\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>\n<span class=\"c\">1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # #</span>\n<span class=\"c\">2</span>\n<span class=\"c\">========</span>\n<span class=\"c\">rrrlx</span>\n<span class=\"nv\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n</code></pre></div>\n\n<h2 id=\"codigo-base\">C\u00f3digo base</h2>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sstream&gt;</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"k\">namespace</span><span class=\"w\"> </span><span class=\"nn\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Node</span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">BTree</span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">BTree</span><span class=\"p\">(){</span>\n<span class=\"w\">        </span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"n\">clone</span><span class=\"p\">(</span><span class=\"n\">stringstream</span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">ss</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">elo</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">&quot;#&quot;</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">stringstream</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">elo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">clone</span><span class=\"p\">(</span><span class=\"n\">ss</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">elo</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">clone</span><span class=\"p\">(</span><span class=\"n\">ss</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">elo</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">BTree</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">serial</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"n\">stringstream</span><span class=\"w\"> </span><span class=\"nf\">ss</span><span class=\"p\">(</span><span class=\"n\">serial</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">clone</span><span class=\"p\">(</span><span class=\"n\">ss</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">root</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"n\">__destroy</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">__destroy</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">__destroy</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">delete</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"o\">~</span><span class=\"n\">BTree</span><span class=\"p\">(){</span>\n<span class=\"w\">        </span><span class=\"n\">__destroy</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">root</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">find_path</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"c1\">//TODO</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"w\">    </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">getline</span><span class=\"p\">(</span><span class=\"n\">cin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">BTree</span><span class=\"w\"> </span><span class=\"n\">bt</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bt</span><span class=\"p\">.</span><span class=\"n\">find_path</span><span class=\"p\">(</span><span class=\"n\">bt</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01 um\n4 # #\n4\n======== EXPECT\nx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02 dois\n1 # 0 # # \n0\n======== EXPECT\nrx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03 tres\n4 # 8 2 # # # \n2\n======== EXPECT\nrlx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04 not found\n0 9 4 # # # 5 # # \n7\n======== EXPECT\n!\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # #\n2\n======== EXPECT\nrrrlx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05 quatro\n0 9 4 # # # 5 # # \n5\n======== EXPECT\nrx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06 cinco\n0 4 # # 2 0 # # 1 # # \n4\n======== EXPECT\nlx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07 seis\n2 1 5 # # # 9 # 7 # 8 # # \n9\n======== EXPECT\nrx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 08 dez\n1 8 7 # # 5 # 6 # # 3 0 # # 9 # 4 2 # # # \n2\n======== EXPECT\nrrrlx\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
