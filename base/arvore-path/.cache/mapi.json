{
    "title": "@arvore-path: Caminho at\u00e9 o n\u00f3",
    "description": "# Caminho at\u00e9 o n\u00f3\n\n<!--TOC_BEGIN-->\n- [Descri\u00e7\u00e3o](#descri\u00e7\u00e3o)\n- [Exemplo](#exemplo)\n- [Testes](#testes)\n- [C\u00f3digo base](#c\u00f3digo-base)\n<!--TOC_END-->\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/arvore-path/cover.jpg)\n\n## Descri\u00e7\u00e3o\n\n- Entrada\n  - linha 1: o serial de uma \u00e1rvore bin\u00e1ria\n  - linha 2: um valor de n\u00f3\n- Sa\u00edda\n  - se o valor existe:\n    - mostre o caminho da raiz at\u00e9 o n\u00f3,\n    - indicando 'l' ou 'r' se o caminho \u00e9 pelo filho da esquerda ou da direita.\n    - ponha um 'x' para quando achar o n\u00f3.\n  - Se o valor n\u00e3o existir na \u00e1rvore\n    - imprima \"!\"\n- Limita\u00e7\u00e3o\n  - Voc\u00ea deve percorrer a \u00e1rvore UMA \u00fanica vez para obter os caminhos e montar o caminho atrav\u00e9s do retorno da fun\u00e7\u00e3o.\n\n## Exemplo\n\nPara encontrar o 2 na \u00e1rvore abaixo, seguimos o caminho `rrrlx`\n\n```c\n//serial\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # #\n\n//bshow()\n    \u250c\u2500\u2500\u25007\n\u250c\u2500\u2500\u25008\n\u2502   \u2502   \u250c\u2500\u2500\u2500#\n\u2502   \u2514\u2500\u2500\u25004\n\u2502       \u2514\u2500\u2500\u25006\n1\n\u2502   \u250c\u2500\u2500\u25000\n\u2514\u2500\u2500\u25005\n    \u2502   \u250c\u2500\u2500\u2500#\n    \u2514\u2500\u2500\u25009\n        \u2502   \u250c\u2500\u2500\u25002\n        \u2514\u2500\u2500\u25003\n            \u2514\u2500\u2500\u2500#\n```\n\n```cpp\n//a fun\u00e7\u00e3o recursiva find deve retornar uma sequencia o path at\u00e9 o destino com x no final\nstring find_path(Node * root, int value);\n```\n\n## Testes\n\n```txt\n>>>>>>>> 01 um\n4 # #\n4\n========\nx\n<<<<<<<<\n\n>>>>>>>> 02 dois\n1 # 0 # # \n0\n========\nrx\n<<<<<<<<\n\n>>>>>>>> 03 tres\n4 # 8 2 # # # \n2\n========\nrlx\n<<<<<<<<\n\n>>>>>>>> 04 not found\n0 9 4 # # # 5 # # \n7\n========\n!\n<<<<<<<<\n\n>>>>>>>>\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # #\n2\n========\nrrrlx\n<<<<<<<<\n\n```\n\n## C\u00f3digo base\n\n```cpp\n#include <iostream>\n#include <sstream>\nusing namespace std;\n\nstruct Node{\n    int value;\n    Node * left;\n    Node * right;\n    Node(int value = 0, Node * left = nullptr, Node * right = nullptr){\n        this->value = value;\n        this->left = left;\n        this->right = right;\n    }\n};\n\nstruct BTree{\n    Node * root;\n    BTree(){\n        this->root = nullptr;\n    }\n\n    void clone(stringstream& ss, Node ** elo){\n        string value;\n        ss >> value;\n        if(value == \"#\")\n            return;\n        int num;\n        stringstream(value) >> num;\n        *elo =  new Node(num);\n        clone(ss, &(*elo)->left);\n        clone(ss, &(*elo)->right);\n    }\n\n    BTree(string serial){\n        stringstream ss(serial);\n        clone(ss, &root);\n    }\n\n    void __destroy(Node * node){\n        if(node == nullptr)\n            return;\n        __destroy(node->left);\n        __destroy(node->right);\n        delete node;\n    }\n\n    ~BTree(){\n        __destroy(this->root);\n    }\n\n    string find_path(Node * node, int value){\n        //TODO\n    }\n};\n\nint main(){\n    string line;\n    getline(cin, line);\n    BTree bt(line);\n    int value;\n    cin >> value;\n    string path = bt.find_path(bt.root, value);\n    cout << path << \"\\n\";\n}\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01 um\n4 # #\n4\n======== EXPECT\nx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02 dois\n1 # 0 # # \n0\n======== EXPECT\nrx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03 tres\n4 # 8 2 # # # \n2\n======== EXPECT\nrlx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04 not found\n0 9 4 # # # 5 # # \n7\n======== EXPECT\n!\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # #\n2\n======== EXPECT\nrrrlx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05 quatro\n0 9 4 # # # 5 # # \n5\n======== EXPECT\nrx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06 cinco\n0 4 # # 2 0 # # 1 # # \n4\n======== EXPECT\nlx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07 seis\n2 1 5 # # # 9 # 7 # 8 # # \n9\n======== EXPECT\nrx\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 08 dez\n1 8 7 # # 5 # 6 # # 3 0 # # 9 # 4 2 # # # \n2\n======== EXPECT\nrrrlx\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
