{
    "title": "@labirinto: Escapando do labirinto",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@labirinto: Escapando do labirinto</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@labirinto: Escapando do labirinto</h1>\n            <h1 id=\"escapando-do-labirinto\">Escapando do labirinto</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/labirinto/cover.jpg\" /></p>\n<p>Um labirinto perfeito \u00e9 um labirinto no qual entre dois quaisquer pontos existe apenas um \u00fanico caminho.</p>\n<p>Leia uma matriz que representa um labirinto perfeito, os pontos de inicio e fim e imprima o labirinto mostrando o caminho entre os pontos.</p>\n<ul>\n<li>Entrada</li>\n<li>Linha 1: n\u00famero de linhas e das colunas da matriz</li>\n<li>\n<p>Linhas subsequentes: matriz composta por 4 caracteres</p>\n<ul>\n<li><code>#</code> representa uma parede</li>\n<li><code>_</code> representa um corredor por onde se pode andar</li>\n<li><code>I</code> representa o in\u00edcio</li>\n<li><code>F</code> representa o fim</li>\n</ul>\n</li>\n<li>\n<p>Sa\u00edda</p>\n</li>\n<li>Imprima a matriz utilizando o char <code>.</code> para mostrar o caminho entre in\u00edcio e fim</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-txt\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n10 20\n####################\n#___#_#_#_#___#_##_#\n###_#_____###______#\n##__##_##___#_###_##\n#_I##___###_###____#\n#_#####_#___#___##_#\n#_#_____##_###_##__#\n#_##_####___#__#__##\n#___F#____#___##_###\n####################\n========\n####################\n#___#_#_#_#___#_##_#\n###_#_____###______#\n##__##_##___#_###_##\n#..##___###_###____#\n#.#####_#___#___##_#\n#.#_____##_###_##__#\n#.##_####___#__#__##\n#....#____#___##_###\n####################\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n10 30\n##############################\n#__#________##_#_#_##_______##\n##_#_##_##_##____#_#__##_##__#\n##_###__#I____##___####___##_#\n#__##__###########___#__#__#_#\n#_##__##_F_#_#___###_#######_#\n#_##_###_###___#___#_##___#__#\n#__#_#_#_#___#####_#_#__#_#_##\n##___#_____#_____#_____##____#\n##############################\n========\n##############################\n#__#________##_#_#_##_______##\n##_#_##_##_##....#_#__##_##__#\n##_###__#.....##...####___##_#\n#__##__###########...#__#__#_#\n#_##__##.._#_#...###.#######_#\n#_##_###.###...#...#.##___#__#\n#__#_#_#.#...#####.#.#__#_#_##\n##___#__...#_____#...__##____#\n##############################\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre>\n\n<h2 id=\"help\">Help</h2>\n<p>Voc\u00ea pode usar esse c\u00f3digo como ajuda. Ele carrega a matriz e mostra. O m\u00e9todo <code>get_vizinhos</code> \u00e9 bem \u00fatil para iterar nos vizinhos de um ponto.</p>\n<pre class=\"codehilite\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct Pos{\n    int l;\n    int c;\n};\n\n//retorna um vetor com todos os vizinhos da posi\u00e7\u00e3o p\nvector&lt;Pos&gt; get_vizinhos(Pos p){\n    return {{p.l, p.c - 1}, {p.l - 1, p.c}, {p.l, p.c + 1}, {p.l + 1, p.c}};\n}\n\n\nint main(){\n    int nl = 0, nc = 0;\n    cin &gt;&gt; nl &gt;&gt; nc;\n    vector&lt;string&gt; mat(nl, &quot;&quot;); //come\u00e7a com nl strings &quot;&quot;\n    getchar();//remove \\n after nc\n    Pos inicio, fim;\n\n    //carregando matriz\n    for(int i = 0; i &lt; nl; i++)\n        getline(cin, mat[i]);\n\n    //procurando inicio e fim e colocando ' ' nas posi\u00e7\u00f5es iniciais\n    for(int l = 0; l &lt; nl; l++){\n        for(int c = 0; c &lt; nc; c++){\n            if(mat[l][c] == 'I'){\n                mat[l][c] = '_';\n                inicio = Pos {l, c};\n            }\n            if(mat[l][c] == 'F'){\n                mat[l][c] = '_';\n                fim = Pos {l, c};\n            }\n        }\n    }\n\n    for(string line : mat)\n        cout &lt;&lt; line &lt;&lt; endl;\n    cout &lt;&lt; &quot;       nl=&quot; &lt;&lt; nl &lt;&lt; &quot; nc=&quot; &lt;&lt; nc &lt;&lt; &quot;\\n&quot;;\n    cout &lt;&lt; &quot;inicio: l=&quot; &lt;&lt; inicio.l &lt;&lt; &quot; , c=&quot; &lt;&lt; inicio.c &lt;&lt; endl;\n    cout &lt;&lt; &quot;   fim: l=&quot; &lt;&lt; fim.l &lt;&lt; &quot; , c=&quot; &lt;&lt; fim.c &lt;&lt; endl;\n}\n</code></pre>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n10 20\n####################\n#___#_#_#_#___#_##_#\n###_#_____###______#\n##__##_##___#_###_##\n#_I##___###_###____#\n#_#####_#___#___##_#\n#_#_____##_###_##__#\n#_##_####___#__#__##\n#___F#____#___##_###\n####################\n======== EXPECT\n####################\n#___#_#_#_#___#_##_#\n###_#_____###______#\n##__##_##___#_###_##\n#..##___###_###____#\n#.#####_#___#___##_#\n#.#_____##_###_##__#\n#.##_####___#__#__##\n#....#____#___##_###\n####################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10 30\n##############################\n#__#________##_#_#_##_______##\n##_#_##_##_##____#_#__##_##__#\n##_###__#I____##___####___##_#\n#__##__###########___#__#__#_#\n#_##__##_F_#_#___###_#######_#\n#_##_###_###___#___#_##___#__#\n#__#_#_#_#___#####_#_#__#_#_##\n##___#_____#_____#_____##____#\n##############################\n======== EXPECT\n##############################\n#__#________##_#_#_##_______##\n##_#_##_##_##....#_#__##_##__#\n##_###__#.....##...####___##_#\n#__##__###########...#__#__#_#\n#_##__##.._#_#...###.#######_#\n#_##_###.###...#...#.##___#__#\n#__#_#_#.#...#####.#.#__#_#_##\n##___#__...#_____#...__##____#\n##############################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10 20\n####################\n#___#_#_#I#F__#_##_#\n###_#_____###______#\n##__##_##___#_###_##\n#__##___###_###____#\n#_#####_#___#___##_#\n#_#_____##_###_##__#\n#_##_####___#__#__##\n#____#____#___##_###\n####################\n======== EXPECT\n####################\n#___#_#_#.#...#_##_#\n###_#____.###....._#\n##__##_##...#_###.##\n#__##___###.###..._#\n#_#####_#_..#_..##_#\n#_#_____##.###.##__#\n#_##_####_..#..#__##\n#____#____#...##_###\n####################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10 30\n##############################\n#I_#________##_#_#_##_______##\n##_#_##_##_##____#_#__##_##__#\n##_###__#_____##___####___##_#\n#__##__###########___#__#__#_#\n#_##__##___#_#___###_#######_#\n#_##_###_###___#___#_##___#__#\n#__#_#_#_#___#####_#_#__#_#_##\n##___#_____#_____#_____##___F#\n##############################\n======== EXPECT\n##############################\n#..#___...._##_#_#_##_______##\n##.#_##.##.##....#_#__##_##__#\n##.###..#_....##...####___##_#\n#..##..###########...#__#__#_#\n#.##..##___#_#___###.#######_#\n#.##.###_###___#___#.##...#__#\n#..#.#_#_#___#####_#.#..#.#_##\n##...#_____#_____#__...##....#\n##############################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n25 70\n######################################################################\n#_#___#________##___##___#___#___##______##____________##____##___#_F#\n#_#_#___######____#I#__#___#_#_#__##_#_###__#_###_#_####__#_##__#___##\n#_#_#####____######_#_######___##__#_#__#__##_#___#_#____##____#######\n#_#__#_###_#_#___##_#_#_##_#######___##_#######_#_###_#_#####_##_____#\n#_##___#___###_#____#_#_#____#___##_##___##___#_#_#___#_____###__###_#\n#__###_##_##___####_#___#_##_##_###__###____#_#_#_#_#######__##_##___#\n##__##_____#_####___###___#__#____##__#######_#_###__##___##____#__#_#\n###__#####_#_##_#_###___#_#_##_##__##____#____#__###_#__#__######_##_#\n#_##_____###__#___#___#####__#####__####_##_####__#__#_##_##____#_#__#\n#_######___##_#####_#_#___##_____##_#__#__#___###___#####__#_##___#_##\n#_____####__#_______###_#__####_##____###_###___#_#__#____##_######__#\n#_###_#_###_##_######___##_#__#_#__##_#_#___###_####_##_####_#__#_##_#\n#_#_____#_#__####_____####_##_____##____###_#_#__#____#_#____##___##_#\n#_#_###_#_##_#____#####__#__#_##_######__#__#_##_##_#___#_######_##__#\n#_#__##____#___####_#___###_#__###____####_##__#__#######_#___##____##\n#_##__####_######_#___####__##__##_##__#___#__###__#______##_##__#####\n#__##__#________#_#_#____##_###__#_###_##_###___##_##_#####__#__##_#_#\n##__##_##_###_#___#_##_#_#___#####_#___#__#___####_#__#___##_#_##____#\n###__#__###___#####__#_###_###_#___#_###_##_#___#__#_##_#____#__##_###\n#_##_##___#####___##_#___#_____#_###_#___##_###___##_#__###_###__#__##\n#_##__###_#_____#__#_##_######___#_#___###__#_#####__#_##_#___##_##__#\n#__#_##_#_#_######_#_##_#____#####_#####___##____##_##_##_##_##___##_#\n##______#________#____#___##_____________#____##____#______#____#____#\n######################################################################\n======== EXPECT\n######################################################################\n#_#___#________##___##...#...#...##_...__##____________##..._##...#..#\n#_#_#___######____#.#..#...#.#.#..##.#.###__#_###_#_####..#.##..#...##\n#_#_#####____######.#.######...##..#.#..#__##_#___#_#__..##....#######\n#_#__#_###_#_#...##.#.#_##_#######...##.#######_#_###_#.#####_##.....#\n#_##___#___###.#....#.#_#____#___##_##_..##...#_#_#___#.....###..###.#\n#__###_##_##...####_#...#_##_##_###__###....#.#_#_#_#######..##.##...#\n##__##_____#.####___###.__#__#____##__#######.#_###__##___##....#..#_#\n###__#####_#.##_#_###...#_#_##_##__##____#_...#__###_#__#__######.##_#\n#_##_____###..#___#...#####__#####__####_##.####__#__#_##_##....#.#__#\n#_######___##.#####.#_#___##_____##_#__#__#...###___#####__#.##...#_##\n#_____####__#.......###_#__####_##____###_###...#_#__#____##.######__#\n#_###_#_###_##_######___##_#__#_#__##_#_#___###.####_##_####.#__#_##_#\n#_#_____#_#__####_____####_##_____##____###_#_#..#____#_#....##___##_#\n#_#_###_#_##_#____#####__#__#_##_######__#__#_##.##_#___#.######_##__#\n#_#__##____#___####_#___###_#__###____####_##__#..#######.#___##____##\n#_##__####_######_#___####__##__##_##__#___#__###..#_.....##_##__#####\n#__##__#________#_#_#____##_###__#_###_##_###___##.##.#####__#__##_#_#\n##__##_##_###_#___#_##_#_#___#####_#___#__#...####.#..#___##_#_##____#\n###__#__###___#####__#_###_###_#___#_###_##.#...#..#.##_#____#__##_###\n#_##_##___#####___##_#___#_____#_###_#___##.###...##.#__###_###__#__##\n#_##__###_#_____#__#_##_######___#_#___###..#_#####..#_##_#___##_##__#\n#__#_##_#_#_######_#_##_#____#####_#####__.##....##.##_##_##_##___##_#\n##______#________#____#___##_____________#....##....#______#____#____#\n######################################################################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n27 90\n##########################################################################################\n#I______#__________#_______#____#____#___________#__#_#___#___##_#_##___##_____________F##\n#######_##_###_###___#####_##_#_##_#___###_#####_##___#_#___#____#_#__#__##_####_######__#\n#_____#__###___#_#####_##__#__#__#_#####___#_____#__#_#_##_#####_#___###__#_##_#_#____##_#\n#_##_###__###_##_____#____###_##_####____####_#####_###__#____#____#__#####__#_#_#_####__#\n#_##___##_____#__#####_####___#_____#_####__#_#___#_____##_##_#########___##___#_#__##__##\n#__##_##########_______#____#######___##_#_##_#_#___#_#__###______##____#__#_###_##____###\n#_##____#_##___#_########_#__#____#####__#____##########__#####_#____#####____##__#_#_##_#\n#__####___#__#___#____#_#_##_#_##___#___##_####________####___###_##___#_####__##_###__#_#\n##_#__###___######_##______#____###_##_##__#__##_#####___##_#___###__###___#####____##___#\n#__##___#####_#____#######_######___#_____###_##_#__####____###___####___#____##_#_#####_#\n#_####_##_#___#_####____####___###_###_####___#__##____######_###______######__#_#__#__#_#\n#___##______#_#__##__#_##____#_____#_#__#_###___####_#_#_#__#___#########___##_#_##_##___#\n##_##__#_####_##__####__#_##########_##___##__###____#___#_##_#______##___#_#__#_##__#_###\n#__#__##__##___##____##_#_____#__##___###____##_###_####___##_######_#__#_#_#_##__##_#___#\n##_#_####_#__######_##__#####_##____###_######___#__#____###__##_______######_###__#_###_#\n#__#____#_#_##___#_____##___#_###_#_#__________#___#######___##__#_#####___#___###_#__##_#\n#_#####_#_####_#___#_#____###_#___#_#_###_####_#####____#__###__####___#_#___###_####__###\n#_#_____#__##__#_#_#########__##_##_#___#_#_____#____#_##_###__###___#___#####______##___#\n#_##_#####__#_##_###_______#_##__#__##_##_###_#_#_####____#_#_##_#_#######_#___###_##__#_#\n#_#_____###____###___#####___###_#_##___#___#####_#__######_#_#__#____##_____#_#___#__##_#\n#_#_#_#__#####_#___####__#####___####_#####_______##_____#__#___####_##__##_####_###_###_#\n#_###_##_#___#_#_#_#__#_##__##_#__##___#_###############___####___#__#__##__#_#__#_____#_#\n#___####_#_#_###_####______##__##__###_#_#_#_______#___#_#____###___#######_#_#_##_#_###_#\n#_#____###_#_____##___##_###__####___#_#___#_#####___#___####_#_#####___#_#_#____#####___#\n#_##_#_____#_#_#_#__#__#_____##____#_____#___#_____#_#_#_#____________#_____#_##_______#_#\n##########################################################################################\n======== EXPECT\n##########################################################################################\n#.......#_____.....#.......#_...#____#____.......#__#_#___#___##_#_##___##______........##\n#######.##_###.###...#####.##.#.##_#___###.#####.##___#_#___#____#_#__#__##_####.######__#\n#...._#..###_..#_#####_##..#_.#..#_#####...#_....#__#_#_##_#####_#___###__#_##_#.#____##_#\n#.##.###..###.##_____#....###.##.####....####.#####_###__#____#____#__#####__#_#.#_####__#\n#.##.._##.....#__#####.####...#_....#.####__#.#___#_____##_##_#########___##___#.#__##__##\n#._##.##########.......#___.#######...##_#_##.#_#___#_#__###______##____#__#_###.##____###\n#.##_...#_##...#.########_#..#....#####__#....##########__#####_#____#####____##..#_#_##_#\n#..####...#..#...#____#_#_##.#.##...#___##.####_.......####...###_##___#_####__##.###__#_#\n##.#__###...######_##______#..._###.##_##..#__##.#####...##.#...###__###...#####_.._##___#\n#..##___#####_#____#######_######_..#_....###_##.#__####....###...####...#....##_#.#####_#\n#.####_##_#___#_####____####...###.###.####___#..##____######_###......######..#_#..#__#_#\n#.._##______#_#__##__#_##....#.....#_#..#_###...####_#_#_#__#...#########___##.#_##.##___#\n##.##__#_####_##__####__#.##########_##...##..###____#___#_##.#......##___#_#..#_##..#_###\n#_.#__##__##___##____##_#.....#__##___###....##_###_####___##.######.#__#_#_#.##__##.#___#\n##.#_####_#__######_##__#####.##____###_######___#__#____###..##.....__######.###__#.###_#\n#..#____#_#_##___#_____##___#.###_#_#....._____#___#######...##..#_#####...#.._###_#..##_#\n#.#####_#_####_#___#_#____###.#___#_#.###.####_#####..._#..###..####...#.#...###_####..###\n#.#_____#__##__#_#_#########..##_##_#.._#.#_____#....#.##.###..###...#...#####....._##...#\n#.##_#####__#_##_###.......#.##__#__##.##.###_#_#.####....#_#.##_#.#######_#...###.##__#.#\n#.#_____###____###...#####...###_#_##.._#...#####.#__######_#.#__#..._##___..#_#...#__##.#\n#.#_#_#__#####_#...####__#####___####.#####.......##_____#__#...####.##__##.####.###_###.#\n#.###_##_#...#_#.#_#__#_##__##_#__##_..#_###############...####...#..#__##_.#_#..#_____#.#\n#...####_#.#.###.####______##__##__###.#_#_#.......#...#.#....###...#######.#_#.##_#_###.#\n#_#....###.#.....##___##_###__####___#.#...#.#####...#...####.#_#####...#_#.#__..#####...#\n#_##_#.....#_#_#_#__#__#_____##____#__...#...#_____#_#_#_#___.........#.....#_##.......#_#\n##########################################################################################\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "main.hpp",
                "contents": "#include <iostream>\n#include <vector>\n\nstruct Pos{\n    int l;\n    int c;\n};\n\nbool procurar_saida(std::vector<std::string> &mat, Pos atual, Pos fim);\n\nnamespace lib {\n    void remover_erros(std::vector<std::string> &mat){\n        int nl = mat.size();\n        int nc = mat[0].size();\n        for(int l = 0; l < nl; l++)\n            for(int c = 0; c < nc; c++)\n                if(mat[l][c] == 'x')\n                    mat[l][c] = '_';\n    }\n\n    void rodar_testes(){\n        int nl = 0, nc = 0;\n        std::cin >> nl >> nc;\n        std::vector<std::string> mat(nl, \"\"); //come\u00e7a com nl strings \"\"\n        getchar();//remove \\n after nc\n        Pos inicio, fim;\n\n        //carregando matriz\n        for(int i = 0; i < nl; i++)\n            std::getline(std::cin, mat[i]);\n\n        //procurando inicio e fim e colocando ' ' nas posi\u00e7\u00f5es iniciais\n        for(int l = 0; l < nl; l++){\n            for(int c = 0; c < nc; c++){\n                if(mat[l][c] == 'I'){\n                    mat[l][c] = '_';\n                    inicio = Pos {l, c};\n                }\n                if(mat[l][c] == 'F'){\n                    mat[l][c] = '_';\n                    fim = Pos {l, c};\n                }\n            }\n        }\n        procurar_saida(mat, inicio, fim);\n        remover_erros(mat);\n        for(std::string line : mat)\n            std::cout << line << '\\n';\n    }\n}\n",
                "encoding": 0
            },
            {
                "name": "solver.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include \"main.hpp\"\n\nusing namespace std;\n\n#define get(mat, pos) mat[pos.l][pos.c]\n\n//retorna um vetor com todos os vizinhos de pos\n//left, up, right, down\nvector<Pos> get_vizinhos(Pos p){\n    return {{p.l, p.c - 1}, {p.l - 1, p.c}, {p.l, p.c + 1}, {p.l + 1, p.c}};\n}\n\n//fun\u00e7\u00e3o recursiva que verifica se pos atual eh o fim\n//e retorna se o caminho \u00e9 valido para chegar no fim\nbool procurar_saida(vector<string> &mat, Pos atual, Pos fim){\n    if(atual.l == fim.l && atual.c == fim.c){\n        get(mat, atual) = '.';\n        return true;\n    }\n    if(get(mat, atual) != '_')\n        return false; //parede ou ja foi visitado\n    get(mat, atual) = '.';\n    for(Pos viz : get_vizinhos(atual)){\n        if(procurar_saida(mat, viz, fim)){\n            return true;\n        }\n    }\n    get(mat, atual) = 'x';\n    return false;\n}\n\nint main(){\n    lib::rodar_testes();\n    return 0;\n}\n",
                "encoding": 0
            }
        ],
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\ntype Pos struct {\n\tl, c int\n}\n\n// compara duas posi\u00e7\u00f5es\nfunc (p Pos) equals(other Pos) bool {\n\treturn p.l == other.l && p.c == other.c\n}\n\nfunc (p Pos) getNeighbors() []Pos {\n\treturn []Pos{\n\t\t{p.l, p.c - 1},\n\t\t{p.l - 1, p.c},\n\t\t{p.l, p.c + 1},\n\t\t{p.l + 1, p.c},\n\t}\n}\n\n// Fun\u00e7\u00e3o recursiva que tenta encontrar o caminho do in\u00edcio ao fim\nfunc procurarSaida(mat [][]rune, atual, fim Pos) bool {\n\t_, _, _ = mat, atual, fim\n\t// se posi\u00e7\u00e3o n\u00e3o existir ou n\u00e3o for caminho retorne falso\n\t// se posi\u00e7\u00e3o for o fim retorne verdadeiro\n\t// marca a posi\u00e7\u00e3o atual como possivel caminho usando .\n\t// para cada vizinho, chama a fun\u00e7\u00e3o recursivamente\n\t// se algum dos meus vizinho for caminho, eu sou caminho\n\t// se nenhum vizinho for caminho, eu sou erro\n\t// marca a posi\u00e7\u00e3o atual como erro usando x\n\t// retorna falso\n\treturn false\n\n}\n\nfunc removerErros(mat [][]rune) {\n\tfor l := range mat {\n\t\tfor c := range mat[0] {\n\t\t\tif mat[l][c] == 'x' {\n\t\t\t\tmat[l][c] = '_'\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tscanner.Scan()\n\tnl_nc := scanner.Text()\n\tvar nl, nc int\n\tfmt.Sscanf(nl_nc, \"%d %d\", &nl, &nc)\n\tmat := make([][]rune, nl)\n\n\t// L\u00ea a matriz\n\tfor i := range nl {\n\t\tscanner.Scan()\n\t\tmat[i] = []rune(scanner.Text())\n\t}\n\n\t// Procura posi\u00e7\u00f5es de in\u00edcio e fim e conserta para _\n\tinicio, fim := procurarPosicoes(mat)\n\tprocurarSaida(mat, inicio, fim)\n\tremoverErros(mat)\n\n\t// Imprime o labirinto final\n\tfor _, line := range mat {\n\t\tfmt.Println(string(line))\n\t}\n}\n\n// procura as posi\u00e7\u00f5es de in\u00edcio e fim do labirinto\n// depois, as substitui por '_'\nfunc procurarPosicoes(mat [][]rune) (Pos, Pos) {\n\tnl := len(mat)\n\tnc := len(mat[0])\n\tinicio := Pos{}\n\tfim := Pos{}\n\tfor l := range nl {\n\t\tfor c := range nc {\n\t\t\tswitch mat[l][c] {\n\t\t\tcase 'I':\n\t\t\t\tmat[l][c] = '_'\n\t\t\t\tinicio = Pos{l, c}\n\t\t\tcase 'F':\n\t\t\t\tmat[l][c] = '_'\n\t\t\t\tfim = Pos{l, c}\n\t\t\t}\n\t\t}\n\t}\n\treturn inicio, fim\n}\n",
                "encoding": 0
            }
        ]
    }
}
