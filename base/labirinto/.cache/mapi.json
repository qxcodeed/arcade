{
    "title": "@labirinto: Escapando do labirinto",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@labirinto: Escapando do labirinto</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Escapando do labirinto</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/labirinto/cover.jpg\" /></p>\n<p>Um labirinto perfeito \u00e9 um labirinto no qual entre dois quaisquer pontos existe apenas um \u00fanico caminho.</p>\n<p>Leia uma matriz que representa um labirinto perfeito, os pontos de inicio e fim e imprima o labirinto mostrando o caminho entre os pontos.</p>\n<ul>\n<li>\n<p>Entrada</p>\n<ul>\n<li>Linha 1: n\u00famero de linhas e das colunas da matriz</li>\n<li>Linhas subsequentes: matriz composta por 4 caracteres<ul>\n<li><code>#</code> representa uma parede</li>\n<li><code>_</code> representa um corredor por onde se pode andar</li>\n<li><code>I</code> representa o in\u00edcio</li>\n<li><code>F</code> representa o fim</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Sa\u00edda</p>\n<ul>\n<li>Imprima a matriz utilizando o char <code>.</code> para mostrar o caminho entre in\u00edcio e fim</li>\n</ul>\n</li>\n</ul>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n10 20\n####################\n#___#_#_#_#___#_##_#\n###_#_____###______#\n##__##_##___#_###_##\n#_I##___###_###____#\n#_#####_#___#___##_#\n#_#_____##_###_##__#\n#_##_####___#__#__##\n#___F#____#___##_###\n####################\n========\n####################\n#___#_#_#_#___#_##_#\n###_#_____###______#\n##__##_##___#_###_##\n#..##___###_###____#\n#.#####_#___#___##_#\n#.#_____##_###_##__#\n#.##_####___#__#__##\n#....#____#___##_###\n####################\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n10 30\n##############################\n#__#________##_#_#_##_______##\n##_#_##_##_##____#_#__##_##__#\n##_###__#I____##___####___##_#\n#__##__###########___#__#__#_#\n#_##__##_F_#_#___###_#######_#\n#_##_###_###___#___#_##___#__#\n#__#_#_#_#___#####_#_#__#_#_##\n##___#_____#_____#_____##____#\n##############################\n========\n##############################\n#__#________##_#_#_##_______##\n##_#_##_##_##....#_#__##_##__#\n##_###__#.....##...####___##_#\n#__##__###########...#__#__#_#\n#_##__##.._#_#...###.#######_#\n#_##_###.###...#...#.##___#__#\n#__#_#_#.#...#####.#.#__#_#_##\n##___#__...#_____#...__##____#\n##############################\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre></div>\n<h2>Help</h2>\n<p>Voc\u00ea pode usar esse c\u00f3digo como ajuda. Ele carrega a matriz e mostra. O m\u00e9todo <code>get_vizinhos</code> \u00e9 bem \u00fatil para iterar nos vizinhos de um ponto.</p>\n<div class=\"language-c++ highlight\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;vector&gt;</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"k\">namespace</span><span class=\"w\"> </span><span class=\"nn\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Pos</span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">//retorna um vetor com todos os vizinhos da posi\u00e7\u00e3o p</span>\n<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Pos</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">get_vizinhos</span><span class=\"p\">(</span><span class=\"n\">Pos</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">){</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">}};</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">(){</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">nl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">nl</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">nc</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">mat</span><span class=\"p\">(</span><span class=\"n\">nl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;&quot;</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">//come\u00e7a com nl strings &quot;&quot;</span>\n<span class=\"w\">    </span><span class=\"n\">getchar</span><span class=\"p\">();</span><span class=\"c1\">//remove \\n after nc</span>\n<span class=\"w\">    </span><span class=\"n\">Pos</span><span class=\"w\"> </span><span class=\"n\">inicio</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fim</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">//carregando matriz</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">nl</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">getline</span><span class=\"p\">(</span><span class=\"n\">cin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mat</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">//procurando inicio e fim e colocando &#39; &#39; nas posi\u00e7\u00f5es iniciais</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">nl</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">nc</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">++</span><span class=\"p\">){</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">mat</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">][</span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"sc\">&#39;I&#39;</span><span class=\"p\">){</span>\n<span class=\"w\">                </span><span class=\"n\">mat</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">][</span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">&#39;_&#39;</span><span class=\"p\">;</span>\n<span class=\"w\">                </span><span class=\"n\">inicio</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Pos</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">};</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">mat</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">][</span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"sc\">&#39;F&#39;</span><span class=\"p\">){</span>\n<span class=\"w\">                </span><span class=\"n\">mat</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">][</span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">&#39;_&#39;</span><span class=\"p\">;</span>\n<span class=\"w\">                </span><span class=\"n\">fim</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Pos</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">};</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">mat</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;       nl=&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">nl</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot; nc=&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">nc</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;inicio: l=&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">inicio</span><span class=\"p\">.</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot; , c=&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">inicio</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;   fim: l=&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">fim</span><span class=\"p\">.</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot; , c=&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">fim</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n10 20\n####################\n#___#_#_#_#___#_##_#\n###_#_____###______#\n##__##_##___#_###_##\n#_I##___###_###____#\n#_#####_#___#___##_#\n#_#_____##_###_##__#\n#_##_####___#__#__##\n#___F#____#___##_###\n####################\n======== EXPECT\n####################\n#___#_#_#_#___#_##_#\n###_#_____###______#\n##__##_##___#_###_##\n#..##___###_###____#\n#.#####_#___#___##_#\n#.#_____##_###_##__#\n#.##_####___#__#__##\n#....#____#___##_###\n####################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10 30\n##############################\n#__#________##_#_#_##_______##\n##_#_##_##_##____#_#__##_##__#\n##_###__#I____##___####___##_#\n#__##__###########___#__#__#_#\n#_##__##_F_#_#___###_#######_#\n#_##_###_###___#___#_##___#__#\n#__#_#_#_#___#####_#_#__#_#_##\n##___#_____#_____#_____##____#\n##############################\n======== EXPECT\n##############################\n#__#________##_#_#_##_______##\n##_#_##_##_##....#_#__##_##__#\n##_###__#.....##...####___##_#\n#__##__###########...#__#__#_#\n#_##__##.._#_#...###.#######_#\n#_##_###.###...#...#.##___#__#\n#__#_#_#.#...#####.#.#__#_#_##\n##___#__...#_____#...__##____#\n##############################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10 20\n####################\n#___#_#_#I#F__#_##_#\n###_#_____###______#\n##__##_##___#_###_##\n#__##___###_###____#\n#_#####_#___#___##_#\n#_#_____##_###_##__#\n#_##_####___#__#__##\n#____#____#___##_###\n####################\n======== EXPECT\n####################\n#___#_#_#.#...#_##_#\n###_#____.###....._#\n##__##_##...#_###.##\n#__##___###.###..._#\n#_#####_#_..#_..##_#\n#_#_____##.###.##__#\n#_##_####_..#..#__##\n#____#____#...##_###\n####################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10 30\n##############################\n#I_#________##_#_#_##_______##\n##_#_##_##_##____#_#__##_##__#\n##_###__#_____##___####___##_#\n#__##__###########___#__#__#_#\n#_##__##___#_#___###_#######_#\n#_##_###_###___#___#_##___#__#\n#__#_#_#_#___#####_#_#__#_#_##\n##___#_____#_____#_____##___F#\n##############################\n======== EXPECT\n##############################\n#..#___...._##_#_#_##_______##\n##.#_##.##.##....#_#__##_##__#\n##.###..#_....##...####___##_#\n#..##..###########...#__#__#_#\n#.##..##___#_#___###.#######_#\n#.##.###_###___#___#.##...#__#\n#..#.#_#_#___#####_#.#..#.#_##\n##...#_____#_____#__...##....#\n##############################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n25 70\n######################################################################\n#_#___#________##___##___#___#___##______##____________##____##___#_F#\n#_#_#___######____#I#__#___#_#_#__##_#_###__#_###_#_####__#_##__#___##\n#_#_#####____######_#_######___##__#_#__#__##_#___#_#____##____#######\n#_#__#_###_#_#___##_#_#_##_#######___##_#######_#_###_#_#####_##_____#\n#_##___#___###_#____#_#_#____#___##_##___##___#_#_#___#_____###__###_#\n#__###_##_##___####_#___#_##_##_###__###____#_#_#_#_#######__##_##___#\n##__##_____#_####___###___#__#____##__#######_#_###__##___##____#__#_#\n###__#####_#_##_#_###___#_#_##_##__##____#____#__###_#__#__######_##_#\n#_##_____###__#___#___#####__#####__####_##_####__#__#_##_##____#_#__#\n#_######___##_#####_#_#___##_____##_#__#__#___###___#####__#_##___#_##\n#_____####__#_______###_#__####_##____###_###___#_#__#____##_######__#\n#_###_#_###_##_######___##_#__#_#__##_#_#___###_####_##_####_#__#_##_#\n#_#_____#_#__####_____####_##_____##____###_#_#__#____#_#____##___##_#\n#_#_###_#_##_#____#####__#__#_##_######__#__#_##_##_#___#_######_##__#\n#_#__##____#___####_#___###_#__###____####_##__#__#######_#___##____##\n#_##__####_######_#___####__##__##_##__#___#__###__#______##_##__#####\n#__##__#________#_#_#____##_###__#_###_##_###___##_##_#####__#__##_#_#\n##__##_##_###_#___#_##_#_#___#####_#___#__#___####_#__#___##_#_##____#\n###__#__###___#####__#_###_###_#___#_###_##_#___#__#_##_#____#__##_###\n#_##_##___#####___##_#___#_____#_###_#___##_###___##_#__###_###__#__##\n#_##__###_#_____#__#_##_######___#_#___###__#_#####__#_##_#___##_##__#\n#__#_##_#_#_######_#_##_#____#####_#####___##____##_##_##_##_##___##_#\n##______#________#____#___##_____________#____##____#______#____#____#\n######################################################################\n======== EXPECT\n######################################################################\n#_#___#________##___##...#...#...##_...__##____________##..._##...#..#\n#_#_#___######____#.#..#...#.#.#..##.#.###__#_###_#_####..#.##..#...##\n#_#_#####____######.#.######...##..#.#..#__##_#___#_#__..##....#######\n#_#__#_###_#_#...##.#.#_##_#######...##.#######_#_###_#.#####_##.....#\n#_##___#___###.#....#.#_#____#___##_##_..##...#_#_#___#.....###..###.#\n#__###_##_##...####_#...#_##_##_###__###....#.#_#_#_#######..##.##...#\n##__##_____#.####___###.__#__#____##__#######.#_###__##___##....#..#_#\n###__#####_#.##_#_###...#_#_##_##__##____#_...#__###_#__#__######.##_#\n#_##_____###..#___#...#####__#####__####_##.####__#__#_##_##....#.#__#\n#_######___##.#####.#_#___##_____##_#__#__#...###___#####__#.##...#_##\n#_____####__#.......###_#__####_##____###_###...#_#__#____##.######__#\n#_###_#_###_##_######___##_#__#_#__##_#_#___###.####_##_####.#__#_##_#\n#_#_____#_#__####_____####_##_____##____###_#_#..#____#_#....##___##_#\n#_#_###_#_##_#____#####__#__#_##_######__#__#_##.##_#___#.######_##__#\n#_#__##____#___####_#___###_#__###____####_##__#..#######.#___##____##\n#_##__####_######_#___####__##__##_##__#___#__###..#_.....##_##__#####\n#__##__#________#_#_#____##_###__#_###_##_###___##.##.#####__#__##_#_#\n##__##_##_###_#___#_##_#_#___#####_#___#__#...####.#..#___##_#_##____#\n###__#__###___#####__#_###_###_#___#_###_##.#...#..#.##_#____#__##_###\n#_##_##___#####___##_#___#_____#_###_#___##.###...##.#__###_###__#__##\n#_##__###_#_____#__#_##_######___#_#___###..#_#####..#_##_#___##_##__#\n#__#_##_#_#_######_#_##_#____#####_#####__.##....##.##_##_##_##___##_#\n##______#________#____#___##_____________#....##....#______#____#____#\n######################################################################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n27 90\n##########################################################################################\n#I______#__________#_______#____#____#___________#__#_#___#___##_#_##___##_____________F##\n#######_##_###_###___#####_##_#_##_#___###_#####_##___#_#___#____#_#__#__##_####_######__#\n#_____#__###___#_#####_##__#__#__#_#####___#_____#__#_#_##_#####_#___###__#_##_#_#____##_#\n#_##_###__###_##_____#____###_##_####____####_#####_###__#____#____#__#####__#_#_#_####__#\n#_##___##_____#__#####_####___#_____#_####__#_#___#_____##_##_#########___##___#_#__##__##\n#__##_##########_______#____#######___##_#_##_#_#___#_#__###______##____#__#_###_##____###\n#_##____#_##___#_########_#__#____#####__#____##########__#####_#____#####____##__#_#_##_#\n#__####___#__#___#____#_#_##_#_##___#___##_####________####___###_##___#_####__##_###__#_#\n##_#__###___######_##______#____###_##_##__#__##_#####___##_#___###__###___#####____##___#\n#__##___#####_#____#######_######___#_____###_##_#__####____###___####___#____##_#_#####_#\n#_####_##_#___#_####____####___###_###_####___#__##____######_###______######__#_#__#__#_#\n#___##______#_#__##__#_##____#_____#_#__#_###___####_#_#_#__#___#########___##_#_##_##___#\n##_##__#_####_##__####__#_##########_##___##__###____#___#_##_#______##___#_#__#_##__#_###\n#__#__##__##___##____##_#_____#__##___###____##_###_####___##_######_#__#_#_#_##__##_#___#\n##_#_####_#__######_##__#####_##____###_######___#__#____###__##_______######_###__#_###_#\n#__#____#_#_##___#_____##___#_###_#_#__________#___#######___##__#_#####___#___###_#__##_#\n#_#####_#_####_#___#_#____###_#___#_#_###_####_#####____#__###__####___#_#___###_####__###\n#_#_____#__##__#_#_#########__##_##_#___#_#_____#____#_##_###__###___#___#####______##___#\n#_##_#####__#_##_###_______#_##__#__##_##_###_#_#_####____#_#_##_#_#######_#___###_##__#_#\n#_#_____###____###___#####___###_#_##___#___#####_#__######_#_#__#____##_____#_#___#__##_#\n#_#_#_#__#####_#___####__#####___####_#####_______##_____#__#___####_##__##_####_###_###_#\n#_###_##_#___#_#_#_#__#_##__##_#__##___#_###############___####___#__#__##__#_#__#_____#_#\n#___####_#_#_###_####______##__##__###_#_#_#_______#___#_#____###___#######_#_#_##_#_###_#\n#_#____###_#_____##___##_###__####___#_#___#_#####___#___####_#_#####___#_#_#____#####___#\n#_##_#_____#_#_#_#__#__#_____##____#_____#___#_____#_#_#_#____________#_____#_##_______#_#\n##########################################################################################\n======== EXPECT\n##########################################################################################\n#.......#_____.....#.......#_...#____#____.......#__#_#___#___##_#_##___##______........##\n#######.##_###.###...#####.##.#.##_#___###.#####.##___#_#___#____#_#__#__##_####.######__#\n#...._#..###_..#_#####_##..#_.#..#_#####...#_....#__#_#_##_#####_#___###__#_##_#.#____##_#\n#.##.###..###.##_____#....###.##.####....####.#####_###__#____#____#__#####__#_#.#_####__#\n#.##.._##.....#__#####.####...#_....#.####__#.#___#_____##_##_#########___##___#.#__##__##\n#._##.##########.......#___.#######...##_#_##.#_#___#_#__###______##____#__#_###.##____###\n#.##_...#_##...#.########_#..#....#####__#....##########__#####_#____#####____##..#_#_##_#\n#..####...#..#...#____#_#_##.#.##...#___##.####_.......####...###_##___#_####__##.###__#_#\n##.#__###...######_##______#..._###.##_##..#__##.#####...##.#...###__###...#####_.._##___#\n#..##___#####_#____#######_######_..#_....###_##.#__####....###...####...#....##_#.#####_#\n#.####_##_#___#_####____####...###.###.####___#..##____######_###......######..#_#..#__#_#\n#.._##______#_#__##__#_##....#.....#_#..#_###...####_#_#_#__#...#########___##.#_##.##___#\n##.##__#_####_##__####__#.##########_##...##..###____#___#_##.#......##___#_#..#_##..#_###\n#_.#__##__##___##____##_#.....#__##___###....##_###_####___##.######.#__#_#_#.##__##.#___#\n##.#_####_#__######_##__#####.##____###_######___#__#____###..##.....__######.###__#.###_#\n#..#____#_#_##___#_____##___#.###_#_#....._____#___#######...##..#_#####...#.._###_#..##_#\n#.#####_#_####_#___#_#____###.#___#_#.###.####_#####..._#..###..####...#.#...###_####..###\n#.#_____#__##__#_#_#########..##_##_#.._#.#_____#....#.##.###..###...#...#####....._##...#\n#.##_#####__#_##_###.......#.##__#__##.##.###_#_#.####....#_#.##_#.#######_#...###.##__#.#\n#.#_____###____###...#####...###_#_##.._#...#####.#__######_#.#__#..._##___..#_#...#__##.#\n#.#_#_#__#####_#...####__#####___####.#####.......##_____#__#...####.##__##.####.###_###.#\n#.###_##_#...#_#.#_#__#_##__##_#__##_..#_###############...####...#..#__##_.#_#..#_____#.#\n#...####_#.#.###.####______##__##__###.#_#_#.......#...#.#....###...#######.#_#.##_#_###.#\n#_#....###.#.....##___##_###__####___#.#...#.#####...#...####.#_#####...#_#.#__..#####...#\n#_##_#.....#_#_#_#__#__#_____##____#__...#...#_____#_#_#_#___.........#.....#_##.......#_#\n##########################################################################################\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.hpp",
                "contents": "#include <iostream>\n#include <vector>\n\nstruct Pos{\n    int l;\n    int c;\n};\n\nbool procurar_saida(std::vector<std::string> &mat, Pos atual, Pos fim);\n\nnamespace lib {\n    void remover_erros(std::vector<std::string> &mat){\n        int nl = mat.size();\n        int nc = mat[0].size();\n        for(int l = 0; l < nl; l++)\n            for(int c = 0; c < nc; c++)\n                if(mat[l][c] == 'x')\n                    mat[l][c] = '_';\n    }\n\n    void rodar_testes(){\n        int nl = 0, nc = 0;\n        std::cin >> nl >> nc;\n        std::vector<std::string> mat(nl, \"\"); //come\u00e7a com nl strings \"\"\n        getchar();//remove \\n after nc\n        Pos inicio, fim;\n\n        //carregando matriz\n        for(int i = 0; i < nl; i++)\n            std::getline(std::cin, mat[i]);\n\n        //procurando inicio e fim e colocando ' ' nas posi\u00e7\u00f5es iniciais\n        for(int l = 0; l < nl; l++){\n            for(int c = 0; c < nc; c++){\n                if(mat[l][c] == 'I'){\n                    mat[l][c] = '_';\n                    inicio = Pos {l, c};\n                }\n                if(mat[l][c] == 'F'){\n                    mat[l][c] = '_';\n                    fim = Pos {l, c};\n                }\n            }\n        }\n        procurar_saida(mat, inicio, fim);\n        remover_erros(mat);\n        for(std::string line : mat)\n            std::cout << line << '\\n';\n    }\n}\n",
                "type": "show"
            },
            {
                "name": "solver.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include \"main.hpp\"\n\nusing namespace std;\n\n#define get(mat, pos) mat[pos.l][pos.c]\n\n//retorna um vetor com todos os vizinhos de pos\n//left, up, right, down\nvector<Pos> get_vizinhos(Pos p){\n    return {{p.l, p.c - 1}, {p.l - 1, p.c}, {p.l, p.c + 1}, {p.l + 1, p.c}};\n}\n\n//fun\u00e7\u00e3o recursiva que verifica se pos atual eh o fim\n//e retorna se o caminho \u00e9 valido para chegar no fim\nbool procurar_saida(vector<string> &mat, Pos atual, Pos fim){\n    if(atual.l == fim.l && atual.c == fim.c){\n        get(mat, atual) = '.';\n        return true;\n    }\n    if(get(mat, atual) != '_')\n        return false; //parede ou ja foi visitado\n    get(mat, atual) = '.';\n    for(Pos viz : get_vizinhos(atual)){\n        if(procurar_saida(mat, viz, fim)){\n            return true;\n        }\n    }\n    get(mat, atual) = 'x';\n    return false;\n}\n\nint main(){\n    lib::rodar_testes();\n    return 0;\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\ntype Pos struct {\n\tl, c int\n}\n\n// compara duas posi\u00e7\u00f5es\nfunc (p Pos) equals(other Pos) bool {\n\treturn p.l == other.l && p.c == other.c\n}\n\nfunc (p Pos) getNeighbors() []Pos {\n\treturn []Pos{\n\t\t{p.l, p.c - 1},\n\t\t{p.l - 1, p.c},\n\t\t{p.l, p.c + 1},\n\t\t{p.l + 1, p.c},\n\t}\n}\n\n// Fun\u00e7\u00e3o recursiva que tenta encontrar o caminho do in\u00edcio ao fim\nfunc procurarSaida(mat [][]rune, atual, fim Pos) bool {\n\t_, _, _ = mat, atual, fim\n\t// se posi\u00e7\u00e3o n\u00e3o existir ou n\u00e3o for caminho retorne falso\n\t// se posi\u00e7\u00e3o for o fim retorne verdadeiro\n\t// marca a posi\u00e7\u00e3o atual como possivel caminho usando .\n\t// para cada vizinho, chama a fun\u00e7\u00e3o recursivamente\n\t// se algum dos meus vizinho for caminho, eu sou caminho\n\t// se nenhum vizinho for caminho, eu sou erro\n\t// marca a posi\u00e7\u00e3o atual como erro usando x\n\t// retorna falso\n\treturn false\n\n}\n\nfunc removerErros(mat [][]rune) {\n\tfor l := range mat {\n\t\tfor c := range mat[0] {\n\t\t\tif mat[l][c] == 'x' {\n\t\t\t\tmat[l][c] = '_'\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tscanner.Scan()\n\tnl_nc := scanner.Text()\n\tvar nl, nc int\n\tfmt.Sscanf(nl_nc, \"%d %d\", &nl, &nc)\n\tmat := make([][]rune, nl)\n\n\t// L\u00ea a matriz\n\tfor i := range nl {\n\t\tscanner.Scan()\n\t\tmat[i] = []rune(scanner.Text())\n\t}\n\n\t// Procura posi\u00e7\u00f5es de in\u00edcio e fim e conserta para _\n\tinicio, fim := procurarPosicoes(mat)\n\tprocurarSaida(mat, inicio, fim)\n\tremoverErros(mat)\n\n\t// Imprime o labirinto final\n\tfor _, line := range mat {\n\t\tfmt.Println(string(line))\n\t}\n}\n\n// procura as posi\u00e7\u00f5es de in\u00edcio e fim do labirinto\n// depois, as substitui por '_'\nfunc procurarPosicoes(mat [][]rune) (Pos, Pos) {\n\tnl := len(mat)\n\tnc := len(mat[0])\n\tinicio := Pos{}\n\tfim := Pos{}\n\tfor l := range nl {\n\t\tfor c := range nc {\n\t\t\tswitch mat[l][c] {\n\t\t\tcase 'I':\n\t\t\t\tmat[l][c] = '_'\n\t\t\t\tinicio = Pos{l, c}\n\t\t\tcase 'F':\n\t\t\t\tmat[l][c] = '_'\n\t\t\t\tfim = Pos{l, c}\n\t\t\t}\n\t\t}\n\t}\n\treturn inicio, fim\n}\n",
                "type": "show"
            }
        ]
    }
}
