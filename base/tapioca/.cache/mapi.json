{
    "title": "@tapioca: Tapioca Sort",
    "description": "# Tapioca Sort\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Tests](#tests)\n-- | -- | --\n<!-- toch -->\n\n## Intro\n\nPreparar a pilha perfeita de tapiocas \u00e9 uma tarefa complicada, pois todas as tapiocas em qualquer pilha t\u00eam di\u00e2metros diferentes. Para manter a pilha organizada, voc\u00ea pode ordenar as tapiocas por tamanho de forma que cada tapioca seja menor do que todas as tapiocas abaixo dela. O tamanho de uma tapioca \u00e9 determinado pelo seu di\u00e2metro.\n\nA ordena\u00e7\u00e3o de uma pilha \u00e9 feita por uma sequ\u00eancia de viradas de tapiocas. Uma virada consiste em inserir uma esp\u00e1tula entre duas tapiocas em uma pilha e virar (inverter) todas as tapiocas acima da esp\u00e1tula, invertendo a subpilha.\n\nUma virada \u00e9 especificada pela posi\u00e7\u00e3o da tapioca na parte inferior da subpilha a ser virada em rela\u00e7\u00e3o a toda a pilha. A tapioca de baixo tem a posi\u00e7\u00e3o 1, enquanto a tapioca de cima em uma pilha de `n` tapiocas tem posi\u00e7\u00e3o `n`.\n\nUma pilha \u00e9 especificada dando o di\u00e2metro de cada tapioca na ordem em que aparecem na pilha. Por exemplo, considere a seguinte pilha de tapiocas, onde a tapioca com di\u00e2metro 5 est\u00e1 no topo:\n\n```txt\ntopo -> 5 1 2 3 4 |\n```\n\nFazendo a opera\u00e7\u00e3o `virada 1` (a esp\u00e1tula est\u00e1 representada por |), obtemos a seguinte pilha de tapiocas:\n\n```txt\ntopo -> 4 3 2 1 | 5\n```\n\nFazendo a opera\u00e7\u00e3o `virada 2`, obtemos a seguinte pilha de tapiocas:\n\n```txt\ntopo -> 1 2 3 4 5\n```\n\nObserve que a pilha de tapiocas pode ser ordenada utilizando duas opera\u00e7\u00f5es de virada.\n\n## Draft\n\n- Voc\u00ea deve implementar a fun\u00e7\u00e3o `tapiocaSort` e suas auxiliares no arquivo `main.cpp`.\n\n<!-- links .cache/draft -->\n- cpp\n  - [main.cpp](https://github.com/qxcodeed/arcade/blob/master/base/tapioca/.cache/draft/cpp/main.cpp)\n<!-- links -->\n\n## Tests\n\n### Entrada\n\n- A primeira linha cont\u00e9m um inteiro N representando o n\u00famero de tapiocas.\n- A segunda linha cont\u00e9m N inteiros positivos representando os di\u00e2metros das tapiocas na pilha. Cada tapioca ter\u00e1 um di\u00e2metro entre 1 e 30.\n\n### Sa\u00edda\n\n- Seu programa deve imprimir uma sequ\u00eancia de viradas que resulte na pilha de tapiocas ordenada de maneira que a maior tapioca esteja na parte inferior e a menor tapioca na parte superior. A sequ\u00eancia de viradas deve terminar com 0, indicando que n\u00e3o s\u00e3o mais necess\u00e1rias viradas.\n\n```txt\n>>>>>>>>\n5\n5 1 2 3 4\n========\n1 2 0\n<<<<<<<<\n```\n\n```txt\n>>>>>>>>\n5\n5 4 3 2 1\n========\n1 0\n<<<<<<<<\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n5\n5 1 2 3 4\n======== EXPECT\n1 2 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n5 4 3 2 1\n======== EXPECT\n1 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n1 2 3 4 5\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n5 1 2 3 4 \n======== EXPECT\n1 2 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n8\n7 1 6 5 3 4 8 2\n======== EXPECT\n2 1 7 2 5 3 6 5 6 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n6\n5 3 6 2 1 4\n======== EXPECT\n4 1 3 2 5 3 5 0\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <vector>\n\n//Realiza as viradas na pilha de tapiocas\nvoid flip(std::vector<int>& tapiocas, int i) {\n    (void) tapiocas;\n    (void) i;\n}\n\n//Retorna o indice do maior elemento da sequ\u00eancia\nint findMax(std::vector<int>& tapiocas, int n) {\n    (void) tapiocas;\n    (void) n;\n    return 0;\n}\n\nstd::vector<int> tapiocaSort(std::vector<int>& tapiocas, int n) {\n    (void) tapiocas;\n    (void) n;\n    return std::vector<int> {};\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<int> tapiocas(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> tapiocas[i];\n    }\n    std::vector<int> viradas = tapiocaSort(tapiocas, n);\n\n    for (int i = 0; i < (int) viradas.size(); i++){\n        if(i != 0) {\n            std:: cout << \" \";\n        }\n        std::cout << viradas[i];\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
