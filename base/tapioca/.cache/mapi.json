{
    "title": "@tapioca: Tapioca Sort",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@tapioca: Tapioca Sort</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"tapioca-sort\">Tapioca Sort</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr class=\"header\">\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<h2 id=\"intro\">Intro</h2>\n<p>Preparar a pilha perfeita de tapiocas \u00e9 uma tarefa complicada, pois\ntodas as tapiocas em qualquer pilha t\u00eam di\u00e2metros diferentes. Para\nmanter a pilha organizada, voc\u00ea pode ordenar as tapiocas por tamanho de\nforma que cada tapioca seja menor do que todas as tapiocas abaixo dela.\nO tamanho de uma tapioca \u00e9 determinado pelo seu di\u00e2metro.</p>\n<p>A ordena\u00e7\u00e3o de uma pilha \u00e9 feita por uma sequ\u00eancia de viradas de\ntapiocas. Uma virada consiste em inserir uma esp\u00e1tula entre duas\ntapiocas em uma pilha e virar (inverter) todas as tapiocas acima da\nesp\u00e1tula, invertendo a subpilha.</p>\n<p>Uma virada \u00e9 especificada pela posi\u00e7\u00e3o da tapioca na parte inferior\nda subpilha a ser virada em rela\u00e7\u00e3o a toda a pilha. A tapioca de baixo\ntem a posi\u00e7\u00e3o 1, enquanto a tapioca de cima em uma pilha de\n<code>n</code> tapiocas tem posi\u00e7\u00e3o <code>n</code>.</p>\n<p>Uma pilha \u00e9 especificada dando o di\u00e2metro de cada tapioca na ordem em\nque aparecem na pilha. Por exemplo, considere a seguinte pilha de\ntapiocas, onde a tapioca com di\u00e2metro 5 est\u00e1 no topo:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>topo -&gt; 5 1 2 3 4 |</span></code></pre></div>\n<p>Fazendo a opera\u00e7\u00e3o <code>virada 1</code> (a esp\u00e1tula est\u00e1\nrepresentada por |), obtemos a seguinte pilha de tapiocas:</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>topo -&gt; 4 3 2 1 | 5</span></code></pre></div>\n<p>Fazendo a opera\u00e7\u00e3o <code>virada 2</code>, obtemos a seguinte pilha de\ntapiocas:</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>topo -&gt; 1 2 3 4 5</span></code></pre></div>\n<p>Observe que a pilha de tapiocas pode ser ordenada utilizando duas\nopera\u00e7\u00f5es de virada.</p>\n<h2 id=\"draft\">Draft</h2>\n<ul>\n<li>Voc\u00ea deve implementar a fun\u00e7\u00e3o <code>tapiocaSort</code> e suas\nauxiliares no arquivo <code>main.cpp</code>.</li>\n</ul>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/tapioca/.cache/draft/cpp/main.cpp\">main.cpp</a>\n<!-- links --></li>\n</ul></li>\n</ul>\n<h2 id=\"tests\">Tests</h2>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A primeira linha cont\u00e9m um inteiro N representando o n\u00famero de\ntapiocas.</li>\n<li>A segunda linha cont\u00e9m N inteiros positivos representando os\ndi\u00e2metros das tapiocas na pilha. Cada tapioca ter\u00e1 um di\u00e2metro entre 1 e\n30.</li>\n</ul>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<ul>\n<li>Seu programa deve imprimir uma sequ\u00eancia de viradas que resulte na\npilha de tapiocas ordenada de maneira que a maior tapioca esteja na\nparte inferior e a menor tapioca na parte superior. A sequ\u00eancia de\nviradas deve terminar com 0, indicando que n\u00e3o s\u00e3o mais necess\u00e1rias\nviradas.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb4\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>5</span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>5 1 2 3 4</span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>1 2 0</span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb5\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>5</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>5 4 3 2 1</span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>1 0</span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n5\n5 1 2 3 4\n======== EXPECT\n1 2 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n5 4 3 2 1\n======== EXPECT\n1 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n1 2 3 4 5\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n5 1 2 3 4 \n======== EXPECT\n1 2 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n8\n7 1 6 5 3 4 8 2\n======== EXPECT\n2 1 7 2 5 3 6 5 6 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n6\n5 3 6 2 1 4\n======== EXPECT\n4 1 3 2 5 3 5 0\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <vector>\n\n//Realiza as viradas na pilha de tapiocas\nvoid flip(std::vector<int>& tapiocas, int i) {\n    (void) tapiocas;\n    (void) i;\n}\n\n//Retorna o indice do maior elemento da sequ\u00eancia\nint findMax(std::vector<int>& tapiocas, int n) {\n    (void) tapiocas;\n    (void) n;\n    return 0;\n}\n\nstd::vector<int> tapiocaSort(std::vector<int>& tapiocas, int n) {\n    (void) tapiocas;\n    (void) n;\n    return std::vector<int> {};\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<int> tapiocas(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> tapiocas[i];\n    }\n    std::vector<int> viradas = tapiocaSort(tapiocas, n);\n\n    for (int i = 0; i < (int) viradas.size(); i++){\n        if(i != 0) {\n            std:: cout << \" \";\n        }\n        std::cout << viradas[i];\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n",
                "encoding": 0
            }
        ]
    }
}
