{
    "title": "@tapioca: Tapioca Sort",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@tapioca: Tapioca Sort</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Tapioca Sort</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<h2>Intro</h2>\n<p>Preparar a pilha perfeita de tapiocas \u00e9 uma tarefa complicada, pois todas as tapiocas em qualquer pilha t\u00eam di\u00e2metros diferentes. Para manter a pilha organizada, voc\u00ea pode ordenar as tapiocas por tamanho de forma que cada tapioca seja menor do que todas as tapiocas abaixo dela. O tamanho de uma tapioca \u00e9 determinado pelo seu di\u00e2metro.</p>\n<p>A ordena\u00e7\u00e3o de uma pilha \u00e9 feita por uma sequ\u00eancia de viradas de tapiocas. Uma virada consiste em inserir uma esp\u00e1tula entre duas tapiocas em uma pilha e virar (inverter) todas as tapiocas acima da esp\u00e1tula, invertendo a subpilha.</p>\n<p>Uma virada \u00e9 especificada pela posi\u00e7\u00e3o da tapioca na parte inferior da subpilha a ser virada em rela\u00e7\u00e3o a toda a pilha. A tapioca de baixo tem a posi\u00e7\u00e3o 1, enquanto a tapioca de cima em uma pilha de <code>n</code> tapiocas tem posi\u00e7\u00e3o <code>n</code>.</p>\n<p>Uma pilha \u00e9 especificada dando o di\u00e2metro de cada tapioca na ordem em que aparecem na pilha. Por exemplo, considere a seguinte pilha de tapiocas, onde a tapioca com di\u00e2metro 5 est\u00e1 no topo:</p>\n<div class=\"language-text highlight\"><pre><span></span><code>topo -&gt; 5 1 2 3 4 |\n</code></pre></div>\n<p>Fazendo a opera\u00e7\u00e3o <code>virada 1</code> (a esp\u00e1tula est\u00e1 representada por |), obtemos a seguinte pilha de tapiocas:</p>\n<div class=\"language-text highlight\"><pre><span></span><code>topo -&gt; 4 3 2 1 | 5\n</code></pre></div>\n<p>Fazendo a opera\u00e7\u00e3o <code>virada 2</code>, obtemos a seguinte pilha de tapiocas:</p>\n<div class=\"language-text highlight\"><pre><span></span><code>topo -&gt; 1 2 3 4 5\n</code></pre></div>\n<p>Observe que a pilha de tapiocas pode ser ordenada utilizando duas opera\u00e7\u00f5es de virada.</p>\n<h2>Draft</h2>\n<ul>\n<li>Voc\u00ea deve implementar a fun\u00e7\u00e3o <code>tapiocaSort</code> e suas auxiliares no arquivo <code>main.cpp</code>.</li>\n</ul>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/tapioca/.cache/draft/cpp/main.cpp\">main.cpp</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Tests</h2>\n<h3>Entrada</h3>\n<ul>\n<li>A primeira linha cont\u00e9m um inteiro N representando o n\u00famero de tapiocas.</li>\n<li>A segunda linha cont\u00e9m N inteiros positivos representando os di\u00e2metros das tapiocas na pilha. Cada tapioca ter\u00e1 um di\u00e2metro entre 1 e 30.</li>\n</ul>\n<h3>Sa\u00edda</h3>\n<ul>\n<li>Seu programa deve imprimir uma sequ\u00eancia de viradas que resulte na pilha de tapiocas ordenada de maneira que a maior tapioca esteja na parte inferior e a menor tapioca na parte superior. A sequ\u00eancia de viradas deve terminar com 0, indicando que n\u00e3o s\u00e3o mais necess\u00e1rias viradas.</li>\n</ul>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n5\n5 1 2 3 4\n========\n1 2 0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre></div>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n5\n5 4 3 2 1\n========\n1 0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n5\n5 1 2 3 4\n======== EXPECT\n1 2 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n5 4 3 2 1\n======== EXPECT\n1 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n1 2 3 4 5\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n5 1 2 3 4 \n======== EXPECT\n1 2 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n8\n7 1 6 5 3 4 8 2\n======== EXPECT\n2 1 7 2 5 3 6 5 6 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n6\n5 3 6 2 1 4\n======== EXPECT\n4 1 3 2 5 3 5 0\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <vector>\n\n//Realiza as viradas na pilha de tapiocas\nvoid flip(std::vector<int>& tapiocas, int i) {\n    (void) tapiocas;\n    (void) i;\n}\n\n//Retorna o indice do maior elemento da sequ\u00eancia\nint findMax(std::vector<int>& tapiocas, int n) {\n    (void) tapiocas;\n    (void) n;\n    return 0;\n}\n\nstd::vector<int> tapiocaSort(std::vector<int>& tapiocas, int n) {\n    (void) tapiocas;\n    (void) n;\n    return std::vector<int> {};\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<int> tapiocas(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> tapiocas[i];\n    }\n    std::vector<int> viradas = tapiocaSort(tapiocas, n);\n\n    for (int i = 0; i < (int) viradas.size(); i++){\n        if(i != 0) {\n            std:: cout << \" \";\n        }\n        std::cout << viradas[i];\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
