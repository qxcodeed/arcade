{
    "title": "@tapioca: Tapioca Sort",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@tapioca: Tapioca Sort</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@tapioca: Tapioca Sort</h1>\n            <h1 id=\"tapioca-sort\">Tapioca Sort</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<h2 id=\"intro\">Intro</h2>\n<p>Preparar a pilha perfeita de tapiocas \u00e9 uma tarefa complicada, pois todas as tapiocas em qualquer pilha t\u00eam di\u00e2metros diferentes. Para manter a pilha organizada, voc\u00ea pode ordenar as tapiocas por tamanho de forma que cada tapioca seja menor do que todas as tapiocas abaixo dela. O tamanho de uma tapioca \u00e9 determinado pelo seu di\u00e2metro.</p>\n<p>A ordena\u00e7\u00e3o de uma pilha \u00e9 feita por uma sequ\u00eancia de viradas de tapiocas. Uma virada consiste em inserir uma esp\u00e1tula entre duas tapiocas em uma pilha e virar (inverter) todas as tapiocas acima da esp\u00e1tula, invertendo a subpilha.</p>\n<p>Uma virada \u00e9 especificada pela posi\u00e7\u00e3o da tapioca na parte inferior da subpilha a ser virada em rela\u00e7\u00e3o a toda a pilha. A tapioca de baixo tem a posi\u00e7\u00e3o 1, enquanto a tapioca de cima em uma pilha de <code>n</code> tapiocas tem posi\u00e7\u00e3o <code>n</code>.</p>\n<p>Uma pilha \u00e9 especificada dando o di\u00e2metro de cada tapioca na ordem em que aparecem na pilha. Por exemplo, considere a seguinte pilha de tapiocas, onde a tapioca com di\u00e2metro 5 est\u00e1 no topo:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">topo</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">|</span>\n</code></pre></div>\n\n<p>Fazendo a opera\u00e7\u00e3o <code>virada 1</code> (a esp\u00e1tula est\u00e1 representada por |), obtemos a seguinte pilha de tapiocas:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">topo</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n</code></pre></div>\n\n<p>Fazendo a opera\u00e7\u00e3o <code>virada 2</code>, obtemos a seguinte pilha de tapiocas:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">topo</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n</code></pre></div>\n\n<p>Observe que a pilha de tapiocas pode ser ordenada utilizando duas opera\u00e7\u00f5es de virada.</p>\n<h2 id=\"draft\">Draft</h2>\n<ul>\n<li>Voc\u00ea deve implementar a fun\u00e7\u00e3o <code>tapiocaSort</code> e suas auxiliares no arquivo <code>main.cpp</code>.</li>\n</ul>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp</li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/tapioca/.cache/draft/cpp/main.cpp\">main.cpp</a></li>\n</ul>\n<!-- links -->\n\n<h2 id=\"tests\">Tests</h2>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A primeira linha cont\u00e9m um inteiro N representando o n\u00famero de tapiocas.</li>\n<li>A segunda linha cont\u00e9m N inteiros positivos representando os di\u00e2metros das tapiocas na pilha. Cada tapioca ter\u00e1 um di\u00e2metro entre 1 e 30.</li>\n</ul>\n<h3 id=\"saida\">Sa\u00edda</h3>\n<ul>\n<li>Seu programa deve imprimir uma sequ\u00eancia de viradas que resulte na pilha de tapiocas ordenada de maneira que a maior tapioca esteja na parte inferior e a menor tapioca na parte superior. A sequ\u00eancia de viradas deve terminar com 0, indicando que n\u00e3o s\u00e3o mais necess\u00e1rias viradas.</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n5\n5 1 2 3 4\n========\n1 2 0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre></div>\n\n<div class=\"codehilite\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n5\n5 4 3 2 1\n========\n1 0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre></div>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n5\n5 1 2 3 4\n======== EXPECT\n1 2 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n5 4 3 2 1\n======== EXPECT\n1 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n1 2 3 4 5\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n5 1 2 3 4 \n======== EXPECT\n1 2 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n8\n7 1 6 5 3 4 8 2\n======== EXPECT\n2 1 7 2 5 3 6 5 6 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n6\n5 3 6 2 1 4\n======== EXPECT\n4 1 3 2 5 3 5 0\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <vector>\n\n//Realiza as viradas na pilha de tapiocas\nvoid flip(std::vector<int>& tapiocas, int i) {\n    //DEL!\n    int temp;\n    for (int start = 0; start <= i; start++, i--) {\n        temp = tapiocas[start];\n        tapiocas[start] = tapiocas[i];\n        tapiocas[i] = temp;\n    }\n    //ACT!\n    // (void) tapiocas;\n    // (void) i;\n}\n\n//Retorna o indice do maior elemento da sequ\u00eancia\nint findMax(std::vector<int>& tapiocas, int n) {\n    //DEL!\n    int max = 0;\n    for (int i = 0; i < n; i++) {\n        if (tapiocas[i] > tapiocas[max]) {\n            max = i;\n        }\n    }\n    return max;\n    //ACT!\n    // (void) tapiocas;\n    // (void) n;\n    // return 0;\n}\n\nstd::vector<int> tapiocaSort(std::vector<int>& tapiocas, int n) {\n    //DEL!\n    std::vector<int> viradas;\n\n    int tamanho = tapiocas.size();\n    \n    while(tamanho > 1){\n        int max =  findMax(tapiocas, tamanho);\n        if (max == tamanho-1) {\n            tamanho--;\n        }\n        else if (max == 0){\n            flip(tapiocas, n - (n - tamanho + 1));\n            viradas.push_back(n - tamanho + 1);\n            tamanho--;\n        }\n        else{\n            flip(tapiocas, max);\n            viradas.push_back(n - max);\n        }\n    }\n\n    viradas.push_back(0);\n    return viradas;\n    //ACT!\n    // (void) tapiocas;\n    // (void) n;\n    // return std::vector<int> {};\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<int> tapiocas(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> tapiocas[i];\n    }\n    std::vector<int> viradas = tapiocaSort(tapiocas, n);\n\n    for (int i = 0; i < (int) viradas.size(); i++){\n        if(i != 0) {\n            std:: cout << \" \";\n        }\n        std::cout << viradas[i];\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n",
                "encoding": 0
            }
        ]
    }
}
