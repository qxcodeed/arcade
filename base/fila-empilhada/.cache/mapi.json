{
    "title": "@fila-empilhada: Utilizando Pilhas para a Cria\u00e7\u00e3o de uma Fila CPP",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@fila-empilhada: Utilizando Pilhas para a Cria\u00e7\u00e3o de uma Fila CPP</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@fila-empilhada: Utilizando Pilhas para a Cria\u00e7\u00e3o de uma Fila CPP</h1>\n            <h1 id=\"utilizando-pilhas-para-a-criacao-de-uma-fila-cpp\">Utilizando Pilhas para a Cria\u00e7\u00e3o de uma Fila CPP</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#test\">Test</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<h2 id=\"intro\">Intro</h2>\n<p>Neste exerc\u00edcio, voc\u00ea implementar\u00e1 uma fila usando <strong>duas pilhas</strong>. Embora n\u00e3o seja a forma mais eficiente de implementar uma fila, esta abordagem \u00e9 \u00fatil para entender a l\u00f3gica de manipula\u00e7\u00e3o de pilhas e filas.</p>\n<h3 id=\"estrutura\">Estrutura</h3>\n<p>A classe <code>StackedQueue</code> j\u00e1 est\u00e1 definida no arquivo <code>lib.cpp</code>, contendo os seguintes m\u00e9todos:</p>\n<ul>\n<li>~~<code>StackedQueue()</code>~~</li>\n<li><code>void push(int info)</code></li>\n<li><code>void pop()</code></li>\n<li><code>int peek()</code></li>\n<li><code>void clear()</code></li>\n<li>~~<code>bool empty()</code>~~</li>\n<li>~~<code>void print()</code>~~</li>\n</ul>\n<p>Os m\u00e9todos riscados j\u00e1 est\u00e3o implementados; voc\u00ea dever\u00e1 implementar os demais m\u00e9todos, conforme descrito nos coment\u00e1rios do arquivo <code>lib.cpp</code>.</p>\n<h3 id=\"funcionamento-dos-metodos\">Funcionamento dos M\u00e9todos</h3>\n<ul>\n<li>A fila ser\u00e1 implementada usando duas pilhas: <code>stack</code> e <code>aux</code>.</li>\n<li><code>stack</code> armazena os elementos inseridos.</li>\n<li><code>aux</code> \u00e9 usada para acessar o elemento no in\u00edcio da fila em opera\u00e7\u00f5es <code>peek</code> e <code>pop</code>.</li>\n</ul>\n<h3 id=\"observacoes\">Observa\u00e7\u00f5es</h3>\n<ul>\n<li><strong>OBS. 1</strong>: N\u00e3o altere os m\u00e9todos j\u00e1 implementados.</li>\n<li><strong>OBS. 2</strong>: N\u00e3o \u00e9 necess\u00e1rio escrever a fun\u00e7\u00e3o <code>main()</code>, pois ela j\u00e1 est\u00e1 implementada no ambiente de avalia\u00e7\u00e3o.</li>\n</ul>\n<h2 id=\"draft\">Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp</li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/fila-empilhada/.cache/draft/cpp/lib.cpp\">lib.cpp</a></li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/fila-empilhada/.cache/draft/cpp/main.cpp\">main.cpp</a></li>\n</ul>\n<!-- links -->\n\n<h2 id=\"test\">Test</h2>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A entrada consistir\u00e1 em uma sequ\u00eancia de opera\u00e7\u00f5es de inser\u00e7\u00e3o (<code>push</code>), remo\u00e7\u00e3o (<code>pop</code>), consulta (<code>peek</code>) e limpeza (<code>clear</code>).</li>\n</ul>\n<h3 id=\"saida\">Sa\u00edda</h3>\n<ul>\n<li>O programa deve exibir o estado da fila conforme as opera\u00e7\u00f5es realizadas, conforme descrito nos casos de teste.</li>\n</ul>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste tudo\ntest_all\n======== EXPECT\nTESTE todos (push, pop, peek)\npush 1\nFila: [1]\npush 2\nFila: [1, 2]\npush 3\nFila: [1, 2, 3]\npop\nFila: [2, 3]\npop\nFila: [3]\npush 4\nFila: [3, 4]\npush 5\nFila: [3, 4, 5]\npop\nFila: [4, 5]\npop\nFila: [5]\npush 6\nFila: [5, 6]\npush 7\nFila: [5, 6, 7]\npush 8\nFila: [5, 6, 7, 8]\npush 9\nFila: [5, 6, 7, 8, 9]\npop\nFila: [6, 7, 8, 9]\npush 10\nFila: [6, 7, 8, 9, 10]\npop\nFila: [7, 8, 9, 10]\npush 11\nFila: [7, 8, 9, 10, 11]\npop\nFila: [8, 9, 10, 11]\npush 12\nFila: [8, 9, 10, 11, 12]\npop\nFila: [9, 10, 11, 12]\npop\nFila: [10, 11, 12]\npop\nFila: [11, 12]\nclear\nLista: []\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "lib.cpp",
                "contents": "#include <iostream>\n#include <queue>\n#include <stack>\n\n// Stacked ou Fila empilhada\n// Altere somente os campos marcados com TODO\nstruct StackedQueue {\n    std::stack<int> stack;     // Pilha para salvar elementos\n\n    StackedQueue(){}\n\n    // Adiciona um elemento no topo da fila\n    // info: informacao do elemento a ser inserido\n    void push(int info) {\n        // TODO: complexidade O(1)\n        // Utilize somente a pilha 'stack'\n        (void) info;\n    }\n\n\n    // Remove um elemento do topo da fila.\n    // Nao faz nada caso a fila esteja vazia.\n    void pop() {\n        if(stack.empty()) {\n            return;\n        }\n        std::stack<int> aux; // Pilha auxiliar para acessar o elemento do 'fundo' da pilha\n        // TODO: complexidade O(n)\n        // Utilize a pilha 'stack' e a pilha 'aux'\n    }\n\n\n    // Retorna a informacao do elemento na frente da fila.\n    // Retorna -1, caso a fila esteja vazia.\n    int peek() {\n        if(stack.empty()) { // caso base fila vazia\n            return -1;\n        }\n        std::stack<int> aux; // Pilha auxiliar para acessar o elemento do 'fundo' da pilha\n        // TODO: complexidade O(n)\n        // Utilize a pilha 'stack' e a pilha 'aux'\n        return -1;\n    }\n\n\n    // Remove todos os elementos da fila\n    void clear() {\n        // TODO: complexidade O(n)\n    }\n\n\n    // Devolve true se cheia e false caso contrario\n    bool empty() {\n        return stack.empty();\n    }\n\n    // Printa as informacoes da lista\n    void print() {\n        std::queue<int> q;\n\n        while(!empty()) {\n            q.push(peek());\n            pop();\n        }\n\n        std::cout << \"[\";\n        while(!q.empty()) {\n            std::cout << q.front();\n            push(q.front());\n            q.pop();\n            if(!q.empty()) {\n                std::cout << \", \";\n            }\n        }\n        std::cout << \"]\" << std::endl;\n    }    \n};\n",
                "encoding": 0
            },
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <map>\n#include \"lib.cpp\"\n\nusing std::cout;\nusing std::endl;\n\nbool LOG_ALLOCATED = false;\nstd::map<void*, int> allocated_nodes_status = {};\nstd::map<int, int> mapa = {};\nconst int ALLOCATED = 1;\nconst int DELETED = 2;\n\ntemplate <typename K, typename V>\nvoid printMap(const std::map<K, V>& m) {\n    for (const auto& pair : m) {\n        std::cout << \"Key: \" << pair.first << \", Value: \" << pair.second << std::endl;\n    }\n}\n\n\n/////////////// TESTE ALL ///////////////\n\nvoid test_all() {\n    cout << \"TESTE todos (push, pop, peek)\" << endl;\n    StackedQueue queue;\n    int x = 1;\n    \n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    \n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    \n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n \n    cout << \"clear\" << endl; queue.clear();\n    cout << \"Lista: \"; queue.print();\n}\n\n/////////////// FIM TESTES ///////////////\n\nint main() {\n    std::string input;\n    std::cin >> input;\n\n    if(input == \"test_all\") test_all();\n}\n",
                "encoding": 0
            }
        ]
    }
}
