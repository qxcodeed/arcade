{
    "title": "@ordenada: Lista Sequencial Ordenada",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@ordenada: Lista Sequencial Ordenada</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@ordenada: Lista Sequencial Ordenada</h1>\n            <h1 id=\"lista-sequencial-ordenada\">Lista Sequencial Ordenada</h1>\n<p>Nesse exerc\u00edcio, implementaremos m\u00e9todos de uma estrutura ordenada.</p>\n<p>Uma lista ordenada \u00e9 uma estrutura similar \u00e0 lista sequencial comum. Por\u00e9m, ap\u00f3s cada opera\u00e7\u00e3o, os elementos s\u00e3o mantidos em uma ordem espec\u00edfica de acordo com os seus elementos vizinhos. Nesse exerc\u00edcio, utilizamos a ordem\u00a0n\u00e3o decrescente, onde A[i-1] &lt;= A[i] para todo i &gt; 0.</p>\n<p>No arquivo\u00a0<strong>lib.cpp</strong>, se encontra a classe\u00a0<strong>SequentialSortedListInt</strong>\u00a0que possui os seguintes m\u00e9todos m\u00e9todos com cabe\u00e7alho, mas sem implementa\u00e7\u00e3o:</p>\n<ul>\n<li>void insert(int item);</li>\n<li>bool countUnique();</li>\n</ul>\n<p>O m\u00e9todo insert deve inserir o novo elemento de tal forma que o vetor interno 'arrayList' permane\u00e7a ordenado ap\u00f3s a inser\u00e7\u00e3o.</p>\n<p>Ao implementar o m\u00e9todo countUnique(), voc\u00ea pode aproveitar o fato da lista estar ordenada para fazer um algoritmo eficiente de complexidade O(n).</p>\n<p>A funcionalidade de cada m\u00e9todo est\u00e1 descrita em coment\u00e1rios no pr\u00f3prio arquivo lib.cpp. Sua tarefa \u00e9 alterar o arquivo lib.cpp, implementando as funcionalidades faltantes citadas. Seu c\u00f3digo deve passar no \u00fanico caso de teste para ser considerado correto.</p>\n<p>OBS: N\u00e3o altere os m\u00e9todos j\u00e1 implementados.</p>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste\nteste\n======== EXPECT\n[]\n[10]\n[10,15]\n[5,10,15]\n[0,5,10,15]\n[0,5,10,15,25]\n[0,5,10,15,20,25]\n0\n25\n[]\n0\n[1]\n1\n[1,2]\n2\n[1,2,3]\n3\n[1,1,1,1,2,3]\n3\n[1,1,1,1,2,3,4]\n4\n[1,1,1,1,1,2,2,3,3,4,4,5]\n5\nSequentialSortedListInt deleted\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "lib.cpp",
                "contents": "#include <iostream>\n// Preencha os metodos faltantes.\n// Os passos estao marcados com \"TODO\".\n\nstruct SequentialSortedListInt {\n    int size;       // Numero de elementos na lista\n    int maxSize;    // Capacidade maxima da lista\n    int* arrayList; // Ponteiro para a lista de elementos na memoria \n\n    // Construtor\n    SequentialSortedListInt(int maxSize){\n        this->size = 0;\n        this->maxSize = maxSize;\n        this->arrayList = new int[maxSize];\n    }\n\n    // Destrutor\n    ~SequentialSortedListInt(){\n        delete arrayList;\n        std::cout << \"SequentialSortedListInt deleted\" << std::endl;\n    }\n\n    // Retorna o valor do elemento na posicao 'index'\n    int get(int index){\n        return arrayList[index];\n    }\n\n    // Se houver espaco na lista, insere o\n    // elemento 'item' na posicao correta, ou seja,\n    // o 'arrayList' deve permanecer ordenado (crescente)\n    // apos a insercao. \n    void insert(int item){\n        // TODO\n        //DEL!\n        if(size == maxSize){\n            return;   \n        }\n        \n        if(size == 0){\n            arrayList[0] = item;\n            size++;\n            return;\n        }\n        \n        int i = size-1;\n        while(i >= 0 && arrayList[i] > item){\n            arrayList[i+1] = arrayList[i];\n            i--;\n        }\n        arrayList[i+1] = item;\n        size++;\n\n        //ACT!\n        //(void) item;\n    }\n\n    // Retorna a quantidade de elementos unicos na lista.\n    // Exemplo: A lista [1,2,2,3,3,3] possui 3 unicos. \n    int countUnique(){\n        //TODO\n        //DEL!\n        int uniqueElement = 0;\n        for(int i = 0; i < size; i++){\n            if(arrayList[i] != arrayList[i+1]){\n                uniqueElement++;\n            }\n        }\n        return uniqueElement;\n\n        //ACT!\n        //return -1;\n    }\n\n    // Remove elementos da lista\n    void clear(){\n        size = 0;\n    }\n\n    // Printa elementos da lista\n    void print(){\n        std::cout << \"[\";\n        for(int i = 0; i < size; i++){\n            std::cout << arrayList[i];\n            if(i != size-1)\n                std::cout << \",\";\n        }\n        std::cout << \"]\" << std::endl;\n    }\n};\n",
                "encoding": 0
            },
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao\n#include <iostream>\n#include \"lib.cpp\"\nconst int MAXSIZE = 16;\n\nint main(){\n    SequentialSortedListInt list(MAXSIZE);\n\n    /* Testar insert */\n    list.print(); // []\n    list.insert(10);\n    list.print(); // [10]\n    list.insert(15);\n    list.print(); // [10,15]\n    list.insert(5);\n    list.print(); // [5,10,15]\n    list.insert(0);\n    list.print(); // [0,5,10,15]\n    list.insert(25);\n    list.print(); // [0,5,10,15,25]\n    list.insert(20);\n    list.print(); // [0,5,10,15,20,25]\n\n    /* Testar get */\n    std::cout << list.get(0) << std::endl; // 0\n    std::cout << list.get(5) << std::endl; // 25\n\n    /* Testar clear */\n    list.clear();\n    list.print(); // []\n    std::cout << list.countUnique() << std::endl; // 0\n\n    /* Testar countUnique */\n    list.insert(1);\n    list.print();\n    std::cout << list.countUnique() << std::endl; // 1\n    list.insert(2);\n    list.print();\n    std::cout << list.countUnique() << std::endl; // 2\n    list.insert(3);\n    list.print();\n    std::cout << list.countUnique() << std::endl; // 3\n    \n    list.insert(1);\n    list.insert(1);\n    list.insert(1);\n    list.print();\n    std::cout << list.countUnique() << std::endl; // 3\n\n    list.insert(4);\n    list.print();\n    std::cout << list.countUnique() << std::endl; // 4\n\n    list.insert(1);\n    list.insert(2);\n    list.insert(3);\n    list.insert(4);\n    list.insert(5);\n    list.print();\n    std::cout << list.countUnique() << std::endl; // 5\n\n    /* Destrutor chamado */\n    // SequentialListInt deleted\n}\n",
                "encoding": 0
            }
        ]
    }
}
