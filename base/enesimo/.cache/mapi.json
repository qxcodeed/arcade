{
    "title": "@enesimo: Gere o enesimo primo",
    "description": "# Gere o enesimo primo\n\n## Intro\n\nDado um n\u00famero inteiro `n`, gere o `n`-\u00e9simo n\u00famero primo apenas utilizando recurs\u00e3o.\n\nUtilize o c\u00f3digo eh_primo que voc\u00ea j\u00e1 implementou.\n\nO primeiro primo da lista \u00e9 o n\u00famero 2.\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [main.cpp](https://github.com/qxcodeed/arcade/blob/master/base/enesimo/.cache/draft/cpp/main.cpp)\n<!-- links -->\n\n## Teste\n\n```txt\n>>>>>>>>\n1\n========\n2\n<<<<<<<<\n\n>>>>>>>>\n2\n========\n3\n<<<<<<<<\n\n>>>>>>>>\n3\n========\n5\n<<<<<<<<\n\n>>>>>>>>\n4\n========\n7\n<<<<<<<<\n\n>>>>>>>>\n5\n========\n11\n<<<<<<<<\n\n>>>>>>>>\n6\n========\n13\n<<<<<<<<\n\n>>>>>>>>\n7\n========\n17\n<<<<<<<<\n\n>>>>>>>>\n8\n========\n19\n<<<<<<<<\n\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n1\n======== EXPECT\n2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n2\n======== EXPECT\n3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n3\n======== EXPECT\n5\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n4\n======== EXPECT\n7\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n======== EXPECT\n11\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n6\n======== EXPECT\n13\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n7\n======== EXPECT\n17\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n8\n======== EXPECT\n19\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n// x: n\u00famero que est\u00e1 sendo testado\n// div: divisor que est\u00e1 sendo testado\nbool eh_primo(int x, int div = 2) {\n    (void) x;\n    (void) div;\n    return false;\n}\n\n// n: n-\u00e9simo n\u00famero primo\n// cont: contador de quantos n\u00fameros primos j\u00e1 foram encontrados\n// i: n\u00famero que est\u00e1 sendo testado\nint n_esimo(int n, int cont = 0, int i = 2) {\n    (void) n;\n    (void) cont;\n    (void) i;\n    return 0;\n}\n\nint main() {\n    int n {};\n    std::cin >> n;\n    std::cout << n_esimo(n) << '\\n';\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
