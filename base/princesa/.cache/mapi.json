{
    "title": "@princesa: Princesa v1",
    "description": "# Princesa v1\n\n[![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/princesa/cover.jpg)](https://www.youtube.com/watch?v=uCsD3ZGzMgE)\n\n[](solver.cpp)\nUm problema bem interessante e antigo da matem\u00e1tica \u00e9 conhecido como Josephus Problem. No link da imagem voc\u00ea pode, por curiosidades aprender bastantes sobre ele e o modelo matem\u00e1tico que se prop\u00f5e a model\u00e1-lo.\n\nNosso objetivo aqui ser\u00e1 apenas implementar seu funcionamento.\n\n___\n\nNo problema, **N** pessoas se colocam numa fila circular e assumem valores de 1 at\u00e9 **N**. Um n\u00famero **E** \u00e9 escolhido para iniciar o jogo. **E** pega a espada, mata o elemento \u00e0 sua frente e passa a espada uma posi\u00e7\u00e3o \u00e0 frente. O jogo continua at\u00e9 que um \u00fanico elemento permane\u00e7a vivo.\n\n___\n\n- Entrada:\n  - Os valores de **N** e **E** na primeira linha.\n- Sa\u00edda:\n  - Etapa a etapa, os elementos que est\u00e3o vivos na fila circular, indicando com um > quem est\u00e1 com a espada.\n\n___\n\n## Implementa\u00e7\u00e3o usando vetor\n\n### Abordagem I - Custo O(N * LogN)\n\n- marcando os elementos que morrem.\n  - toda vez que algu\u00e9m morrer, marque 0 no vetor\n  - procure pelo pr\u00f3ximo elemento vivo a direita\n\n```c\nint elementos[size];\n//matar equivale a fazer\nvivos[pos] = false;\n//o pr\u00f3ximo vivo seria uma busca pelo pr\u00f3ximo vivo depois de pos\nint prox = procurar_vivo(elementos, size, pos);\n```\n\n### Abordagem II - Custo O(N^2)\n\n- retirando os elementos que morrem e diminuindo o tamanho do vetor.\n  - reposicione os elementos \"puxando\" todos os que estiverem \u00e0 frente\n\n```c\n//fa\u00e7a a funcao matar que remove o elemento do vetor\n//perceba que TUDO ap\u00f3s pos, vai diminuir em 1\nint elementos[size];\nmatar(elementos, size, pos);\nsize -= 1;\npos = pos % size; //se ele era o \u00faltimo agora \u00e9 o zero\n```\n\n### Compara\u00e7\u00e3o\n\n- Qual dos algoritmos voc\u00ea acha que \u00e9 mais eficiente?\n- Implemente os dois e v\u00e1 aumentando a inst\u00e2ncia do problema e veja o resultado.\n\n```txt\n>>>>>>>> 01\n3 1\n========\n[ 1> 2 3 ]\n[ 1 3> ]\n[ 3> ]\n<<<<<<<<\n\n>>>>>>>> 02\n3 2\n========\n[ 1 2> 3 ]\n[ 1> 2 ]\n[ 1> ]\n<<<<<<<<\n\n>>>>>>>> 03\n3 3\n========\n[ 1 2 3> ]\n[ 2> 3 ]\n[ 2> ]\n<<<<<<<<\n\n>>>>>>>> 04\n6 3\n========\n[ 1 2 3> 4 5 6 ]\n[ 1 2 3 5> 6 ]\n[ 1> 2 3 5 ]\n[ 1 3> 5 ]\n[ 1> 3 ]\n[ 1> ]\n<<<<<<<<\n\n>>>>>>>> 05\n9 9\n========\n[ 1 2 3 4 5 6 7 8 9> ]\n[ 2> 3 4 5 6 7 8 9 ]\n[ 2 4> 5 6 7 8 9 ]\n[ 2 4 6> 7 8 9 ]\n[ 2 4 6 8> 9 ]\n[ 2> 4 6 8 ]\n[ 2 6> 8 ]\n[ 2> 6 ]\n[ 2> ]\n<<<<<<<<\n\n>>>>>>>> 06\n20 1\n========\n[ 1> 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3> 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5> 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7> 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9> 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11> 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13> 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13 15> 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13 15 17> 18 19 20 ]\n[ 1 3 5 7 9 11 13 15 17 19> 20 ]\n[ 1> 3 5 7 9 11 13 15 17 19 ]\n[ 1 5> 7 9 11 13 15 17 19 ]\n[ 1 5 9> 11 13 15 17 19 ]\n[ 1 5 9 13> 15 17 19 ]\n[ 1 5 9 13 17> 19 ]\n[ 1> 5 9 13 17 ]\n[ 1 9> 13 17 ]\n[ 1 9 17> ]\n[ 9> 17 ]\n[ 9> ]\n<<<<<<<<\n\n\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01\n3 1\n======== EXPECT\n[ 1> 2 3 ]\n[ 1 3> ]\n[ 3> ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02\n3 2\n======== EXPECT\n[ 1 2> 3 ]\n[ 1> 2 ]\n[ 1> ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n3 3\n======== EXPECT\n[ 1 2 3> ]\n[ 2> 3 ]\n[ 2> ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04\n6 3\n======== EXPECT\n[ 1 2 3> 4 5 6 ]\n[ 1 2 3 5> 6 ]\n[ 1> 2 3 5 ]\n[ 1 3> 5 ]\n[ 1> 3 ]\n[ 1> ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05\n9 9\n======== EXPECT\n[ 1 2 3 4 5 6 7 8 9> ]\n[ 2> 3 4 5 6 7 8 9 ]\n[ 2 4> 5 6 7 8 9 ]\n[ 2 4 6> 7 8 9 ]\n[ 2 4 6 8> 9 ]\n[ 2> 4 6 8 ]\n[ 2 6> 8 ]\n[ 2> 6 ]\n[ 2> ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06\n20 1\n======== EXPECT\n[ 1> 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3> 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5> 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7> 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9> 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11> 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13> 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13 15> 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13 15 17> 18 19 20 ]\n[ 1 3 5 7 9 11 13 15 17 19> 20 ]\n[ 1> 3 5 7 9 11 13 15 17 19 ]\n[ 1 5> 7 9 11 13 15 17 19 ]\n[ 1 5 9> 11 13 15 17 19 ]\n[ 1 5 9 13> 15 17 19 ]\n[ 1 5 9 13 17> 19 ]\n[ 1> 5 9 13 17 ]\n[ 1 9> 13 17 ]\n[ 1 9 17> ]\n[ 9> 17 ]\n[ 9> ]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
