{
    "title": "@balanceada: F\u00f3rmula balanceada",
    "description": "# F\u00f3rmula balanceada\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Tests](#tests)\n-- | -- | --\n<!-- toch -->\n\n## Intro\n\nNeste exerc\u00edcio, o objetivo \u00e9 verificar se uma string composta apenas por par\u00eanteses `()` e colchetes `[]` est\u00e1 **balanceada**.\n\nUma string \u00e9 considerada balanceada quando:\n\n- Para cada s\u00edmbolo de abertura, existe um s\u00edmbolo de fechamento correspondente.\n- Os s\u00edmbolos est\u00e3o na ordem correta e corretamente aninhados.\n\nExemplos de strings balanceadas:\n\n- `\"()\"`, `\"(())\"`, `\"[()]\"`, `\"[()][](https://github.com/qxcodeed/arcade/blob/master/base/balanceada/)\"`\n\nExemplos de strings n\u00e3o balanceadas:\n\n- `\")(\"`, `\"(()\"`, `\"[(])\"`\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [main.cpp](https://github.com/qxcodeed/arcade/blob/master/base/balanceada/.cache/draft/cpp/main.cpp)\n<!-- links -->\n\n### Observa\u00e7\u00f5es\n\n- Certifique-se de verificar correspond\u00eancia exata entre os par\u00eanteses e colchetes.\n- O algoritmo deve percorrer a string apenas uma vez, garantindo efici\u00eancia.\n\n## Tests\n\n### Entrada\n\n- A entrada ser\u00e1 uma string contendo apenas par\u00eanteses `()` e colchetes `[]`.\n\n### Sa\u00edda\n\n- `balanceado` se a string estiver balanceada.\n- `nao balanceado` caso contr\u00e1rio.\n\n```txt\n>>>>>>>>\n(())\n========\nbalanceado\n<<<<<<<<\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n(())\n======== EXPECT\nbalanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 1\n()\n======== EXPECT\nbalanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 3\n()()()()[][][][]\n======== EXPECT\nbalanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 4\n([])(([][]))\n======== EXPECT\nbalanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 5\n(([[[(([([])][][][](([()]))))]]()(())()][][][()[](())]))()([])[()]\n======== EXPECT\nbalanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 6\n)(\n======== EXPECT\nnao balanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 7\n[[]\n======== EXPECT\nnao balanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 8\n[(][)]\n======== EXPECT\nnao balanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 9\n[[[[))))\n======== EXPECT\nnao balanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 10\n(([[[(([([])][][][](([()]))))]]()(())()][][][()[](())])))()([])[()]\n======== EXPECT\nnao balanceado\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao\n#include <iostream>\n#include <stack>\nusing std::stack;\nusing std::string;\n\n// Altere essa funcao.\n// Receba uma string composta de parenteses e colchetes\n// e retorna 'true' se essa sequencia esta balanceada\n// e retorna 'false' caso contrario.\n\n// Uma sequencia e considerada balanceada se cada simbolo\n// de abertura tem um s\u00edmbolo correspondente de fechamento na ordem correta,\n// e os simbolos estao corretamente aninhados.\nbool isBalanced(string word){\n    // TODO: complexidade O(n)\n    (void) word;\n    return false;\n}\n\n// Exemplos:\n// isBalanced(\"\") == true\n// isBalanced(\"()\") == true\n// isBalanced(\"(((())))\") == true\n// isBalanced(\"()()()()\") == true\n// isBalanced(\"[()]\") == true\n// isBalanced(\"([])[()]\") == true\n// isBalanced(\"((()\") == false\n// isBalanced(\")()\") == false\n// isBalanced(\"[(])\") == false\n// isBalanced(\"[(][)]\") == false\n\n\nint main() {\n    string s;\n    std::cin >> s;\n\n    if(isBalanced(s)) {\n        std::cout << \"balanceado\" << std::endl;\n    } else {\n        std::cout << \"nao balanceado\" << std::endl;\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
