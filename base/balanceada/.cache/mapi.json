{
    "title": "@balanceada: F\u00f3rmula balanceada",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@balanceada: F\u00f3rmula balanceada</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@balanceada: F\u00f3rmula balanceada</h1>\n            <h1 id=\"formula-balanceada\">F\u00f3rmula balanceada</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<h2 id=\"intro\">Intro</h2>\n<p>Neste exerc\u00edcio, o objetivo \u00e9 verificar se uma string composta apenas por par\u00eanteses <code>()</code> e colchetes <code>[]</code> est\u00e1 <strong>balanceada</strong>.</p>\n<p>Uma string \u00e9 considerada balanceada quando:</p>\n<ul>\n<li>Para cada s\u00edmbolo de abertura, existe um s\u00edmbolo de fechamento correspondente.</li>\n<li>Os s\u00edmbolos est\u00e3o na ordem correta e corretamente aninhados.</li>\n</ul>\n<p>Exemplos de strings balanceadas:</p>\n<ul>\n<li><code>\"()\"</code>, <code>\"(())\"</code>, <code>\"[()]\"</code>, <code>\"[()][](https://github.com/qxcodeed/arcade/blob/master/base/balanceada/)\"</code></li>\n</ul>\n<p>Exemplos de strings n\u00e3o balanceadas:</p>\n<ul>\n<li><code>\")(\"</code>, <code>\"(()\"</code>, <code>\"[(])\"</code></li>\n</ul>\n<h2 id=\"draft\">Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp</li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/balanceada/.cache/draft/cpp/main.cpp\">main.cpp</a></li>\n</ul>\n<!-- links -->\n\n<h3 id=\"observacoes\">Observa\u00e7\u00f5es</h3>\n<ul>\n<li>Certifique-se de verificar correspond\u00eancia exata entre os par\u00eanteses e colchetes.</li>\n<li>O algoritmo deve percorrer a string apenas uma vez, garantindo efici\u00eancia.</li>\n</ul>\n<h2 id=\"tests\">Tests</h2>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A entrada ser\u00e1 uma string contendo apenas par\u00eanteses <code>()</code> e colchetes <code>[]</code>.</li>\n</ul>\n<h3 id=\"saida\">Sa\u00edda</h3>\n<ul>\n<li><code>balanceado</code> se a string estiver balanceada.</li>\n<li><code>nao balanceado</code> caso contr\u00e1rio.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-txt\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n(())\n========\nbalanceado\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n(())\n======== EXPECT\nbalanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 1\n()\n======== EXPECT\nbalanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 3\n()()()()[][][][]\n======== EXPECT\nbalanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 4\n([])(([][]))\n======== EXPECT\nbalanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 5\n(([[[(([([])][][][](([()]))))]]()(())()][][][()[](())]))()([])[()]\n======== EXPECT\nbalanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 6\n)(\n======== EXPECT\nnao balanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 7\n[[]\n======== EXPECT\nnao balanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 8\n[(][)]\n======== EXPECT\nnao balanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 9\n[[[[))))\n======== EXPECT\nnao balanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 10\n(([[[(([([])][][][](([()]))))]]()(())()][][][()[](())])))()([])[()]\n======== EXPECT\nnao balanceado\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao\n#include <iostream>\n#include <stack>\nusing std::stack;\nusing std::string;\n\n// Altere essa funcao.\n// Receba uma string composta de parenteses e colchetes\n// e retorna 'true' se essa sequencia esta balanceada\n// e retorna 'false' caso contrario.\n\n// Uma sequencia e considerada balanceada se cada simbolo\n// de abertura tem um s\u00edmbolo correspondente de fechamento na ordem correta,\n// e os simbolos estao corretamente aninhados.\nbool isBalanced(string word){\n    // TODO: complexidade O(n)\n    (void) word;\n    return false;\n}\n\n// Exemplos:\n// isBalanced(\"\") == true\n// isBalanced(\"()\") == true\n// isBalanced(\"(((())))\") == true\n// isBalanced(\"()()()()\") == true\n// isBalanced(\"[()]\") == true\n// isBalanced(\"([])[()]\") == true\n// isBalanced(\"((()\") == false\n// isBalanced(\")()\") == false\n// isBalanced(\"[(])\") == false\n// isBalanced(\"[(][)]\") == false\n\n\nint main() {\n    string s;\n    std::cin >> s;\n\n    if(isBalanced(s)) {\n        std::cout << \"balanceado\" << std::endl;\n    } else {\n        std::cout << \"nao balanceado\" << std::endl;\n    }\n}\n",
                "encoding": 0
            }
        ]
    }
}
