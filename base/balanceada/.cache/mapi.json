{
    "title": "@balanceada: F\u00f3rmula balanceada",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@balanceada: F\u00f3rmula balanceada</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>F\u00f3rmula balanceada</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<h2>Intro</h2>\n<p>Neste exerc\u00edcio, o objetivo \u00e9 verificar se uma string composta apenas por par\u00eanteses <code>()</code> e colchetes <code>[]</code> est\u00e1 <strong>balanceada</strong>.</p>\n<p>Uma string \u00e9 considerada balanceada quando:</p>\n<ul>\n<li>Para cada s\u00edmbolo de abertura, existe um s\u00edmbolo de fechamento correspondente.</li>\n<li>Os s\u00edmbolos est\u00e3o na ordem correta e corretamente aninhados.</li>\n</ul>\n<p>Exemplos de strings balanceadas:</p>\n<ul>\n<li><code>\"()\"</code>, <code>\"(())\"</code>, <code>\"[()]\"</code>, <code>\"[()][](https://github.com/qxcodeed/arcade/blob/master/base/balanceada/)\"</code></li>\n</ul>\n<p>Exemplos de strings n\u00e3o balanceadas:</p>\n<ul>\n<li><code>\")(\"</code>, <code>\"(()\"</code>, <code>\"[(])\"</code></li>\n</ul>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/balanceada/.cache/draft/cpp/main.cpp\">main.cpp</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h3>Observa\u00e7\u00f5es</h3>\n<ul>\n<li>Certifique-se de verificar correspond\u00eancia exata entre os par\u00eanteses e colchetes.</li>\n<li>O algoritmo deve percorrer a string apenas uma vez, garantindo efici\u00eancia.</li>\n</ul>\n<h2>Tests</h2>\n<h3>Entrada</h3>\n<ul>\n<li>A entrada ser\u00e1 uma string contendo apenas par\u00eanteses <code>()</code> e colchetes <code>[]</code>.</li>\n</ul>\n<h3>Sa\u00edda</h3>\n<ul>\n<li><code>balanceado</code> se a string estiver balanceada.</li>\n<li><code>nao balanceado</code> caso contr\u00e1rio.</li>\n</ul>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n(())\n========\nbalanceado\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n(())\n======== EXPECT\nbalanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 1\n()\n======== EXPECT\nbalanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 3\n()()()()[][][][]\n======== EXPECT\nbalanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 4\n([])(([][]))\n======== EXPECT\nbalanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 5\n(([[[(([([])][][][](([()]))))]]()(())()][][][()[](())]))()([])[()]\n======== EXPECT\nbalanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 6\n)(\n======== EXPECT\nnao balanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 7\n[[]\n======== EXPECT\nnao balanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 8\n[(][)]\n======== EXPECT\nnao balanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 9\n[[[[))))\n======== EXPECT\nnao balanceado\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 10\n(([[[(([([])][][][](([()]))))]]()(())()][][][()[](())])))()([])[()]\n======== EXPECT\nnao balanceado\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao\n#include <iostream>\n#include <stack>\nusing std::stack;\nusing std::string;\n\n// Altere essa funcao.\n// Receba uma string composta de parenteses e colchetes\n// e retorna 'true' se essa sequencia esta balanceada\n// e retorna 'false' caso contrario.\n\n// Uma sequencia e considerada balanceada se cada simbolo\n// de abertura tem um s\u00edmbolo correspondente de fechamento na ordem correta,\n// e os simbolos estao corretamente aninhados.\nbool isBalanced(string word){\n    // TODO: complexidade O(n)\n    (void) word;\n    return false;\n}\n\n// Exemplos:\n// isBalanced(\"\") == true\n// isBalanced(\"()\") == true\n// isBalanced(\"(((())))\") == true\n// isBalanced(\"()()()()\") == true\n// isBalanced(\"[()]\") == true\n// isBalanced(\"([])[()]\") == true\n// isBalanced(\"((()\") == false\n// isBalanced(\")()\") == false\n// isBalanced(\"[(])\") == false\n// isBalanced(\"[(][)]\") == false\n\n\nint main() {\n    string s;\n    std::cin >> s;\n\n    if(isBalanced(s)) {\n        std::cout << \"balanceado\" << std::endl;\n    } else {\n        std::cout << \"nao balanceado\" << std::endl;\n    }\n}\n",
                "type": "show"
            }
        ]
    }
}
