{
    "title": "@distancia: Colocando os n\u00fameros no lugar certo",
    "description": "# Colocando os n\u00fameros no lugar certo\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/distancia/cover.jpg)\n\n- Seja uma string formada por d\u00edgitos e underlines `.`.\n- Seja um valor de limite L.\n\nObjetivos:\n\n- Voc\u00ea deve substituir todos os `.` por d\u00edgitos seguindo as seguintes regras.\n  - S\u00f3 pode utilizar d\u00edgitos de 0 at\u00e9 L, incluindo L.\n  - Qualquer d\u00edgito precisa estar a uma dist\u00e2ncia m\u00ednima de L casas de outra ocorr\u00eancia dele mesmo, tanto \u00e0 esquerda como \u00e0 direita.\n\n- Para cada problema, existe uma e somente uma solu\u00e7\u00e3o.\n\n## Entrada e Sa\u00edda\n\n- Entrada\n  - 1a linha: sequ\u00eancia.\n  - 2a linha: valor de L.\n- Sa\u00edda\n  - A string solu\u00e7\u00e3o do problema.\n\n## Limites\n\n- sequ\u00eancia de tamanho t, 0 > t > 100\n- 0 > L > 100\n\n___\n\n## Testes\n\n```txt\n\n\n>>>>>>>>\n01.2.\n3\n========\n01320\n<<<<<<<<\n\n\n\n>>>>>>>> 02\n.0..231..5\n5\n========\n1045231045\n<<<<<<<<\n\n>>>>>>>> 01\n2..0..............3...........\n3\n========\n213021302130213021302130213021\n<<<<<<<<\n\n\n>>>>>>>> 03\n0..32..41.\n5\n========\n0413250413\n<<<<<<<<\n\n\n>>>>>>>> 03\n9....7.620.5318.....\n9\n========\n95318746209531874620\n<<<<<<<<\n\n>>>>>>>>\n12.3...0\n4\n========\n12034120\n<<<<<<<<\n\n>>>>>>>>\n0.76.14..2..5..\n7\n========\n027651430276514\n<<<<<<<<\n\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n01.2.\n3\n======== EXPECT\n01320\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02\n.0..231..5\n5\n======== EXPECT\n1045231045\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 01\n2..0..............3...........\n3\n======== EXPECT\n213021302130213021302130213021\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n0..32..41.\n5\n======== EXPECT\n0413250413\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n9....7.620.5318.....\n9\n======== EXPECT\n95318746209531874620\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n12.3...0\n4\n======== EXPECT\n12034120\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n0.76.14..2..5..\n7\n======== EXPECT\n027651430276514\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "solver.go",
                "contents": "package main\n\nimport (\n\t\"fmt\"\n)\n\nconst EMPTY = '.'\n\ntype Problem struct {\n\tdata []rune\n\tlim  int\n}\n\nfunc NewProblem(data string, lim int) Problem {\n\tp := Problem{\n\t\tdata: []rune(data),\n\t\tlim:  lim,\n\t}\n\treturn p\n}\n\n// verifica se esse valor pode ser utilizado nessa posi\u00e7\u00e3o\nfunc (p *Problem) fit(index int, value rune) bool {\n\t_, _ = index, value\n\t// cuidado para n\u00e3o sair dos limites, nem para o come\u00e7o, nem para o fim\n\treturn false\n}\n\nfunc (p *Problem) solve(index int) bool {\n\t// se chegou ao fim, retorne true\n\t// se n\u00e3o \u00e9 EMPTY, v\u00e1 para o pr\u00f3ximo\n\t// se \u00e9 EMPTY\n\t//    fa\u00e7a um la\u00e7o e chame a recurs\u00e3o para cada valor poss\u00edvel\n\t//    se algum der certo, ent\u00e3o retorne verdade\n\t// se nenhum deu certo, recoloque vazio e retorne falso\n\t_ = index\n\treturn false\n}\n\nfunc main() {\n\tvar input string\n\tvar lim int\n\tfmt.Scan(&input, &lim)\n\tprob := NewProblem(input, lim)\n\tprob.solve(0)\n\tfmt.Println(string(prob.data))\n}\n",
                "type": "show"
            }
        ]
    }
}
