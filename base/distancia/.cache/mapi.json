{
    "title": "@distancia: Colocando os n\u00fameros no lugar certo",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@distancia: Colocando os n\u00fameros no lugar certo</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Colocando os n\u00fameros no lugar certo</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/distancia/cover.jpg\" /></p>\n<ul>\n<li>Seja uma string formada por d\u00edgitos e underlines <code>.</code>.</li>\n<li>Seja um valor de limite L.</li>\n</ul>\n<p>Objetivos:</p>\n<ul>\n<li>\n<p>Voc\u00ea deve substituir todos os <code>.</code> por d\u00edgitos seguindo as seguintes regras.</p>\n<ul>\n<li>S\u00f3 pode utilizar d\u00edgitos de 0 at\u00e9 L, incluindo L.</li>\n<li>Qualquer d\u00edgito precisa estar a uma dist\u00e2ncia m\u00ednima de L casas de outra ocorr\u00eancia dele mesmo, tanto \u00e0 esquerda como \u00e0 direita.</li>\n</ul>\n</li>\n<li>\n<p>Para cada problema, existe uma e somente uma solu\u00e7\u00e3o.</p>\n</li>\n</ul>\n<h2>Entrada e Sa\u00edda</h2>\n<ul>\n<li>Entrada<ul>\n<li>1a linha: sequ\u00eancia.</li>\n<li>2a linha: valor de L.</li>\n</ul>\n</li>\n<li>Sa\u00edda<ul>\n<li>A string solu\u00e7\u00e3o do problema.</li>\n</ul>\n</li>\n</ul>\n<h2>Limites</h2>\n<ul>\n<li>sequ\u00eancia de tamanho t, 0 &gt; t &gt; 100</li>\n<li>0 &gt; L &gt; 100</li>\n</ul>\n<hr />\n<h2>Testes</h2>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n01.2.\n3\n========\n01320\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02\n.0..231..5\n5\n========\n1045231045\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01\n2..0..............3...........\n3\n========\n213021302130213021302130213021\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03\n0..32..41.\n5\n========\n0413250413\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03\n9....7.620.5318.....\n9\n========\n95318746209531874620\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n12.3...0\n4\n========\n12034120\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n0.76.14..2..5..\n7\n========\n027651430276514\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n01.2.\n3\n======== EXPECT\n01320\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02\n.0..231..5\n5\n======== EXPECT\n1045231045\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 01\n2..0..............3...........\n3\n======== EXPECT\n213021302130213021302130213021\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n0..32..41.\n5\n======== EXPECT\n0413250413\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n9....7.620.5318.....\n9\n======== EXPECT\n95318746209531874620\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n12.3...0\n4\n======== EXPECT\n12034120\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n0.76.14..2..5..\n7\n======== EXPECT\n027651430276514\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "solver.go",
                "contents": "package main\n\nimport (\n\t\"fmt\"\n)\n\nconst EMPTY = '.'\n\ntype Problem struct {\n\tdata []rune\n\tlim  int\n}\n\nfunc NewProblem(data string, lim int) Problem {\n\tp := Problem{\n\t\tdata: []rune(data),\n\t\tlim:  lim,\n\t}\n\treturn p\n}\n\n// verifica se esse valor pode ser utilizado nessa posi\u00e7\u00e3o\nfunc (p *Problem) fit(index int, value rune) bool {\n\t_, _ = index, value\n\t// cuidado para n\u00e3o sair dos limites, nem para o come\u00e7o, nem para o fim\n\treturn false\n}\n\nfunc (p *Problem) solve(index int) bool {\n\t// se chegou ao fim, retorne true\n\t// se n\u00e3o \u00e9 EMPTY, v\u00e1 para o pr\u00f3ximo\n\t// se \u00e9 EMPTY\n\t//    fa\u00e7a um la\u00e7o e chame a recurs\u00e3o para cada valor poss\u00edvel\n\t//    se algum der certo, ent\u00e3o retorne verdade\n\t// se nenhum deu certo, recoloque vazio e retorne falso\n\t_ = index\n\treturn false\n}\n\nfunc main() {\n\tvar input string\n\tvar lim int\n\tfmt.Scan(&input, &lim)\n\tprob := NewProblem(input, lim)\n\tprob.solve(0)\n\tfmt.Println(string(prob.data))\n}\n",
                "type": "show"
            }
        ]
    }
}
