{
    "title": "@lista_d2: Lista Dupla com N\u00f3 Iterador",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@lista_d2: Lista Dupla com N\u00f3 Iterador</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Lista Dupla com N\u00f3 Iterador</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<h2>Intro</h2>\n<p>Todas as linguagens implementam algum modelo de abstra\u00e7\u00e3o para facilitar o percorrimentos das diversas estruturas de dados implementadas. Alguns utilizam o modelo de for range, que permite percorrer qualquer cole\u00e7\u00e3o de dados, como listas, dicion\u00e1rios, etc. Esse modelo \u00e9 mais simples e f\u00e1cil de usar, mas n\u00e3o \u00e9 t\u00e3o flex\u00edvel quanto o modelo de iterador, por n\u00e3o permitir escolher o ponto de partida e o ponto de parada do loop.</p>\n<p>Exemplos de for range:</p>\n<div class=\"language-java highlight\"><pre><span></span><code><span class=\"c1\">// Java</span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">System</span><span class=\"p\">.</span><span class=\"na\">out</span><span class=\"p\">.</span><span class=\"na\">println</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"language-python highlight\"><pre><span></span><code><span class=\"c1\"># Python</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"language-c++ highlight\"><pre><span></span><code><span class=\"c1\">// C++</span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Tamb\u00e9m existe o modelo de iterador:</p>\n<div class=\"language-java highlight\"><pre><span></span><code><span class=\"c1\">// Java</span>\n<span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"na\">iterator</span><span class=\"p\">();</span>\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"na\">hasNext</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">System</span><span class=\"p\">.</span><span class=\"na\">out</span><span class=\"p\">.</span><span class=\"na\">println</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"na\">next</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"language-c++ highlight\"><pre><span></span><code><span class=\"c1\">// C++</span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"language-go highlight\"><pre><span></span><code><span class=\"c1\">// Go</span>\n<span class=\"nx\">lista</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">New</span><span class=\"p\">()</span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">lista</span><span class=\"p\">.</span><span class=\"nx\">Front</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"kc\">nil</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">Next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2>Guide</h2>\n<p>Vamos partir do c\u00f3digo da atividade anterior, a @lista_d1, e implementar um modelo de iterador para deixar nossa lista mais us\u00e1vel. O resultado final dessa estrutura de dados deve ser algo parecido o c\u00f3digo de percorrimento para Go usando o modelo de iterador.</p>\n<ul>\n<li>Para isso, vamos mudar a estrutura do N\u00f3 para que ele se comporte como iterador.</li>\n</ul>\n<div class=\"language-ts highlight\"><pre><span></span><code><span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">Node</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\">        </span><span class=\"c1\">// Valor \u00e9 p\u00fablico</span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">next</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"w\">       </span><span class=\"c1\">// o pr\u00f3ximo n\u00f3 da lista</span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">prev</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"w\">       </span><span class=\"c1\">// o n\u00f3 anterior</span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">root</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"w\">       </span><span class=\"c1\">// aponta para o n\u00f3 sentinela da lista da qual ele faz parte</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Next</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"w\">     </span><span class=\"c1\">// retorna o pr\u00f3ximo n\u00f3 ou nulo, se o pr\u00f3ximo \u00e9 o root</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Prev</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"w\">     </span><span class=\"c1\">// retorna o n\u00f3 anterior ou nulo, se o anterior \u00e9 o root</span>\n<span class=\"p\">}</span><span class=\"w\">    </span>\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">LList</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">root</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">Node</span><span class=\"w\">                  </span><span class=\"c1\">// N\u00f3 sentinela que marca o come\u00e7o e o fim da lista</span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">size</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\">                     </span><span class=\"c1\">// tamanho da lista</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Size</span><span class=\"p\">()</span><span class=\"w\">                        </span><span class=\"c1\">// retorna o tamanho da lista</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Clear</span><span class=\"p\">()</span><span class=\"w\">                       </span><span class=\"c1\">// apaga todos os n\u00f3s da lista</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">PushFront</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"w\"> </span><span class=\"kr\">int</span><span class=\"p\">)</span><span class=\"w\">          </span><span class=\"c1\">// adiciona um novo n\u00f3 com esse valor no in\u00edcio da lista</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">PushBack</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"w\"> </span><span class=\"kr\">int</span><span class=\"p\">)</span><span class=\"w\">           </span><span class=\"c1\">// adiciona um novo n\u00f3 com esse valor no fim da lista</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">PopFront</span><span class=\"p\">()</span><span class=\"w\">                    </span><span class=\"c1\">// remove o primeiro valor da lista se existir</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">PopBack</span><span class=\"p\">()</span><span class=\"w\">                     </span><span class=\"c1\">// remove o \u00faltimo valor da lista se existir</span>\n<span class=\"w\">    </span><span class=\"c1\">// novos m\u00e9todos</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Front</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"w\">                 </span><span class=\"c1\">// retorna o primeiro n\u00f3 v\u00e1lido da lista ou nulo</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Back</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"w\">                  </span><span class=\"c1\">// retorna o \u00faltimo n\u00f3 v\u00e1lido da lista ou nulo</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Search</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"w\"> </span><span class=\"kr\">int</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"w\">       </span><span class=\"c1\">// retorna o n\u00f3 que cont\u00e9m a primeira ocorr\u00eancia desse valor ou nulo</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Insert</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"w\"> </span><span class=\"kr\">int</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"c1\">// insere um novo n\u00f3 antes do n\u00f3 passado por refer\u00eancia</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Remove</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"w\">      </span><span class=\"c1\">// remove o n\u00f3 passado por refer\u00eancia retornando o n\u00f3 que ficou no lugar dele ou nulo</span>\n<span class=\"w\">                                     </span><span class=\"c1\">// caso o n\u00f3 n\u00e3o exista ou o pr\u00f3ximo seja o \u00faltimo</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Perceba que implementando assim, escondemos o root para quem utiliza a lista, dando a impress\u00e3o que os limites dela apontam para nulo.</p>\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE push_back &lt;value ...&gt;</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"nv\">$push_front</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<p>Percorrendo a lista usando front e back at\u00e9 o fim</p>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE walking</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"nv\">$walk</span>\n<span class=\"o\">[</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">6</span><span class=\"w\"> </span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"w\"> </span><span class=\"m\">6</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">]</span>\n<span class=\"nv\">$clear</span>\n<span class=\"nv\">$walk</span>\n<span class=\"o\">[</span><span class=\"w\"> </span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"w\"> </span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<p>Para executar a inser\u00e7\u00e3o e remo\u00e7\u00e3o de n\u00f3s, vamos usar o comando <code>search</code> para encontrar o n\u00f3 que queremos manipular.\nE depois usar o comando <code>replace</code>, <code>insert</code> ou <code>remove</code> para fazer a opera\u00e7\u00e3o desejada.</p>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE search and replace</span>\n<span class=\"c1\"># replace &lt;value_to_search&gt; &lt;value_to_replace&gt;</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$replace</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">9</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">9</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$replace</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">8</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">9</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$replace</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">7</span>\nfail:<span class=\"w\"> </span>not<span class=\"w\"> </span>found\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">8</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">9</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE search and insert</span>\n<span class=\"c1\"># insert &lt;value_to_search&gt; &lt;value_to_insert_before&gt;</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">9</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">9</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">8</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">9</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">7</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">8</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">9</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">7</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">7</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">8</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">9</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">6</span>,<span class=\"w\"> </span><span class=\"m\">7</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">7</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">8</span>,<span class=\"w\"> </span><span class=\"m\">7</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">9</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">6</span>,<span class=\"w\"> </span><span class=\"m\">7</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">10</span><span class=\"w\"> </span><span class=\"m\">7</span>\nfail:<span class=\"w\"> </span>not<span class=\"w\"> </span>found\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">8</span>,<span class=\"w\"> </span><span class=\"m\">7</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">9</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">6</span>,<span class=\"w\"> </span><span class=\"m\">7</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE search and remove</span>\n<span class=\"c1\"># remove &lt;value_to_search&gt;</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$remove</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$remove</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$remove</span><span class=\"w\"> </span><span class=\"m\">7</span>\nfail:<span class=\"w\"> </span>not<span class=\"w\"> </span>found\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT push_back <value ...>\npush_back 1 2 3 4\nshow\npush_back 1 2 3 4\nshow\npush_front 0 3\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4]\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4, 1, 2, 3, 4]\n$push_front 0 3\n$show\n[3, 0, 1, 2, 3, 4, 1, 2, 3, 4]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT walking\npush_back 1 2 3 4 5 6\nwalk\nclear\nwalk\nend\n======== EXPECT\n$push_back 1 2 3 4 5 6\n$walk\n[ 1 2 3 4 5 6 ]\n[ 6 5 4 3 2 1 ]\n$clear\n$walk\n[ ]\n[ ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT search and replace\npush_back 1 2 3 4 5\nreplace 3 9\nshow\nreplace 1 8\nshow\nreplace 3 7\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4 5\n$replace 3 9\n$show\n[1, 2, 9, 4, 5]\n$replace 1 8\n$show\n[8, 2, 9, 4, 5]\n$replace 3 7\nfail: not found\n$show\n[8, 2, 9, 4, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT search and insert\npush_back 1 2 3 4 5\nshow\ninsert 3 9\nshow\ninsert 1 8\nshow\ninsert 5 7\nshow\ninsert 7 6\nshow\ninsert 1 7\nshow\ninsert 10 7\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$insert 3 9\n$show\n[1, 2, 9, 3, 4, 5]\n$insert 1 8\n$show\n[8, 1, 2, 9, 3, 4, 5]\n$insert 5 7\n$show\n[8, 1, 2, 9, 3, 4, 7, 5]\n$insert 7 6\n$show\n[8, 1, 2, 9, 3, 4, 6, 7, 5]\n$insert 1 7\n$show\n[8, 7, 1, 2, 9, 3, 4, 6, 7, 5]\n$insert 10 7\nfail: not found\n$show\n[8, 7, 1, 2, 9, 3, 4, 6, 7, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT search and remove\npush_back 1 2 3 4 5\nshow\nremove 3\nshow\nremove 1\nshow\nremove 7\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$remove 3\n$show\n[1, 2, 4, 5]\n$remove 1\n$show\n[2, 4, 5]\n$remove 7\nfail: not found\n$show\n[2, 4, 5]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# extra\n\nCom a implementa\u00e7\u00e3o do N\u00f3 como interador, os seguintes c\u00f3digos podem ser escritos, permitindo navegar e manipular a estrutura sem precisar lidar com a implementa\u00e7\u00e3o interna dela.\n\n```go\nvar llist LList = NewLList()\n\n// Adicionando valores na lista\nfor i := range 10 {\n    llist.PushBack(i)\n}\n\n// Iterando sobre a lista\nfor node := llist.Front(); node != nil; node = node.Next() {\n    fmt.Println(node.Value)\n}\n\n// Iterando de tr\u00e1s pra frente\nfor node := llist.Back(); node != nil; node = node.Prev() {\n    fmt.Println(node.Value)\n}\n\n// Busca de um n\u00f3\nnode := llist.Search(3)\nif node != nil {\n    fmt.Println(\"Encontrado:\", node.Value)\n} else {\n    fmt.Println(\"N\u00e3o encontrado\")\n}\n\n// Removendo todos os n\u00f3s impares\nfor node := llist.Front(); node != nil; { // come\u00e7a do primeiro n\u00f3\n    if node.Value%2 == 1 {                // se o valor for impar\n        node = llist.remove(node)         // remove o n\u00f3 e retorna o pr\u00f3ximo n\u00f3\n    } else {                              // se o valor for par\n        node = node.Next()                // apenas avan\u00e7a para o pr\u00f3ximo n\u00f3\n    }\n}\n\n```\n\n## Diagrama de Implementa\u00e7\u00e3o\n\n```go\nclass Node {\n    Value int    // Valor \u00e9 p\u00fablico\n    next *Node   // o pr\u00f3ximo n\u00f3 da lista\n    prev *Node   // o n\u00f3 anterior\n\n    root *Node   // aponta para o n\u00f3 sentinela da lista da qual ele faz parte\n    Next() *Node // retorna o pr\u00f3ximo n\u00f3 ou nulo, se o pr\u00f3ximo \u00e9 o root\n    Prev() *Node // retorna o n\u00f3 anterior ou nulo, se o anterior \u00e9 o root\n}\n\nclass LList {\n    root * Node                   // N\u00f3 sentinela que marca o come\u00e7o e o fim da lista\n    size int                      // tamanho da lista\n    Size()                        // retorna o tamanho da lista\n    Clear()                       // apaga todos os n\u00f3s da lista\n    PushFront(value int)          // adiciona um novo n\u00f3 com esse valor no in\u00edcio da lista\n    PushBack(value int)           // adiciona um novo n\u00f3 com esse valor no fim da lista\n    PopFront()                    // remove o primeiro valor da lista se existir\n    PopBack()                     // remove o \u00faltimo valor da lista se existir\n    Front() *Node                 // retorna o primeiro n\u00f3 v\u00e1lido da lista ou nulo\n    Back() *Node                  // retorna o \u00faltimo n\u00f3 v\u00e1lido da lista ou nulo\n    Search(value int) *Node       // retorna o n\u00f3 que cont\u00e9m a primeira ocorr\u00eancia desse valor ou nulo\n    Insert(node *Node, value int) // insere um novo n\u00f3 antes do n\u00f3 passado por refer\u00eancia\n    Remove(node *Node) *Node      // remove o n\u00f3 passado por refer\u00eancia retornando o n\u00f3 que ficou no lugar dele\n}\n```\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n// \tll := NewLList()\n\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\tfmt.Println(line)\n\t\targs := strings.Fields(line)\n\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := args[0]\n\n\t\tswitch cmd {\n\t\tcase \"show\":\n\t\t\t// fmt.Println(ll.String())\n\t\tcase \"size\":\n\t\t\t// fmt.Println(ll.Size())\n\t\tcase \"push_back\":\n\t\t\t// for _, v := range args[1:] {\n\t\t\t// \tnum, _ := strconv.Atoi(v)\n\t\t\t// \tll.PushBack(num)\n\t\t\t// }\n\t\tcase \"push_front\":\n\t\t\t// for _, v := range args[1:] {\n\t\t\t// \tnum, _ := strconv.Atoi(v)\n\t\t\t// \tll.PushFront(num)\n\t\t\t// }\n\t\tcase \"pop_back\":\n\t\t\t// ll.PopBack()\n\t\tcase \"pop_front\":\n\t\t\t// ll.PopFront()\n\t\tcase \"clear\":\n\t\t\t// ll.Clear()\n\t\tcase \"walk\":\n\t\t\t// fmt.Print(\"[ \")\n\t\t\t// for node := ll.Front(); node != nil; node = node.Next() {\n\t\t\t// \tfmt.Printf(\"%v \", node.Value)\n\t\t\t// }\n\t\t\t// fmt.Print(\"]\\n[ \")\n\t\t\t// for node := ll.Back(); node != nil; node = node.Prev() {\n\t\t\t// \tfmt.Printf(\"%v \", node.Value)\n\t\t\t// }\n\t\t\t// fmt.Println(\"]\")\n\t\tcase \"replace\":\n\t\t\t// oldvalue, _ := strconv.Atoi(args[1])\n\t\t\t// newvalue, _ := strconv.Atoi(args[2])\n\t\t\t// node := ll.Search(oldvalue)\n\t\t\t// if node != nil {\n\t\t\t// \tnode.Value = newvalue\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"fail: not found\")\n\t\t\t// }\n\t\tcase \"insert\":\n\t\t\t// oldvalue, _ := strconv.Atoi(args[1])\n\t\t\t// newvalue, _ := strconv.Atoi(args[2])\n\t\t\t// node := ll.Search(oldvalue)\n\t\t\t// if node != nil {\n\t\t\t// \tll.Insert(node, newvalue)\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"fail: not found\")\n\t\t\t// }\n\t\tcase \"remove\":\n\t\t\t// oldvalue, _ := strconv.Atoi(args[1])\n\t\t\t// node := ll.Search(oldvalue)\n\t\t\t// if node != nil {\n\t\t\t// \tll.Remove(node)\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"fail: not found\")\n\t\t\t// }\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
