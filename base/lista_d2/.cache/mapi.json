{
    "title": "@lista_d2: Lista Dupla com N\u00f3 Iterador",
    "description": "# Lista Dupla com N\u00f3 Iterador\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Shell](#shell)\n-- | -- | --\n<!-- toch -->\n\n## Intro\n\nTodas as linguagens implementam algum modelo de abstra\u00e7\u00e3o para facilitar o percorrimentos das diversas estruturas de dados implementadas. Alguns utilizam o modelo de for range, que permite percorrer qualquer cole\u00e7\u00e3o de dados, como listas, dicion\u00e1rios, etc. Esse modelo \u00e9 mais simples e f\u00e1cil de usar, mas n\u00e3o \u00e9 t\u00e3o flex\u00edvel quanto o modelo de iterador, por n\u00e3o permitir escolher o ponto de partida e o ponto de parada do loop.\n\nExemplos de for range:\n\n```java\n// Java\nfor (int i : list) {\n    System.out.println(i);\n}\n```\n\n```python\n# Python\nfor i in list:\n    print(i)\n```\n\n```c++\n// C++\nfor (int i : list) {\n    cout << i << endl;\n}\n```\n\nTamb\u00e9m existe o modelo de iterador:\n\n```java\n// Java\nvar it = list.iterator();\nwhile (it.hasNext()) {\n    System.out.println(it.next());\n}\n```\n\n```c++\n// C++\nfor (auto it = list.begin(); it != list.end(); ++it) {\n    std::cout << *it << std::endl;\n}\n```\n\n```go\n// Go\nlista := list.New()\nfor e := lista.Front(); e != nil; e = e.Next() {\n    fmt.Println(e.Value)\n}\n```\n\n## Guide\n\nVamos partir do c\u00f3digo da atividade anterior, a @lista_d1, e implementar um modelo de iterador para deixar nossa lista mais us\u00e1vel. O resultado final dessa estrutura de dados deve ser algo parecido o c\u00f3digo de percorrimento para Go usando o modelo de iterador.\n\n- Para isso, vamos mudar a estrutura do N\u00f3 para que ele se comporte como iterador.\n\n```ts\nclass Node {\n    - value: int        // Valor \u00e9 p\u00fablico\n    - next: *Node       // o pr\u00f3ximo n\u00f3 da lista\n    - prev: *Node       // o n\u00f3 anterior\n    - root: *Node       // aponta para o n\u00f3 sentinela da lista da qual ele faz parte\n    + Next(): *Node     // retorna o pr\u00f3ximo n\u00f3 ou nulo, se o pr\u00f3ximo \u00e9 o root\n    + Prev(): *Node     // retorna o n\u00f3 anterior ou nulo, se o anterior \u00e9 o root\n}    \n\nclass LList {\n    - root: * Node                  // N\u00f3 sentinela que marca o come\u00e7o e o fim da lista\n    - size: int                     // tamanho da lista\n    + Size()                        // retorna o tamanho da lista\n    + Clear()                       // apaga todos os n\u00f3s da lista\n    + PushFront(value int)          // adiciona um novo n\u00f3 com esse valor no in\u00edcio da lista\n    + PushBack(value int)           // adiciona um novo n\u00f3 com esse valor no fim da lista\n    + PopFront()                    // remove o primeiro valor da lista se existir\n    + PopBack()                     // remove o \u00faltimo valor da lista se existir\n    // novos m\u00e9todos\n    + Front(): *Node                 // retorna o primeiro n\u00f3 v\u00e1lido da lista ou nulo\n    + Back(): *Node                  // retorna o \u00faltimo n\u00f3 v\u00e1lido da lista ou nulo\n    + Search(value int): *Node       // retorna o n\u00f3 que cont\u00e9m a primeira ocorr\u00eancia desse valor ou nulo\n    + Insert(node *Node, value int)  // insere um novo n\u00f3 antes do n\u00f3 passado por refer\u00eancia\n    + Remove(node *Node): *Node      // remove o n\u00f3 passado por refer\u00eancia retornando o n\u00f3 que ficou no lugar dele ou nulo\n                                     // caso o n\u00f3 n\u00e3o exista ou o pr\u00f3ximo seja o \u00faltimo\n}\n```\n\nPerceba que implementando assim, escondemos o root para quem utiliza a lista, dando a impress\u00e3o que os limites dela apontam para nulo.\n\n## Shell\n\n```bash\n#TEST_CASE push_back <value ...>\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4]\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4, 1, 2, 3, 4]\n$push_front 0 3\n$show\n[3, 0, 1, 2, 3, 4, 1, 2, 3, 4]\n$end\n```\n\nPercorrendo a lista usando front e back at\u00e9 o fim\n\n```bash\n#TEST_CASE walking\n$push_back 1 2 3 4 5 6\n$walk\n[ 1 2 3 4 5 6 ]\n[ 6 5 4 3 2 1 ]\n$clear\n$walk\n[ ]\n[ ]\n$end\n```\n\nPara executar a inser\u00e7\u00e3o e remo\u00e7\u00e3o de n\u00f3s, vamos usar o comando `search` para encontrar o n\u00f3 que queremos manipular.\nE depois usar o comando `replace`, `insert` ou `remove` para fazer a opera\u00e7\u00e3o desejada.\n\n```bash\n#TEST_CASE search and replace\n# replace <value_to_search> <value_to_replace>\n$push_back 1 2 3 4 5\n$replace 3 9\n$show\n[1, 2, 9, 4, 5]\n$replace 1 8\n$show\n[8, 2, 9, 4, 5]\n$replace 3 7\nfail: not found\n$show\n[8, 2, 9, 4, 5]\n$end\n```\n\n```bash\n#TEST_CASE search and insert\n# insert <value_to_search> <value_to_insert_before>\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$insert 3 9\n$show\n[1, 2, 9, 3, 4, 5]\n$insert 1 8\n$show\n[8, 1, 2, 9, 3, 4, 5]\n$insert 5 7\n$show\n[8, 1, 2, 9, 3, 4, 7, 5]\n$insert 7 6\n$show\n[8, 1, 2, 9, 3, 4, 6, 7, 5]\n$insert 1 7\n$show\n[8, 7, 1, 2, 9, 3, 4, 6, 7, 5]\n$insert 10 7\nfail: not found\n$show\n[8, 7, 1, 2, 9, 3, 4, 6, 7, 5]\n$end\n```\n\n```bash\n#TEST_CASE search and remove\n# remove <value_to_search>\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$remove 3\n$show\n[1, 2, 4, 5]\n$remove 1\n$show\n[2, 4, 5]\n$remove 7\nfail: not found\n$show\n[2, 4, 5]\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT push_back <value ...>\npush_back 1 2 3 4\nshow\npush_back 1 2 3 4\nshow\npush_front 0 3\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4]\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4, 1, 2, 3, 4]\n$push_front 0 3\n$show\n[3, 0, 1, 2, 3, 4, 1, 2, 3, 4]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT walking\npush_back 1 2 3 4 5 6\nwalk\nclear\nwalk\nend\n======== EXPECT\n$push_back 1 2 3 4 5 6\n$walk\n[ 1 2 3 4 5 6 ]\n[ 6 5 4 3 2 1 ]\n$clear\n$walk\n[ ]\n[ ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT search and replace\npush_back 1 2 3 4 5\nreplace 3 9\nshow\nreplace 1 8\nshow\nreplace 3 7\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4 5\n$replace 3 9\n$show\n[1, 2, 9, 4, 5]\n$replace 1 8\n$show\n[8, 2, 9, 4, 5]\n$replace 3 7\nfail: not found\n$show\n[8, 2, 9, 4, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT search and insert\npush_back 1 2 3 4 5\nshow\ninsert 3 9\nshow\ninsert 1 8\nshow\ninsert 5 7\nshow\ninsert 7 6\nshow\ninsert 1 7\nshow\ninsert 10 7\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$insert 3 9\n$show\n[1, 2, 9, 3, 4, 5]\n$insert 1 8\n$show\n[8, 1, 2, 9, 3, 4, 5]\n$insert 5 7\n$show\n[8, 1, 2, 9, 3, 4, 7, 5]\n$insert 7 6\n$show\n[8, 1, 2, 9, 3, 4, 6, 7, 5]\n$insert 1 7\n$show\n[8, 7, 1, 2, 9, 3, 4, 6, 7, 5]\n$insert 10 7\nfail: not found\n$show\n[8, 7, 1, 2, 9, 3, 4, 6, 7, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT search and remove\npush_back 1 2 3 4 5\nshow\nremove 3\nshow\nremove 1\nshow\nremove 7\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$remove 3\n$show\n[1, 2, 4, 5]\n$remove 1\n$show\n[2, 4, 5]\n$remove 7\nfail: not found\n$show\n[2, 4, 5]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# extra\n\nCom a implementa\u00e7\u00e3o do N\u00f3 como interador, os seguintes c\u00f3digos podem ser escritos, permitindo navegar e manipular a estrutura sem precisar lidar com a implementa\u00e7\u00e3o interna dela.\n\n```go\nvar llist LList = NewLList()\n\n// Adicionando valores na lista\nfor i := range 10 {\n    llist.PushBack(i)\n}\n\n// Iterando sobre a lista\nfor node := llist.Front(); node != nil; node = node.Next() {\n    fmt.Println(node.Value)\n}\n\n// Iterando de tr\u00e1s pra frente\nfor node := llist.Back(); node != nil; node = node.Prev() {\n    fmt.Println(node.Value)\n}\n\n// Busca de um n\u00f3\nnode := llist.Search(3)\nif node != nil {\n    fmt.Println(\"Encontrado:\", node.Value)\n} else {\n    fmt.Println(\"N\u00e3o encontrado\")\n}\n\n// Removendo todos os n\u00f3s impares\nfor node := llist.Front(); node != nil; { // come\u00e7a do primeiro n\u00f3\n    if node.Value%2 == 1 {                // se o valor for impar\n        node = llist.remove(node)         // remove o n\u00f3 e retorna o pr\u00f3ximo n\u00f3\n    } else {                              // se o valor for par\n        node = node.Next()                // apenas avan\u00e7a para o pr\u00f3ximo n\u00f3\n    }\n}\n\n```\n\n## Diagrama de Implementa\u00e7\u00e3o\n\n```go\nclass Node {\n    Value int    // Valor \u00e9 p\u00fablico\n    next *Node   // o pr\u00f3ximo n\u00f3 da lista\n    prev *Node   // o n\u00f3 anterior\n\n    root *Node   // aponta para o n\u00f3 sentinela da lista da qual ele faz parte\n    Next() *Node // retorna o pr\u00f3ximo n\u00f3 ou nulo, se o pr\u00f3ximo \u00e9 o root\n    Prev() *Node // retorna o n\u00f3 anterior ou nulo, se o anterior \u00e9 o root\n}\n\nclass LList {\n    root * Node                   // N\u00f3 sentinela que marca o come\u00e7o e o fim da lista\n    size int                      // tamanho da lista\n    Size()                        // retorna o tamanho da lista\n    Clear()                       // apaga todos os n\u00f3s da lista\n    PushFront(value int)          // adiciona um novo n\u00f3 com esse valor no in\u00edcio da lista\n    PushBack(value int)           // adiciona um novo n\u00f3 com esse valor no fim da lista\n    PopFront()                    // remove o primeiro valor da lista se existir\n    PopBack()                     // remove o \u00faltimo valor da lista se existir\n    Front() *Node                 // retorna o primeiro n\u00f3 v\u00e1lido da lista ou nulo\n    Back() *Node                  // retorna o \u00faltimo n\u00f3 v\u00e1lido da lista ou nulo\n    Search(value int) *Node       // retorna o n\u00f3 que cont\u00e9m a primeira ocorr\u00eancia desse valor ou nulo\n    Insert(node *Node, value int) // insere um novo n\u00f3 antes do n\u00f3 passado por refer\u00eancia\n    Remove(node *Node) *Node      // remove o n\u00f3 passado por refer\u00eancia retornando o n\u00f3 que ficou no lugar dele\n}\n```\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n// \tll := NewLList()\n\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\tfmt.Println(line)\n\t\targs := strings.Fields(line)\n\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := args[0]\n\n\t\tswitch cmd {\n\t\tcase \"show\":\n\t\t\t// fmt.Println(ll.String())\n\t\tcase \"size\":\n\t\t\t// fmt.Println(ll.Size())\n\t\tcase \"push_back\":\n\t\t\t// for _, v := range args[1:] {\n\t\t\t// \tnum, _ := strconv.Atoi(v)\n\t\t\t// \tll.PushBack(num)\n\t\t\t// }\n\t\tcase \"push_front\":\n\t\t\t// for _, v := range args[1:] {\n\t\t\t// \tnum, _ := strconv.Atoi(v)\n\t\t\t// \tll.PushFront(num)\n\t\t\t// }\n\t\tcase \"pop_back\":\n\t\t\t// ll.PopBack()\n\t\tcase \"pop_front\":\n\t\t\t// ll.PopFront()\n\t\tcase \"clear\":\n\t\t\t// ll.Clear()\n\t\tcase \"walk\":\n\t\t\t// fmt.Print(\"[ \")\n\t\t\t// for node := ll.Front(); node != nil; node = node.Next() {\n\t\t\t// \tfmt.Printf(\"%v \", node.Value)\n\t\t\t// }\n\t\t\t// fmt.Print(\"]\\n[ \")\n\t\t\t// for node := ll.Back(); node != nil; node = node.Prev() {\n\t\t\t// \tfmt.Printf(\"%v \", node.Value)\n\t\t\t// }\n\t\t\t// fmt.Println(\"]\")\n\t\tcase \"replace\":\n\t\t\t// oldvalue, _ := strconv.Atoi(args[1])\n\t\t\t// newvalue, _ := strconv.Atoi(args[2])\n\t\t\t// node := ll.Search(oldvalue)\n\t\t\t// if node != nil {\n\t\t\t// \tnode.Value = newvalue\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"fail: not found\")\n\t\t\t// }\n\t\tcase \"insert\":\n\t\t\t// oldvalue, _ := strconv.Atoi(args[1])\n\t\t\t// newvalue, _ := strconv.Atoi(args[2])\n\t\t\t// node := ll.Search(oldvalue)\n\t\t\t// if node != nil {\n\t\t\t// \tll.Insert(node, newvalue)\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"fail: not found\")\n\t\t\t// }\n\t\tcase \"remove\":\n\t\t\t// oldvalue, _ := strconv.Atoi(args[1])\n\t\t\t// node := ll.Search(oldvalue)\n\t\t\t// if node != nil {\n\t\t\t// \tll.Remove(node)\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"fail: not found\")\n\t\t\t// }\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
