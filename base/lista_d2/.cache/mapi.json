{
    "title": "@lista_d2: Lista Dupla com N\u00f3 Iterador",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@lista_d2: Lista Dupla com N\u00f3 Iterador</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"lista-dupla-com-n\u00f3-iterador\">Lista Dupla com N\u00f3 Iterador</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<h2 id=\"intro\">Intro</h2>\n<p>Todas as linguagens implementam algum modelo de abstra\u00e7\u00e3o para\nfacilitar o percorrimentos das diversas estruturas de dados\nimplementadas. Alguns utilizam o modelo de for range, que permite\npercorrer qualquer cole\u00e7\u00e3o de dados, como listas, dicion\u00e1rios, etc. Esse\nmodelo \u00e9 mais simples e f\u00e1cil de usar, mas n\u00e3o \u00e9 t\u00e3o flex\u00edvel quanto o\nmodelo de iterador, por n\u00e3o permitir escolher o ponto de partida e o\nponto de parada do loop.</p>\n<p>Exemplos de for range:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Java</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> <span class=\"op\">(</span><span class=\"dt\">int</span> i <span class=\"op\">:</span> list<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">System</span><span class=\"op\">.</span><span class=\"fu\">out</span><span class=\"op\">.</span><span class=\"fu\">println</span><span class=\"op\">(</span>i<span class=\"op\">);</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre\nclass=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># Python</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">list</span>:</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(i)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb3\"><pre\nclass=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// C++</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> <span class=\"op\">(</span><span class=\"dt\">int</span> i <span class=\"op\">:</span> list<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    cout <span class=\"op\">&lt;&lt;</span> i <span class=\"op\">&lt;&lt;</span> endl<span class=\"op\">;</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>Tamb\u00e9m existe o modelo de iterador:</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre\nclass=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Java</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">var</span> it <span class=\"op\">=</span> list<span class=\"op\">.</span><span class=\"fu\">iterator</span><span class=\"op\">();</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">while</span> <span class=\"op\">(</span>it<span class=\"op\">.</span><span class=\"fu\">hasNext</span><span class=\"op\">())</span> <span class=\"op\">{</span></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">System</span><span class=\"op\">.</span><span class=\"fu\">out</span><span class=\"op\">.</span><span class=\"fu\">println</span><span class=\"op\">(</span>it<span class=\"op\">.</span><span class=\"fu\">next</span><span class=\"op\">());</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb5\"><pre\nclass=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// C++</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> <span class=\"op\">(</span><span class=\"kw\">auto</span> it <span class=\"op\">=</span> list<span class=\"op\">.</span>begin<span class=\"op\">();</span> it <span class=\"op\">!=</span> list<span class=\"op\">.</span>end<span class=\"op\">();</span> <span class=\"op\">++</span>it<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">std::</span>cout <span class=\"op\">&lt;&lt;</span> <span class=\"op\">*</span>it <span class=\"op\">&lt;&lt;</span> <span class=\"bu\">std::</span>endl<span class=\"op\">;</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Go</span></span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>lista <span class=\"op\">:=</span> list<span class=\"op\">.</span>New<span class=\"op\">()</span></span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> e <span class=\"op\">:=</span> lista<span class=\"op\">.</span>Front<span class=\"op\">();</span> e <span class=\"op\">!=</span> <span class=\"ot\">nil</span><span class=\"op\">;</span> e <span class=\"op\">=</span> e<span class=\"op\">.</span>Next<span class=\"op\">()</span> <span class=\"op\">{</span></span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    fmt<span class=\"op\">.</span>Println<span class=\"op\">(</span>e<span class=\"op\">.</span>Value<span class=\"op\">)</span></span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<h2 id=\"guide\">Guide</h2>\n<p>Vamos partir do c\u00f3digo da atividade anterior, a <span\nclass=\"citation\" data-cites=\"lista_d1\">@lista_d1</span>, e implementar\num modelo de iterador para deixar nossa lista mais us\u00e1vel. O resultado\nfinal dessa estrutura de dados deve ser algo parecido o c\u00f3digo de\npercorrimento para Go usando o modelo de iterador.</p>\n<ul>\n<li>Para isso, vamos mudar a estrutura do N\u00f3 para que ele se comporte\ncomo iterador.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode ts\"><code class=\"sourceCode typescript\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> <span class=\"bu\">Node</span> {</span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">-</span> value<span class=\"op\">:</span> int        <span class=\"co\">// Valor \u00e9 p\u00fablico</span></span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">-</span> next<span class=\"op\">:</span> <span class=\"op\">*</span><span class=\"bu\">Node</span>       <span class=\"co\">// o pr\u00f3ximo n\u00f3 da lista</span></span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">-</span> prev<span class=\"op\">:</span> <span class=\"op\">*</span><span class=\"bu\">Node</span>       <span class=\"co\">// o n\u00f3 anterior</span></span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">-</span> root<span class=\"op\">:</span> <span class=\"op\">*</span><span class=\"bu\">Node</span>       <span class=\"co\">// aponta para o n\u00f3 sentinela da lista da qual ele faz parte</span></span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+</span> <span class=\"fu\">Next</span>()<span class=\"op\">:</span> <span class=\"op\">*</span><span class=\"bu\">Node</span>     <span class=\"co\">// retorna o pr\u00f3ximo n\u00f3 ou nulo, se o pr\u00f3ximo \u00e9 o root</span></span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+</span> <span class=\"fu\">Prev</span>()<span class=\"op\">:</span> <span class=\"op\">*</span><span class=\"bu\">Node</span>     <span class=\"co\">// retorna o n\u00f3 anterior ou nulo, se o anterior \u00e9 o root</span></span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>}    </span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb7-10\"><a href=\"#cb7-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> LList {</span>\n<span id=\"cb7-11\"><a href=\"#cb7-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">-</span> root<span class=\"op\">:</span> <span class=\"op\">*</span> <span class=\"bu\">Node</span>                  <span class=\"co\">// N\u00f3 sentinela que marca o come\u00e7o e o fim da lista</span></span>\n<span id=\"cb7-12\"><a href=\"#cb7-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">-</span> size<span class=\"op\">:</span> int                     <span class=\"co\">// tamanho da lista</span></span>\n<span id=\"cb7-13\"><a href=\"#cb7-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+</span> <span class=\"fu\">Size</span>()                        <span class=\"co\">// retorna o tamanho da lista</span></span>\n<span id=\"cb7-14\"><a href=\"#cb7-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+</span> <span class=\"fu\">Clear</span>()                       <span class=\"co\">// apaga todos os n\u00f3s da lista</span></span>\n<span id=\"cb7-15\"><a href=\"#cb7-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+</span> <span class=\"fu\">PushFront</span>(value int)          <span class=\"co\">// adiciona um novo n\u00f3 com esse valor no in\u00edcio da lista</span></span>\n<span id=\"cb7-16\"><a href=\"#cb7-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+</span> <span class=\"fu\">PushBack</span>(value int)           <span class=\"co\">// adiciona um novo n\u00f3 com esse valor no fim da lista</span></span>\n<span id=\"cb7-17\"><a href=\"#cb7-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+</span> <span class=\"fu\">PopFront</span>()                    <span class=\"co\">// remove o primeiro valor da lista se existir</span></span>\n<span id=\"cb7-18\"><a href=\"#cb7-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+</span> <span class=\"fu\">PopBack</span>()                     <span class=\"co\">// remove o \u00faltimo valor da lista se existir</span></span>\n<span id=\"cb7-19\"><a href=\"#cb7-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">// novos m\u00e9todos</span></span>\n<span id=\"cb7-20\"><a href=\"#cb7-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+</span> <span class=\"fu\">Front</span>()<span class=\"op\">:</span> <span class=\"op\">*</span><span class=\"bu\">Node</span>                 <span class=\"co\">// retorna o primeiro n\u00f3 v\u00e1lido da lista ou nulo</span></span>\n<span id=\"cb7-21\"><a href=\"#cb7-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+</span> <span class=\"fu\">Back</span>()<span class=\"op\">:</span> <span class=\"op\">*</span><span class=\"bu\">Node</span>                  <span class=\"co\">// retorna o \u00faltimo n\u00f3 v\u00e1lido da lista ou nulo</span></span>\n<span id=\"cb7-22\"><a href=\"#cb7-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+</span> <span class=\"fu\">Search</span>(value int)<span class=\"op\">:</span> <span class=\"op\">*</span><span class=\"bu\">Node</span>       <span class=\"co\">// retorna o n\u00f3 que cont\u00e9m a primeira ocorr\u00eancia desse valor ou nulo</span></span>\n<span id=\"cb7-23\"><a href=\"#cb7-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+</span> <span class=\"fu\">Insert</span>(node <span class=\"op\">*</span><span class=\"bu\">Node</span><span class=\"op\">,</span> value int)  <span class=\"co\">// insere um novo n\u00f3 antes do n\u00f3 passado por refer\u00eancia</span></span>\n<span id=\"cb7-24\"><a href=\"#cb7-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+</span> <span class=\"fu\">Remove</span>(node <span class=\"op\">*</span><span class=\"bu\">Node</span>)<span class=\"op\">:</span> <span class=\"op\">*</span><span class=\"bu\">Node</span>      <span class=\"co\">// remove o n\u00f3 passado por refer\u00eancia retornando o n\u00f3 que ficou no lugar dele ou nulo</span></span>\n<span id=\"cb7-25\"><a href=\"#cb7-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                     <span class=\"co\">// caso o n\u00f3 n\u00e3o exista ou o pr\u00f3ximo seja o \u00faltimo</span></span>\n<span id=\"cb7-26\"><a href=\"#cb7-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span></code></pre></div>\n<p>Perceba que implementando assim, escondemos o root para quem utiliza\na lista, dando a impress\u00e3o que os limites dela apontam para nulo.</p>\n<h2 id=\"shell\">Shell</h2>\n<div class=\"sourceCode\" id=\"cb8\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb8-1\"><a href=\"#cb8-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE push_back &lt;value ...&gt;</span></span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4</span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4]</span>\n<span id=\"cb8-5\"><a href=\"#cb8-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4</span>\n<span id=\"cb8-6\"><a href=\"#cb8-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb8-7\"><a href=\"#cb8-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 1, 2, 3, 4]</span>\n<span id=\"cb8-8\"><a href=\"#cb8-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_front</span> 0 3</span>\n<span id=\"cb8-9\"><a href=\"#cb8-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb8-10\"><a href=\"#cb8-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[3,</span> 0, 1, 2, 3, 4, 1, 2, 3, 4]</span>\n<span id=\"cb8-11\"><a href=\"#cb8-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<p>Percorrendo a lista usando front e back at\u00e9 o fim</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE walking</span></span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4 5 6</span>\n<span id=\"cb9-3\"><a href=\"#cb9-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$walk</span></span>\n<span id=\"cb9-4\"><a href=\"#cb9-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">[</span> 1 2 3 <span class=\"er\">4</span> <span class=\"ex\">5</span> 6 ]</span>\n<span id=\"cb9-5\"><a href=\"#cb9-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">[</span> 6 5 4 <span class=\"er\">3</span> <span class=\"ex\">2</span> 1 ]</span>\n<span id=\"cb9-6\"><a href=\"#cb9-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$clear</span></span>\n<span id=\"cb9-7\"><a href=\"#cb9-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$walk</span></span>\n<span id=\"cb9-8\"><a href=\"#cb9-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">[</span> <span class=\"bu\">]</span></span>\n<span id=\"cb9-9\"><a href=\"#cb9-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">[</span> <span class=\"bu\">]</span></span>\n<span id=\"cb9-10\"><a href=\"#cb9-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<p>Para executar a inser\u00e7\u00e3o e remo\u00e7\u00e3o de n\u00f3s, vamos usar o comando\n<code>search</code> para encontrar o n\u00f3 que queremos manipular. E depois\nusar o comando <code>replace</code>, <code>insert</code> ou\n<code>remove</code> para fazer a opera\u00e7\u00e3o desejada.</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb10-1\"><a href=\"#cb10-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE search and replace</span></span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># replace &lt;value_to_search&gt; &lt;value_to_replace&gt;</span></span>\n<span id=\"cb10-3\"><a href=\"#cb10-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4 5</span>\n<span id=\"cb10-4\"><a href=\"#cb10-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$replace</span> 3 9</span>\n<span id=\"cb10-5\"><a href=\"#cb10-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb10-6\"><a href=\"#cb10-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 9, 4, 5]</span>\n<span id=\"cb10-7\"><a href=\"#cb10-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$replace</span> 1 8</span>\n<span id=\"cb10-8\"><a href=\"#cb10-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb10-9\"><a href=\"#cb10-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[8,</span> 2, 9, 4, 5]</span>\n<span id=\"cb10-10\"><a href=\"#cb10-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$replace</span> 3 7</span>\n<span id=\"cb10-11\"><a href=\"#cb10-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">fail:</span> not found</span>\n<span id=\"cb10-12\"><a href=\"#cb10-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb10-13\"><a href=\"#cb10-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[8,</span> 2, 9, 4, 5]</span>\n<span id=\"cb10-14\"><a href=\"#cb10-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb11\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE search and insert</span></span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># insert &lt;value_to_search&gt; &lt;value_to_insert_before&gt;</span></span>\n<span id=\"cb11-3\"><a href=\"#cb11-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4 5</span>\n<span id=\"cb11-4\"><a href=\"#cb11-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb11-5\"><a href=\"#cb11-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 5]</span>\n<span id=\"cb11-6\"><a href=\"#cb11-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 3 9</span>\n<span id=\"cb11-7\"><a href=\"#cb11-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb11-8\"><a href=\"#cb11-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 9, 3, 4, 5]</span>\n<span id=\"cb11-9\"><a href=\"#cb11-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 1 8</span>\n<span id=\"cb11-10\"><a href=\"#cb11-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb11-11\"><a href=\"#cb11-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[8,</span> 1, 2, 9, 3, 4, 5]</span>\n<span id=\"cb11-12\"><a href=\"#cb11-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 5 7</span>\n<span id=\"cb11-13\"><a href=\"#cb11-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb11-14\"><a href=\"#cb11-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[8,</span> 1, 2, 9, 3, 4, 7, 5]</span>\n<span id=\"cb11-15\"><a href=\"#cb11-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 7 6</span>\n<span id=\"cb11-16\"><a href=\"#cb11-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb11-17\"><a href=\"#cb11-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[8,</span> 1, 2, 9, 3, 4, 6, 7, 5]</span>\n<span id=\"cb11-18\"><a href=\"#cb11-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 1 7</span>\n<span id=\"cb11-19\"><a href=\"#cb11-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb11-20\"><a href=\"#cb11-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[8,</span> 7, 1, 2, 9, 3, 4, 6, 7, 5]</span>\n<span id=\"cb11-21\"><a href=\"#cb11-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 10 7</span>\n<span id=\"cb11-22\"><a href=\"#cb11-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">fail:</span> not found</span>\n<span id=\"cb11-23\"><a href=\"#cb11-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb11-24\"><a href=\"#cb11-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[8,</span> 7, 1, 2, 9, 3, 4, 6, 7, 5]</span>\n<span id=\"cb11-25\"><a href=\"#cb11-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb12\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb12-1\"><a href=\"#cb12-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE search and remove</span></span>\n<span id=\"cb12-2\"><a href=\"#cb12-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># remove &lt;value_to_search&gt;</span></span>\n<span id=\"cb12-3\"><a href=\"#cb12-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4 5</span>\n<span id=\"cb12-4\"><a href=\"#cb12-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb12-5\"><a href=\"#cb12-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 5]</span>\n<span id=\"cb12-6\"><a href=\"#cb12-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$remove</span> 3</span>\n<span id=\"cb12-7\"><a href=\"#cb12-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb12-8\"><a href=\"#cb12-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 4, 5]</span>\n<span id=\"cb12-9\"><a href=\"#cb12-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$remove</span> 1</span>\n<span id=\"cb12-10\"><a href=\"#cb12-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb12-11\"><a href=\"#cb12-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[2,</span> 4, 5]</span>\n<span id=\"cb12-12\"><a href=\"#cb12-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$remove</span> 7</span>\n<span id=\"cb12-13\"><a href=\"#cb12-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">fail:</span> not found</span>\n<span id=\"cb12-14\"><a href=\"#cb12-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb12-15\"><a href=\"#cb12-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[2,</span> 4, 5]</span>\n<span id=\"cb12-16\"><a href=\"#cb12-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT push_back <value ...>\npush_back 1 2 3 4\nshow\npush_back 1 2 3 4\nshow\npush_front 0 3\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4]\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4, 1, 2, 3, 4]\n$push_front 0 3\n$show\n[3, 0, 1, 2, 3, 4, 1, 2, 3, 4]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT walking\npush_back 1 2 3 4 5 6\nwalk\nclear\nwalk\nend\n======== EXPECT\n$push_back 1 2 3 4 5 6\n$walk\n[ 1 2 3 4 5 6 ]\n[ 6 5 4 3 2 1 ]\n$clear\n$walk\n[ ]\n[ ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT search and replace\npush_back 1 2 3 4 5\nreplace 3 9\nshow\nreplace 1 8\nshow\nreplace 3 7\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4 5\n$replace 3 9\n$show\n[1, 2, 9, 4, 5]\n$replace 1 8\n$show\n[8, 2, 9, 4, 5]\n$replace 3 7\nfail: not found\n$show\n[8, 2, 9, 4, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT search and insert\npush_back 1 2 3 4 5\nshow\ninsert 3 9\nshow\ninsert 1 8\nshow\ninsert 5 7\nshow\ninsert 7 6\nshow\ninsert 1 7\nshow\ninsert 10 7\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$insert 3 9\n$show\n[1, 2, 9, 3, 4, 5]\n$insert 1 8\n$show\n[8, 1, 2, 9, 3, 4, 5]\n$insert 5 7\n$show\n[8, 1, 2, 9, 3, 4, 7, 5]\n$insert 7 6\n$show\n[8, 1, 2, 9, 3, 4, 6, 7, 5]\n$insert 1 7\n$show\n[8, 7, 1, 2, 9, 3, 4, 6, 7, 5]\n$insert 10 7\nfail: not found\n$show\n[8, 7, 1, 2, 9, 3, 4, 6, 7, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT search and remove\npush_back 1 2 3 4 5\nshow\nremove 3\nshow\nremove 1\nshow\nremove 7\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$remove 3\n$show\n[1, 2, 4, 5]\n$remove 1\n$show\n[2, 4, 5]\n$remove 7\nfail: not found\n$show\n[2, 4, 5]\n$end\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# extra\n\nCom a implementa\u00e7\u00e3o do N\u00f3 como interador, os seguintes c\u00f3digos podem ser escritos, permitindo navegar e manipular a estrutura sem precisar lidar com a implementa\u00e7\u00e3o interna dela.\n\n```go\nvar llist LList = NewLList()\n\n// Adicionando valores na lista\nfor i := range 10 {\n    llist.PushBack(i)\n}\n\n// Iterando sobre a lista\nfor node := llist.Front(); node != nil; node = node.Next() {\n    fmt.Println(node.Value)\n}\n\n// Iterando de tr\u00e1s pra frente\nfor node := llist.Back(); node != nil; node = node.Prev() {\n    fmt.Println(node.Value)\n}\n\n// Busca de um n\u00f3\nnode := llist.Search(3)\nif node != nil {\n    fmt.Println(\"Encontrado:\", node.Value)\n} else {\n    fmt.Println(\"N\u00e3o encontrado\")\n}\n\n// Removendo todos os n\u00f3s impares\nfor node := llist.Front(); node != nil; { // come\u00e7a do primeiro n\u00f3\n    if node.Value%2 == 1 {                // se o valor for impar\n        node = llist.remove(node)         // remove o n\u00f3 e retorna o pr\u00f3ximo n\u00f3\n    } else {                              // se o valor for par\n        node = node.Next()                // apenas avan\u00e7a para o pr\u00f3ximo n\u00f3\n    }\n}\n\n```\n\n## Diagrama de Implementa\u00e7\u00e3o\n\n```go\nclass Node {\n    Value int    // Valor \u00e9 p\u00fablico\n    next *Node   // o pr\u00f3ximo n\u00f3 da lista\n    prev *Node   // o n\u00f3 anterior\n\n    root *Node   // aponta para o n\u00f3 sentinela da lista da qual ele faz parte\n    Next() *Node // retorna o pr\u00f3ximo n\u00f3 ou nulo, se o pr\u00f3ximo \u00e9 o root\n    Prev() *Node // retorna o n\u00f3 anterior ou nulo, se o anterior \u00e9 o root\n}\n\nclass LList {\n    root * Node                   // N\u00f3 sentinela que marca o come\u00e7o e o fim da lista\n    size int                      // tamanho da lista\n    Size()                        // retorna o tamanho da lista\n    Clear()                       // apaga todos os n\u00f3s da lista\n    PushFront(value int)          // adiciona um novo n\u00f3 com esse valor no in\u00edcio da lista\n    PushBack(value int)           // adiciona um novo n\u00f3 com esse valor no fim da lista\n    PopFront()                    // remove o primeiro valor da lista se existir\n    PopBack()                     // remove o \u00faltimo valor da lista se existir\n    Front() *Node                 // retorna o primeiro n\u00f3 v\u00e1lido da lista ou nulo\n    Back() *Node                  // retorna o \u00faltimo n\u00f3 v\u00e1lido da lista ou nulo\n    Search(value int) *Node       // retorna o n\u00f3 que cont\u00e9m a primeira ocorr\u00eancia desse valor ou nulo\n    Insert(node *Node, value int) // insere um novo n\u00f3 antes do n\u00f3 passado por refer\u00eancia\n    Remove(node *Node) *Node      // remove o n\u00f3 passado por refer\u00eancia retornando o n\u00f3 que ficou no lugar dele\n}\n```\n",
                "encoding": 0
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\ntype Node struct {\n\tValue int\n\tnext  *Node\n\tprev  *Node\n\troot  *Node\n}\n\nfunc (n *Node) Next() *Node {\n\tif n.next == nil || n.next == n.root {\n\t\treturn nil\n\t}\n\treturn n.next\n}\n\nfunc (n *Node) Prev() *Node {\n\tif n.prev == nil || n.prev == n.root {\n\t\treturn nil\n\t}\n\treturn n.prev\n}\n\ntype LList struct {\n\troot *Node\n\tsize int\n}\n\nfunc NewLList() *LList {\n\tlist := &LList{size: 0}\n\tlist.root = &Node{root: nil}\n\tlist.root.next = list.root\n\tlist.root.prev = list.root\n\tlist.root.root = list.root // n\u00f3 sentinela aponta pra si mesmo\n\treturn list\n}\n\nfunc (l *LList) Size() int {\n\treturn l.size\n}\n\nfunc (l *LList) Clear() {\n\tl.root.next = l.root\n\tl.root.prev = l.root\n\tl.size = 0\n}\n\nfunc (l *LList) PushFront(value int) {\n\tl.insertAfter(l.root, value)\n}\n\nfunc (l *LList) PushBack(value int) {\n\tl.insertBefore(l.root, value)\n}\n\nfunc (l *LList) PopFront() {\n\tif l.size > 0 {\n\t\tl.Remove(l.root.next)\n\t}\n}\n\nfunc (l *LList) PopBack() {\n\tif l.size > 0 {\n\t\tl.Remove(l.root.prev)\n\t}\n}\n\nfunc (l *LList) Front() *Node {\n\tif l.size == 0 {\n\t\treturn nil\n\t}\n\treturn l.root.next\n}\n\nfunc (l *LList) Back() *Node {\n\tif l.size == 0 {\n\t\treturn nil\n\t}\n\treturn l.root.prev\n}\n\nfunc (l *LList) Search(value int) *Node {\n\tfor n := l.root.next; n != l.root; n = n.next {\n\t\tif n.Value == value {\n\t\t\treturn n\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (l *LList) Insert(node *Node, value int) {\n\tif node == nil || node.root != l.root {\n\t\treturn\n\t}\n\tl.insertBefore(node, value)\n}\n\nfunc (l *LList) Remove(node *Node) *Node {\n\tif node == nil || node == l.root || node.root != l.root {\n\t\treturn nil\n\t}\n\tnode.prev.next = node.next\n\tnode.next.prev = node.prev\n\tnext := node.next\n\tl.size--\n\treturn next\n}\n\nfunc (l *LList) insertBefore(mark *Node, value int) {\n\tn := &Node{\n\t\tValue: value,\n\t\troot:  l.root,\n\t}\n\tn.prev = mark.prev\n\tn.next = mark\n\tmark.prev.next = n\n\tmark.prev = n\n\tl.size++\n}\n\nfunc (l *LList) insertAfter(mark *Node, value int) {\n\tn := &Node{\n\t\tValue: value,\n\t\troot:  l.root,\n\t}\n\tn.next = mark.next\n\tn.prev = mark\n\tmark.next.prev = n\n\tmark.next = n\n\tl.size++\n}\n\nfunc (l *LList) String() string {\n\tvalues := []string{}\n\tn := l.root.next\n\tfor n != l.root {\n\t\tvalues = append(values, fmt.Sprint(n.Value))\n\t\tn = n.next\n\t}\n\treturn \"[\" + strings.Join(values, \", \") + \"]\"\n}\n\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n// \tll := NewLList()\n\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\tfmt.Println(line)\n\t\targs := strings.Fields(line)\n\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := args[0]\n\n\t\tswitch cmd {\n\t\tcase \"show\":\n\t\t\t// fmt.Println(ll.String())\n\t\tcase \"size\":\n\t\t\t// fmt.Println(ll.Size())\n\t\tcase \"push_back\":\n\t\t\t// for _, v := range args[1:] {\n\t\t\t// \tnum, _ := strconv.Atoi(v)\n\t\t\t// \tll.PushBack(num)\n\t\t\t// }\n\t\tcase \"push_front\":\n\t\t\t// for _, v := range args[1:] {\n\t\t\t// \tnum, _ := strconv.Atoi(v)\n\t\t\t// \tll.PushFront(num)\n\t\t\t// }\n\t\tcase \"pop_back\":\n\t\t\t// ll.PopBack()\n\t\tcase \"pop_front\":\n\t\t\t// ll.PopFront()\n\t\tcase \"clear\":\n\t\t\t// ll.Clear()\n\t\tcase \"walk\":\n\t\t\t// fmt.Print(\"[ \")\n\t\t\t// for node := ll.Front(); node != nil; node = node.Next() {\n\t\t\t// \tfmt.Printf(\"%v \", node.Value)\n\t\t\t// }\n\t\t\t// fmt.Print(\"]\\n[ \")\n\t\t\t// for node := ll.Back(); node != nil; node = node.Prev() {\n\t\t\t// \tfmt.Printf(\"%v \", node.Value)\n\t\t\t// }\n\t\t\t// fmt.Println(\"]\")\n\t\tcase \"replace\":\n\t\t\t// oldvalue, _ := strconv.Atoi(args[1])\n\t\t\t// newvalue, _ := strconv.Atoi(args[2])\n\t\t\t// node := ll.Search(oldvalue)\n\t\t\t// if node != nil {\n\t\t\t// \tnode.Value = newvalue\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"fail: not found\")\n\t\t\t// }\n\t\tcase \"insert\":\n\t\t\t// oldvalue, _ := strconv.Atoi(args[1])\n\t\t\t// newvalue, _ := strconv.Atoi(args[2])\n\t\t\t// node := ll.Search(oldvalue)\n\t\t\t// if node != nil {\n\t\t\t// \tll.Insert(node, newvalue)\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"fail: not found\")\n\t\t\t// }\n\t\tcase \"remove\":\n\t\t\t// oldvalue, _ := strconv.Atoi(args[1])\n\t\t\t// node := ll.Search(oldvalue)\n\t\t\t// if node != nil {\n\t\t\t// \tll.Remove(node)\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"fail: not found\")\n\t\t\t// }\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "encoding": 0
            }
        ]
    }
}
