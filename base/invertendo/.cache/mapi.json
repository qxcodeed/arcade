{
    "title": "@invertendo: Invers\u00e3o usando next e previous",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@invertendo: Invers\u00e3o usando next e previous</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@invertendo: Invers\u00e3o usando next e previous</h1>\n            <h1 id=\"inversao-usando-next-e-previous\">Invers\u00e3o usando next e previous</h1>\n<p>Receba o n\u00f3 cabe\u00e7a de uma lista duplamente encadeada, e inverta a rela\u00e7\u00e3o entre os n\u00f3s atrav\u00e9s de seus ponteiros 'next' e 'previous'.</p>\n<h2 id=\"entrada\">Entrada</h2>\n<ul>\n<li>Ponteiro para n\u00f3 cabe\u00e7a 'head'</li>\n</ul>\n<h2 id=\"saida\">Sa\u00edda</h2>\n<ul>\n<li>N\u00e3o h\u00e1 retorno. a lista deve estar invertida no final da fun\u00e7\u00e3o.</li>\n</ul>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste 2\n1\n100 \n======== EXPECT\nPilha: [ 100 ]\ninvert\nPilha: [ 100 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 3\n6\n1 2 3 4 5 6\n======== EXPECT\nPilha: [ 1 2 3 4 5 6 ]\ninvert\nPilha: [ 6 5 4 3 2 1 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 4\n100\n23 73 56 20 93 81 9 18 57 16 55 84 49 15 22 76 4 48 19 67 78 40 35 17 24 33 94 47 86 45 98 27 43 64 79 7 37 75 92 89 87 85 34 60 8 46 72 95 2 61 54 11 90 59 99 91 65 38 71 63 13 30 39 100 28 69 26 32 5 14 21 31 68 1 36 62 53 66 97 42 58 74 77 51 10 44 80 12 3 50 83 25 70 82 41 96 6 88 29 52\n======== EXPECT\nPilha: [ 23 73 56 20 93 81 9 18 57 16 55 84 49 15 22 76 4 48 19 67 78 40 35 17 24 33 94 47 86 45 98 27 43 64 79 7 37 75 92 89 87 85 34 60 8 46 72 95 2 61 54 11 90 59 99 91 65 38 71 63 13 30 39 100 28 69 26 32 5 14 21 31 68 1 36 62 53 66 97 42 58 74 77 51 10 44 80 12 3 50 83 25 70 82 41 96 6 88 29 52 ]\ninvert\nPilha: [ 52 29 88 6 96 41 82 70 25 83 50 3 12 80 44 10 51 77 74 58 42 97 66 53 62 36 1 68 31 21 14 5 32 26 69 28 100 39 30 13 63 71 38 65 91 99 59 90 11 54 61 2 95 72 46 8 60 34 85 87 89 92 75 37 7 79 64 43 27 98 45 86 47 94 33 24 17 35 40 78 67 19 48 4 76 22 15 49 84 55 16 57 18 9 81 93 20 56 73 23 ]\n\n=======\nInput= main\nOutput=[ azul branco cinza dourado escarlate ]\n[ escarlate dourado cinza branco azul ]\n[ azul branco cinza dourado escarlate ]\n[ escarlate dourado cinza branco azul ]\n>>>>>>> origin/sequencial-encadeada\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 1\n main\n======== EXPECT\n[ azul branco cinza dourado escarlate ]\n[ escarlate dourado cinza branco azul ]\n[ azul branco cinza dourado escarlate ]\n[ escarlate dourado cinza branco azul ]\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao //\n// Altere somente as funcoes com TODO //\n\n#include <iostream>\n\nstruct Node {\n    std::string info; // Informacao salva pelo usuario na lista\n    Node *next; // Ponteiro para o proximo elemento da lista\n    Node *previous; // Ponteiro para o elemento anterior da lista\n\n    Node(std::string info, Node *next, Node *previous){\n        this->info = info;\n        this->next = next;\n        this->previous = previous;\n    };\n};\n\nvoid printNodes(Node* head){\n    std::cout << \"[ \";\n    Node* temp = head;\n    while(temp != nullptr){\n        std::cout << temp->info << \" \";\n        temp = temp->next;\n    }\n    std::cout << \"]\" << std::endl;\n}\n\n// Altere essa funcao.\n// Inverte a ordem dos elementos de uma lista, alterando\n// os valores de 'next' e 'previous' de cada No.\nvoid invert(Node* head){\n    // TODO\n    (void) head;\n}\n// Exemplo:\n// L == \"1\" <-> \"2\" <-> \"4\" <-> \"8\" <-> \"16\"\n// invert(L)\n// L == \"16\" <-> \"8\" <-> \"4\" <-> \"2\" <-> \"1\"\n\nint main(){\n    /*    TESTE 1   */\n    Node *node1 = new Node(\"azul\", nullptr, nullptr);\n    Node *node2 = new Node(\"branco\", nullptr, nullptr);\n    Node *node3 = new Node(\"cinza\", nullptr, nullptr);\n    Node *node4 = new Node(\"dourado\", nullptr, nullptr);\n    Node *node5 = new Node(\"escarlate\", nullptr, nullptr);\n\n    node1->next = node2;\n    node2->next = node3;\n    node3->next = node4;\n    node4->next = node5;\n\n    node2->previous = node1;\n    node3->previous = node2;\n    node4->previous = node3;\n    node5->previous = node4;\n\n    printNodes(node1);\n    invert(node1);\n    printNodes(node5);\n    invert(node5);\n    printNodes(node1);\n    invert(node1);\n    printNodes(node5);\n}\n",
                "encoding": 0
            }
        ]
    }
}
