{
    "title": "@invertendo: Invers\u00e3o usando next e previous",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@invertendo: Invers\u00e3o usando next e previous</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Invers\u00e3o usando next e previous</h1>\n<p>Receba o n\u00f3 cabe\u00e7a de uma lista duplamente encadeada, e inverta a rela\u00e7\u00e3o entre os n\u00f3s atrav\u00e9s de seus ponteiros 'next' e 'previous'.</p>\n<h2>Entrada</h2>\n<ul>\n<li>Ponteiro para n\u00f3 cabe\u00e7a 'head'</li>\n</ul>\n<h2>Sa\u00edda</h2>\n<ul>\n<li>N\u00e3o h\u00e1 retorno. a lista deve estar invertida no final da fun\u00e7\u00e3o.</li>\n</ul>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste 2\n1\n100 \n======== EXPECT\nPilha: [ 100 ]\ninvert\nPilha: [ 100 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 3\n6\n1 2 3 4 5 6\n======== EXPECT\nPilha: [ 1 2 3 4 5 6 ]\ninvert\nPilha: [ 6 5 4 3 2 1 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 4\n100\n23 73 56 20 93 81 9 18 57 16 55 84 49 15 22 76 4 48 19 67 78 40 35 17 24 33 94 47 86 45 98 27 43 64 79 7 37 75 92 89 87 85 34 60 8 46 72 95 2 61 54 11 90 59 99 91 65 38 71 63 13 30 39 100 28 69 26 32 5 14 21 31 68 1 36 62 53 66 97 42 58 74 77 51 10 44 80 12 3 50 83 25 70 82 41 96 6 88 29 52\n======== EXPECT\nPilha: [ 23 73 56 20 93 81 9 18 57 16 55 84 49 15 22 76 4 48 19 67 78 40 35 17 24 33 94 47 86 45 98 27 43 64 79 7 37 75 92 89 87 85 34 60 8 46 72 95 2 61 54 11 90 59 99 91 65 38 71 63 13 30 39 100 28 69 26 32 5 14 21 31 68 1 36 62 53 66 97 42 58 74 77 51 10 44 80 12 3 50 83 25 70 82 41 96 6 88 29 52 ]\ninvert\nPilha: [ 52 29 88 6 96 41 82 70 25 83 50 3 12 80 44 10 51 77 74 58 42 97 66 53 62 36 1 68 31 21 14 5 32 26 69 28 100 39 30 13 63 71 38 65 91 99 59 90 11 54 61 2 95 72 46 8 60 34 85 87 89 92 75 37 7 79 64 43 27 98 45 86 47 94 33 24 17 35 40 78 67 19 48 4 76 22 15 49 84 55 16 57 18 9 81 93 20 56 73 23 ]\n\n=======\nInput= main\nOutput=[ azul branco cinza dourado escarlate ]\n[ escarlate dourado cinza branco azul ]\n[ azul branco cinza dourado escarlate ]\n[ escarlate dourado cinza branco azul ]\n>>>>>>> origin/sequencial-encadeada\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 1\n main\n======== EXPECT\n[ azul branco cinza dourado escarlate ]\n[ escarlate dourado cinza branco azul ]\n[ azul branco cinza dourado escarlate ]\n[ escarlate dourado cinza branco azul ]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao //\n// Altere somente as funcoes com TODO //\n\n#include <iostream>\n\nstruct Node {\n    std::string info; // Informacao salva pelo usuario na lista\n    Node *next; // Ponteiro para o proximo elemento da lista\n    Node *previous; // Ponteiro para o elemento anterior da lista\n\n    Node(std::string info, Node *next, Node *previous){\n        this->info = info;\n        this->next = next;\n        this->previous = previous;\n    };\n};\n\nvoid printNodes(Node* head){\n    std::cout << \"[ \";\n    Node* temp = head;\n    while(temp != nullptr){\n        std::cout << temp->info << \" \";\n        temp = temp->next;\n    }\n    std::cout << \"]\" << std::endl;\n}\n\n// Altere essa funcao.\n// Inverte a ordem dos elementos de uma lista, alterando\n// os valores de 'next' e 'previous' de cada No.\nvoid invert(Node* head){\n    // TODO\n    (void) head;\n}\n// Exemplo:\n// L == \"1\" <-> \"2\" <-> \"4\" <-> \"8\" <-> \"16\"\n// invert(L)\n// L == \"16\" <-> \"8\" <-> \"4\" <-> \"2\" <-> \"1\"\n\nint main(){\n    /*    TESTE 1   */\n    Node *node1 = new Node(\"azul\", nullptr, nullptr);\n    Node *node2 = new Node(\"branco\", nullptr, nullptr);\n    Node *node3 = new Node(\"cinza\", nullptr, nullptr);\n    Node *node4 = new Node(\"dourado\", nullptr, nullptr);\n    Node *node5 = new Node(\"escarlate\", nullptr, nullptr);\n\n    node1->next = node2;\n    node2->next = node3;\n    node3->next = node4;\n    node4->next = node5;\n\n    node2->previous = node1;\n    node3->previous = node2;\n    node4->previous = node3;\n    node5->previous = node4;\n\n    printNodes(node1);\n    invert(node1);\n    printNodes(node5);\n    invert(node5);\n    printNodes(node1);\n    invert(node1);\n    printNodes(node5);\n}\n",
                "type": "show"
            }
        ]
    }
}
