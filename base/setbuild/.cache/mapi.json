{
    "title": "@setbuild: Conjunto usando Lista Sequencial Ordenada",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@setbuild: Conjunto usando Lista Sequencial Ordenada</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Conjunto usando Lista Sequencial Ordenada</h1>\n<ul>\n<li>Conjuntos normalmente s\u00e3o implementados com tabelas hash ou \u00e1rvores.</li>\n<li>Mas vamos implementar um conjunto usando uma lista sequencial ordenada.</li>\n<li>A lista sequencial ordenada \u00e9 uma lista que mant\u00e9m os elementos em ordem crescente sem repeti\u00e7\u00e3o.</li>\n<li>Vamos ter um custo de O(n) para inser\u00e7\u00e3o pela necessidade de deslocar os elementos.</li>\n<li>Como os dados est\u00e3o em um vetor ordenado, podemos fazer uma busca bin\u00e1ria para encontrar o elemento.</li>\n<li>A busca bin\u00e1ria tem um custo de O(log n).</li>\n<li>A remo\u00e7\u00e3o de um elemento tamb\u00e9m tem um custo de O(n) pela necessidade de deslocar os elementos.</li>\n</ul>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/setbuild/cover.jpg\" /></p>\n<p>Implemente a classe do vetor din\u00e2mico.</p>\n<ul>\n<li>Cada linguagem vai ter um arquivo <code>extra.md</code> com orienta\u00e7\u00f5es sobre a implementa\u00e7\u00e3o.</li>\n<li>Voc\u00ea deve criar a classe e implementar os m\u00e9todos conforme as orienta\u00e7\u00f5es.</li>\n<li>Depois de implementar um m\u00e9todo, descomente e ajuste a entrada do m\u00e9todo na fun\u00e7\u00e3o main.</li>\n<li>Implemente apenas os m\u00e9todos necess\u00e1rios para passar no primeiro teste.</li>\n<li>Depois de passar no primeiro teste, implemente os m\u00e9todos necess\u00e1rios para passar no segundo teste.</li>\n<li>\n<p>Continue assim at\u00e9 passar em todos os testes.</p>\n</li>\n<li>\n<p>Os seguintes testes mostrar o comportamento esperado da classe para cada invoca\u00e7\u00e3o de m\u00e9todo.</p>\n</li>\n</ul>\n<h2>Drafts</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>go<ul>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/setbuild/.cache/draft/go/extra.md\">extra.md</a></li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/setbuild/.cache/draft/go/main.go\">main.go</a></li>\n</ul>\n</li>\n<li>java<ul>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/setbuild/.cache/draft/java/Main.java\">Main.java</a></li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/setbuild/.cache/draft/java/extra.md\">extra.md</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Testes</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#__case insert</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#__case contains</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">10</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"w\"> </span><span class=\"m\">12</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">6</span>,<span class=\"w\"> </span><span class=\"m\">8</span>,<span class=\"w\"> </span><span class=\"m\">10</span>,<span class=\"w\"> </span><span class=\"m\">12</span><span class=\"o\">]</span>\n<span class=\"nv\">$contains</span><span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"nb\">true</span>\n<span class=\"nv\">$contains</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nb\">false</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#__case erase</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">6</span><span class=\"o\">]</span>\n<span class=\"nv\">$erase</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">6</span><span class=\"o\">]</span>\n<span class=\"nv\">$erase</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">6</span><span class=\"o\">]</span>\n<span class=\"nv\">$erase</span><span class=\"w\"> </span><span class=\"m\">8</span>\nvalue<span class=\"w\"> </span>not<span class=\"w\"> </span>found\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">6</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT insert\ninit 1\nshow\ninsert 3\nshow\ninsert 4\nshow\ninsert 5\nshow\ninsert 1\nshow\ninsert 2\nshow\ninsert 3\nshow\nend\n======== EXPECT\n$init 1\n$show\n[]\n$insert 3\n$show\n[3]\n$insert 4\n$show\n[3, 4]\n$insert 5\n$show\n[3, 4, 5]\n$insert 1\n$show\n[1, 3, 4, 5]\n$insert 2\n$show\n[1, 2, 3, 4, 5]\n$insert 3\n$show\n[1, 2, 3, 4, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT contains\ninit 10\ninsert 10 2 8 12 6\nshow\ncontains 10\ncontains 3\nend\n======== EXPECT\n$init 10\n$insert 10 2 8 12 6\n$show\n[2, 6, 8, 10, 12]\n$contains 10\ntrue\n$contains 3\nfalse\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT erase\ninit 6\ninsert 1 2 3 4 5 6\nshow\nerase 3\nshow\nerase 1\nshow\nerase 8\nshow\nend\n======== EXPECT\n$init 6\n$insert 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$erase 3\n$show\n[1, 2, 4, 5, 6]\n$erase 1\n$show\n[2, 4, 5, 6]\n$erase 8\nvalue not found\n$show\n[2, 4, 5, 6]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "java": [
            {
                "name": "Main.java",
                "contents": "import java.util.*;\npublic class Main {\n    static Scanner scanner = new Scanner(System.in);\n    public static void main(String[] args) {\n        // Set set = new Set(0);\n\n        while (true) {\n            System.out.print(\"$\");\n            String line = scanner.nextLine();\n            System.out.println(line);\n            String[] parts = line.trim().split(\"\\\\s+\");\n            if (parts.length == 0) continue;\n\n            String cmd = parts[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            } else if (cmd.equals(\"init\")) {\n                // int capacity = Integer.parseInt(parts[1]);\n                // set = new Set(capacity);\n            } else if (cmd.equals(\"insert\")) {\n                // for (int i = 1; i < parts.length; i++) {\n                //     int val = Integer.parseInt(parts[i]);\n                // }\n            } else if (cmd.equals(\"show\")) {\n            } else if (cmd.equals(\"erase\")) {\n                // int valErase = Integer.parseInt(parts[1]);\n            } else if (cmd.equals(\"contains\")) {\n                // int valCheck = Integer.parseInt(parts[1]);\n            } else if (cmd.equals(\"clear\")) {\n            } else {\n                System.out.println(\"comando invalido\");\n            }\n        }\n    }\n}\n",
                "type": "show"
            },
            {
                "name": "extra.md",
                "contents": "# Java Set\n\n```ts\nclass Set {\n  - data: int[]                            ' Armazena os elementos da lista ordenada\n  - size: int                              ' N\u00famero atual de elementos na lista\n  - capacity: int                          ' Capacidade alocada da lista (tamanho de data)\n  --\n  + Set(): Set                             ' Construtor: cria nova lista com capacidade inicial padr\u00e3o\n  - reserve(newCapacity: int): void        ' Redimensiona a capacidade da lista se necess\u00e1rio (interno)\n  - binarySearch(value: int): int          ' Busca bin\u00e1ria: retorna \u00edndice ou -1 se n\u00e3o encontrado\n  - insertAt(value: int, index: int): void ' Insere value na posi\u00e7\u00e3o indicada, deslocando \u00e0 direita\n  - eraseAt(index: int): void              ' Remove o valor na posi\u00e7\u00e3o indicada, deslocando os demais\n  --\n  + insert(value: int): boolean            ' Insere valor mantendo ordem e sem duplicatas\n  + contains(value: int): boolean          ' Retorna true se o valor existir na lista\n  + erase(value: int): boolean             ' Remove valor se existir e retorna true, sen\u00e3o false\n  + toString(): String                     ' Representa\u00e7\u00e3o em string dos elementos da lista\n}\n```\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "extra.md",
                "contents": "# Vector\n\n```ts\nclass Set {\n  - data: []int                             ' Guarda os elementos da lista ordenada\n  - size: int                               ' N\u00famero atual de elementos na lista\n  - capacity: int                           ' Capacidade alocada da lista (tamanho de data)\n  --\n  + NewSet(): *Set                          ' Cria uma nova lista ordenada com capacidade inicial padr\u00e3o\n  - reserve(newCapacity: int): void         ' Redimensiona a capacidade da lista se necess\u00e1rio (interno)\n  - binarySearch(value: int): int           ' Realiza busca bin\u00e1ria e retorna o \u00edndice do valor, ou -1 se n\u00e3o for encontrado\n  - insert(value: int, index: int): error   ' Insere value no \u00edndice indicado, deslocando os elementos \u00e0 direita\n  - erase(index: int): error                ' Remove o elemento na posi\u00e7\u00e3o index, deslocando os demais\n  --\n  + Insert(value: int): void                ' Insere um valor na posi\u00e7\u00e3o correta da lista, mantendo a ordem e sem duplicatas\n  + Contains(value: int): bool              ' Retorna true se o valor existir na lista, false caso contr\u00e1rio\n  + Erase(value: int): bool                 ' Remove o valor da lista, se existir, e retorna true. Retorna false se n\u00e3o for encontrado\n  + String(): string                        ' Retorna uma representa\u00e7\u00e3o em string dos elementos da lista\n}\n```\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tvar line, cmd string\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\t// v := NewSet(0)\n\tfor scanner.Scan() {\n\t\tfmt.Print(\"$\")\n\t\tline = scanner.Text()\n\t\tfmt.Println(line)\n\t\tparts := strings.Fields(line)\n\t\tif len(parts) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcmd = parts[0]\n\n\t\tswitch cmd {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"init\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\t\t// v = NewSet(value)\n\t\tcase \"insert\":\n\t\t\t// for _, part := range parts[1:] {\n\t\t\t// \tvalue, _ := strconv.Atoi(part)\n\t\t\t// }\n\t\tcase \"show\":\n\t\tcase \"erase\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\tcase \"contains\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\tcase \"clear\":\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
