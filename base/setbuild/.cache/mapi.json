{
    "title": "@setbuild: Conjunto usando Lista Sequencial Ordenada",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@setbuild: Conjunto usando Lista Sequencial Ordenada</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@setbuild: Conjunto usando Lista Sequencial Ordenada</h1>\n            <h1 id=\"conjunto-usando-lista-sequencial-ordenada\">Conjunto usando Lista Sequencial Ordenada</h1>\n<ul>\n<li>Conjuntos normalmente s\u00e3o implementados com tabelas hash ou \u00e1rvores.</li>\n<li>Mas vamos implementar um conjunto usando uma lista sequencial ordenada.</li>\n<li>A lista sequencial ordenada \u00e9 uma lista que mant\u00e9m os elementos em ordem crescente sem repeti\u00e7\u00e3o.</li>\n<li>Vamos ter um custo de O(n) para inser\u00e7\u00e3o pela necessidade de deslocar os elementos.</li>\n<li>Como os dados est\u00e3o em um vetor ordenado, podemos fazer uma busca bin\u00e1ria para encontrar o elemento.</li>\n<li>A busca bin\u00e1ria tem um custo de O(log n).</li>\n<li>A remo\u00e7\u00e3o de um elemento tamb\u00e9m tem um custo de O(n) pela necessidade de deslocar os elementos.</li>\n</ul>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/setbuild/cover.jpg\" /></p>\n<p>Implemente a classe do vetor din\u00e2mico.</p>\n<ul>\n<li>Cada linguagem vai ter um arquivo <code>extra.md</code> com orienta\u00e7\u00f5es sobre a implementa\u00e7\u00e3o.</li>\n<li>Voc\u00ea deve criar a classe e implementar os m\u00e9todos conforme as orienta\u00e7\u00f5es.</li>\n<li>Depois de implementar um m\u00e9todo, descomente e ajuste a entrada do m\u00e9todo na fun\u00e7\u00e3o main.</li>\n<li>Implemente apenas os m\u00e9todos necess\u00e1rios para passar no primeiro teste.</li>\n<li>Depois de passar no primeiro teste, implemente os m\u00e9todos necess\u00e1rios para passar no segundo teste.</li>\n<li>\n<p>Continue assim at\u00e9 passar em todos os testes.</p>\n</li>\n<li>\n<p>Os seguintes testes mostrar o comportamento esperado da classe para cada invoca\u00e7\u00e3o de m\u00e9todo.</p>\n</li>\n</ul>\n<h2 id=\"testes\">Testes</h2>\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case insert\n$init 1\n$show\n[]\n$insert 3\n$show\n[3]\n$insert 4\n$show\n[3, 4]\n$insert 5\n$show\n[3, 4, 5]\n$insert 1\n$show\n[1, 3, 4, 5]\n$insert 2\n$show\n[1, 2, 3, 4, 5]\n$insert 3\n$show\n[1, 2, 3, 4, 5]\n$end\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case contains\n$init 10\n$insert 10 2 8 12 6\n$show\n[2, 6, 8, 10, 12]\n$contains 10\ntrue\n$contains 3\nfalse\n$end\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case erase\n$init 6\n$insert 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$erase 3\n$show\n[1, 2, 4, 5, 6]\n$erase 1\n$show\n[2, 4, 5, 6]\n$erase 8\nvalue not found\n$show\n[2, 4, 5, 6]\n$end\n</code></pre>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT insert\ninit 1\nshow\ninsert 3\nshow\ninsert 4\nshow\ninsert 5\nshow\ninsert 1\nshow\ninsert 2\nshow\ninsert 3\nshow\nend\n======== EXPECT\n$init 1\n$show\n[]\n$insert 3\n$show\n[3]\n$insert 4\n$show\n[3, 4]\n$insert 5\n$show\n[3, 4, 5]\n$insert 1\n$show\n[1, 3, 4, 5]\n$insert 2\n$show\n[1, 2, 3, 4, 5]\n$insert 3\n$show\n[1, 2, 3, 4, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT contains\ninit 10\ninsert 10 2 8 12 6\nshow\ncontains 10\ncontains 3\nend\n======== EXPECT\n$init 10\n$insert 10 2 8 12 6\n$show\n[2, 6, 8, 10, 12]\n$contains 10\ntrue\n$contains 3\nfalse\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT erase\ninit 6\ninsert 1 2 3 4 5 6\nshow\nerase 3\nshow\nerase 1\nshow\nerase 8\nshow\nend\n======== EXPECT\n$init 6\n$insert 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$erase 3\n$show\n[1, 2, 4, 5, 6]\n$erase 1\n$show\n[2, 4, 5, 6]\n$erase 8\nvalue not found\n$show\n[2, 4, 5, 6]\n$end\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# Vector\n\n```ts\nclass Set {\n  - data: []int                             ' Guarda os elementos da lista ordenada\n  - size: int                               ' N\u00famero atual de elementos na lista\n  - capacity: int                           ' Capacidade alocada da lista (tamanho de data)\n  --\n  + NewSet(): *Set                          ' Cria uma nova lista ordenada com capacidade inicial padr\u00e3o\n  - reserve(newCapacity: int): void         ' Redimensiona a capacidade da lista se necess\u00e1rio (interno)\n  - binarySearch(value: int): int           ' Realiza busca bin\u00e1ria e retorna o \u00edndice do valor, ou -1 se n\u00e3o for encontrado\n  - insert(value: int, index: int): error   ' Insere value no \u00edndice indicado, deslocando os elementos \u00e0 direita\n  - erase(index: int): error                ' Remove o elemento na posi\u00e7\u00e3o index, deslocando os demais\n  --\n  + Insert(value: int): void                ' Insere um valor na posi\u00e7\u00e3o correta da lista, mantendo a ordem e sem duplicatas\n  + Contains(value: int): bool              ' Retorna true se o valor existir na lista, false caso contr\u00e1rio\n  + Erase(value: int): bool                 ' Remove o valor da lista, se existir, e retorna true. Retorna false se n\u00e3o for encontrado\n  + String(): string                        ' Retorna uma representa\u00e7\u00e3o em string dos elementos da lista\n}\n```\n",
                "encoding": 0
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tvar line, cmd string\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\t// v := NewSet(0)\n\tfor scanner.Scan() {\n\t\tfmt.Print(\"$\")\n\t\tline = scanner.Text()\n\t\tfmt.Println(line)\n\t\tparts := strings.Fields(line)\n\t\tif len(parts) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcmd = parts[0]\n\n\t\tswitch cmd {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"init\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\t\t// v = NewSet(value)\n\t\tcase \"insert\":\n\t\t\t// for _, part := range parts[1:] {\n\t\t\t// \tvalue, _ := strconv.Atoi(part)\n\t\t\t// }\n\t\tcase \"show\":\n\t\tcase \"erase\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\tcase \"contains\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\tcase \"clear\":\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "encoding": 0
            }
        ]
    }
}
