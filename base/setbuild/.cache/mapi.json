{
    "title": "@setbuild: Conjunto usando Lista Sequencial Ordenada",
    "description": "# Conjunto usando Lista Sequencial Ordenada\n\n- Conjuntos normalmente s\u00e3o implementados com tabelas hash ou \u00e1rvores.\n- Mas vamos implementar um conjunto usando uma lista sequencial ordenada.\n- A lista sequencial ordenada \u00e9 uma lista que mant\u00e9m os elementos em ordem crescente sem repeti\u00e7\u00e3o.\n- Vamos ter um custo de O(n) para inser\u00e7\u00e3o pela necessidade de deslocar os elementos.\n- Como os dados est\u00e3o em um vetor ordenado, podemos fazer uma busca bin\u00e1ria para encontrar o elemento.\n- A busca bin\u00e1ria tem um custo de O(log n).\n- A remo\u00e7\u00e3o de um elemento tamb\u00e9m tem um custo de O(n) pela necessidade de deslocar os elementos.\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/setbuild/cover.jpg)\n\nImplemente a classe do vetor din\u00e2mico.\n\n- Cada linguagem vai ter um arquivo `extra.md` com orienta\u00e7\u00f5es sobre a implementa\u00e7\u00e3o.\n- Voc\u00ea deve criar a classe e implementar os m\u00e9todos conforme as orienta\u00e7\u00f5es.\n- Depois de implementar um m\u00e9todo, descomente e ajuste a entrada do m\u00e9todo na fun\u00e7\u00e3o main.\n- Implemente apenas os m\u00e9todos necess\u00e1rios para passar no primeiro teste.\n- Depois de passar no primeiro teste, implemente os m\u00e9todos necess\u00e1rios para passar no segundo teste.\n- Continue assim at\u00e9 passar em todos os testes.\n\n- Os seguintes testes mostrar o comportamento esperado da classe para cada invoca\u00e7\u00e3o de m\u00e9todo.\n\n## Drafts\n\n<!-- links .cache/draft -->\n- go\n  - [extra.md](https://github.com/qxcodeed/arcade/blob/master/base/setbuild/.cache/draft/go/extra.md)\n  - [main.go](https://github.com/qxcodeed/arcade/blob/master/base/setbuild/.cache/draft/go/main.go)\n- java\n  - [Main.java](https://github.com/qxcodeed/arcade/blob/master/base/setbuild/.cache/draft/java/Main.java)\n  - [extra.md](https://github.com/qxcodeed/arcade/blob/master/base/setbuild/.cache/draft/java/extra.md)\n<!-- links -->\n\n\n## Testes\n\n```bash\n#__case insert\n$init 1\n$show\n[]\n$insert 3\n$show\n[3]\n$insert 4\n$show\n[3, 4]\n$insert 5\n$show\n[3, 4, 5]\n$insert 1\n$show\n[1, 3, 4, 5]\n$insert 2\n$show\n[1, 2, 3, 4, 5]\n$insert 3\n$show\n[1, 2, 3, 4, 5]\n$end\n```\n\n```bash\n#__case contains\n$init 10\n$insert 10 2 8 12 6\n$show\n[2, 6, 8, 10, 12]\n$contains 10\ntrue\n$contains 3\nfalse\n$end\n```\n\n```bash\n#__case erase\n$init 6\n$insert 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$erase 3\n$show\n[1, 2, 4, 5, 6]\n$erase 1\n$show\n[2, 4, 5, 6]\n$erase 8\nvalue not found\n$show\n[2, 4, 5, 6]\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT insert\ninit 1\nshow\ninsert 3\nshow\ninsert 4\nshow\ninsert 5\nshow\ninsert 1\nshow\ninsert 2\nshow\ninsert 3\nshow\nend\n======== EXPECT\n$init 1\n$show\n[]\n$insert 3\n$show\n[3]\n$insert 4\n$show\n[3, 4]\n$insert 5\n$show\n[3, 4, 5]\n$insert 1\n$show\n[1, 3, 4, 5]\n$insert 2\n$show\n[1, 2, 3, 4, 5]\n$insert 3\n$show\n[1, 2, 3, 4, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT contains\ninit 10\ninsert 10 2 8 12 6\nshow\ncontains 10\ncontains 3\nend\n======== EXPECT\n$init 10\n$insert 10 2 8 12 6\n$show\n[2, 6, 8, 10, 12]\n$contains 10\ntrue\n$contains 3\nfalse\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT erase\ninit 6\ninsert 1 2 3 4 5 6\nshow\nerase 3\nshow\nerase 1\nshow\nerase 8\nshow\nend\n======== EXPECT\n$init 6\n$insert 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$erase 3\n$show\n[1, 2, 4, 5, 6]\n$erase 1\n$show\n[2, 4, 5, 6]\n$erase 8\nvalue not found\n$show\n[2, 4, 5, 6]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "java": [
            {
                "name": "Main.java",
                "contents": "import java.util.*;\npublic class Main {\n    static Scanner scanner = new Scanner(System.in);\n    public static void main(String[] args) {\n        // Set set = new Set(0);\n\n        while (true) {\n            System.out.print(\"$\");\n            String line = scanner.nextLine();\n            System.out.println(line);\n            String[] parts = line.trim().split(\"\\\\s+\");\n            if (parts.length == 0) continue;\n\n            String cmd = parts[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            } else if (cmd.equals(\"init\")) {\n                // int capacity = Integer.parseInt(parts[1]);\n                // set = new Set(capacity);\n            } else if (cmd.equals(\"insert\")) {\n                // for (int i = 1; i < parts.length; i++) {\n                //     int val = Integer.parseInt(parts[i]);\n                // }\n            } else if (cmd.equals(\"show\")) {\n            } else if (cmd.equals(\"erase\")) {\n                // int valErase = Integer.parseInt(parts[1]);\n            } else if (cmd.equals(\"contains\")) {\n                // int valCheck = Integer.parseInt(parts[1]);\n            } else if (cmd.equals(\"clear\")) {\n            } else {\n                System.out.println(\"comando invalido\");\n            }\n        }\n    }\n}\n",
                "type": "show"
            },
            {
                "name": "extra.md",
                "contents": "# Java Set\n\n```ts\nclass Set {\n  - data: int[]                            ' Armazena os elementos da lista ordenada\n  - size: int                              ' N\u00famero atual de elementos na lista\n  - capacity: int                          ' Capacidade alocada da lista (tamanho de data)\n  --\n  + Set(): Set                             ' Construtor: cria nova lista com capacidade inicial padr\u00e3o\n  - reserve(newCapacity: int): void        ' Redimensiona a capacidade da lista se necess\u00e1rio (interno)\n  - binarySearch(value: int): int          ' Busca bin\u00e1ria: retorna \u00edndice ou -1 se n\u00e3o encontrado\n  - insertAt(value: int, index: int): void ' Insere value na posi\u00e7\u00e3o indicada, deslocando \u00e0 direita\n  - eraseAt(index: int): void              ' Remove o valor na posi\u00e7\u00e3o indicada, deslocando os demais\n  --\n  + insert(value: int): boolean            ' Insere valor mantendo ordem e sem duplicatas\n  + contains(value: int): boolean          ' Retorna true se o valor existir na lista\n  + erase(value: int): boolean             ' Remove valor se existir e retorna true, sen\u00e3o false\n  + toString(): String                     ' Representa\u00e7\u00e3o em string dos elementos da lista\n}\n```\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "extra.md",
                "contents": "# Vector\n\n```ts\nclass Set {\n  - data: []int                             ' Guarda os elementos da lista ordenada\n  - size: int                               ' N\u00famero atual de elementos na lista\n  - capacity: int                           ' Capacidade alocada da lista (tamanho de data)\n  --\n  + NewSet(): *Set                          ' Cria uma nova lista ordenada com capacidade inicial padr\u00e3o\n  - reserve(newCapacity: int): void         ' Redimensiona a capacidade da lista se necess\u00e1rio (interno)\n  - binarySearch(value: int): int           ' Realiza busca bin\u00e1ria e retorna o \u00edndice do valor, ou -1 se n\u00e3o for encontrado\n  - insert(value: int, index: int): error   ' Insere value no \u00edndice indicado, deslocando os elementos \u00e0 direita\n  - erase(index: int): error                ' Remove o elemento na posi\u00e7\u00e3o index, deslocando os demais\n  --\n  + Insert(value: int): void                ' Insere um valor na posi\u00e7\u00e3o correta da lista, mantendo a ordem e sem duplicatas\n  + Contains(value: int): bool              ' Retorna true se o valor existir na lista, false caso contr\u00e1rio\n  + Erase(value: int): bool                 ' Remove o valor da lista, se existir, e retorna true. Retorna false se n\u00e3o for encontrado\n  + String(): string                        ' Retorna uma representa\u00e7\u00e3o em string dos elementos da lista\n}\n```\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tvar line, cmd string\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\t// v := NewSet(0)\n\tfor scanner.Scan() {\n\t\tfmt.Print(\"$\")\n\t\tline = scanner.Text()\n\t\tfmt.Println(line)\n\t\tparts := strings.Fields(line)\n\t\tif len(parts) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcmd = parts[0]\n\n\t\tswitch cmd {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"init\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\t\t// v = NewSet(value)\n\t\tcase \"insert\":\n\t\t\t// for _, part := range parts[1:] {\n\t\t\t// \tvalue, _ := strconv.Atoi(part)\n\t\t\t// }\n\t\tcase \"show\":\n\t\tcase \"erase\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\tcase \"contains\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\tcase \"clear\":\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
