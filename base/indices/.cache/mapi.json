{
    "title": "@indices: \u00cdndices originais",
    "description": "# \u00cdndices originais\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Tests](#tests)\n-- | -- | --\n<!-- toch -->\n\n## Intro\n\nVoc\u00ea recebe um vetor A de inteiros n\u00e3o negativos de tamanho n. Sua tarefa \u00e9 ordenar o vetor em ordem crescente e imprimir os \u00edndices originais dos elementos.\n\nConsidere o vetor `A = {4,5,3,7,1}`\n\nAp\u00f3s a ordena\u00e7\u00e3o, o vetor ordenado ser\u00e1: `A = {1,3,4,5,7}`.\n\nA sa\u00edda deve ser os \u00edndices originais dos elementos do vetor ordenado: `4 2 0 1 3`\n\n**NOTA:** A indexa\u00e7\u00e3o da vetor come\u00e7a com 0.\n\n## Draft\n\n- Voc\u00ea deve implementar um algoritmo de ordena\u00e7\u00e3o e a fun\u00e7\u00e3o `originalIndices` no arquivo `main.cpp`.\n\n<!-- links .cache/draft -->\n- cpp\n  - [main.cpp](https://github.com/qxcodeed/arcade/blob/master/base/indices/.cache/draft/cpp/main.cpp)\n<!-- links -->\n\n## Tests\n\n### Entrada\n\n- A primeira linha de entrada consiste em um n\u00famero inteiro n, representando o tamanho do vetor A.\n- A segunda linha de entrada cont\u00e9m n inteiros n\u00e3o negativos, representando os elementos do vetor A.\n- Restri\u00e7\u00f5es:\n  - $1 \\le n \\le 10^{6} $\n  - $0 \\le A[i] \\le 10^6$\n\n### Sa\u00edda\n\n- A sa\u00edda consiste em uma \u00fanica linha de n inteiros, representando os \u00edndices originais de cada elemento no vetor ordenado.\n\n```txt\n>>>>>>>>\n5\n4 5 3 7 1\n========\n4 2 0 1 3\n<<<<<<<<\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n5\n4 5 3 7 1\n======== EXPECT\n4 2 0 1 3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10\n7 5 4 3 2 1 8 0 9 6\n======== EXPECT\n7 5 4 3 2 1 9 0 6 8\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n50\n41 18467 6334 26500 19169 15724 11478 29358 26962 24464 5705 28145 23281 16827 9961 491 2995 11942 4827 5436 32391 14604 3902 153 292 12382 17421 18716 19718 19895 5447 21726 14771 11538 1869 19912 25667 26299 17035 9894 28703 23811 31322 30333 17673 4664 15141 7711 28253 6868\n======== EXPECT\n0 23 24 15 34 16 22 45 18 19 30 10 2 49 47 39 14 6 33 17 25 21 32 46 5 13 38 26 44 1 27 4 28 29 35 31 12 41 9 36 37 3 8 11 48 40 7 43 42 20\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <vector>\n\n//Escolha e implemente um algoritmo de ordena\u00e7\u00e3o\nstd::vector<int> ordenar(std::vector<int> arr) {\n    (void) arr;\n    return arr;\n}\n\nstd::vector<int> originalIndices(std::vector<int>& arr, std::vector<int>& arrOrdenado) {\n    (void) arr;\n    (void) arrOrdenado;\n    return std::vector<int> {};\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<int> arr(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> arr[i];\n    }\n\n    std::vector<int> arrOrdenado = ordenar(arr);\n    std::vector<int> indices = originalIndices(arr, arrOrdenado);\n\n    for (int i = 0; i < (int) indices.size(); i++) {\n        if (i != 0) {\n            std:: cout << \" \";\n        }\n        std::cout << indices[i];\n    }\n\n    std::cout << std::endl;\n\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
