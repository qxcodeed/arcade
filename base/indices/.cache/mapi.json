{
    "title": "L1 - @indices do vetor",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>L1 - @indices do vetor</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <script src=\"https://cdnjs.cloudflare.com/polyfill/v3/polyfill.min.js?features=es6\"></script>\n  <script\n  src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml-full.js\"\n  type=\"text/javascript\"></script>\n</head>\n<body>\n<h1 id=\"l1---indices-do-vetor\">L1 - <span class=\"citation\"\ndata-cites=\"indices\">@indices</span> do vetor</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr class=\"header\">\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<h2 id=\"intro\">Intro</h2>\n<p>Voc\u00c3\u00aa recebe um vetor A de inteiros n\u00c3\u00a3o negativos de tamanho n.\u00c2\u00a0Sua\ntarefa \u00c3\u00a9 ordenar o vetor em ordem crescente e imprimir os \u00c3\u00adndices\noriginais dos elementos.</p>\n<p>Considere o vetor <code>A = {4,5,3,7,1}</code></p>\n<p>Ap\u00c3\u00b3s a ordena\u00c3\u00a7\u00c3\u00a3o, o vetor ordenado ser\u00c3\u00a1:\n<code>A = {1,3,4,5,7}</code>.</p>\n<p>A sa\u00c3\u00adda deve ser os \u00c3\u00adndices originais dos elementos do vetor\nordenado: <code>4 2 0 1 3</code></p>\n<p><strong>NOTA:</strong> A indexa\u00c3\u00a7\u00c3\u00a3o da vetor come\u00c3\u00a7a com 0.</p>\n<h2 id=\"draft\">Draft</h2>\n<ul>\n<li>Voc\u00c3\u00aa deve implementar um algoritmo de ordena\u00c3\u00a7\u00c3\u00a3o e a fun\u00c3\u00a7\u00c3\u00a3o\n<code>originalIndices</code> no arquivo <code>main.cpp</code>.</li>\n</ul>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp\n<ul>\n<li><a href=\".cache/draft/cpp/main.cpp\">main.cpp</a> <!-- links --></li>\n</ul></li>\n</ul>\n<h2 id=\"tests\">Tests</h2>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A primeira linha de entrada consiste em um n\u00c3\u00bamero inteiro n,\nrepresentando o tamanho do vetor A.</li>\n<li>A segunda linha de entrada cont\u00c3\u00a9m n inteiros n\u00c3\u00a3o negativos,\nrepresentando os elementos do vetor A.</li>\n<li>Restri\u00c3\u00a7\u00c3\u00b5es:\n<ul>\n<li>$1 n ^{6} $</li>\n<li><span class=\"math inline\">\\(0 \\le A[i] \\le 10^6\\)</span></li>\n</ul></li>\n</ul>\n<h3 id=\"sa\u00c3\u00adda\">Sa\u00c3\u00adda</h3>\n<ul>\n<li>A sa\u00c3\u00adda consiste em uma \u00c3\u00banica linha de n inteiros, representando os\n\u00c3\u00adndices originais de cada elemento no vetor ordenado.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>5</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>4 5 3 7 1</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>4 2 0 1 3</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>>\n5\n4 5 3 7 1\n========\n4 2 0 1 3\n<<<<<<<<\n\n>>>>>>>>\n10\n7 5 4 3 2 1 8 0 9 6\n========\n7 5 4 3 2 1 9 0 6 8\n<<<<<<<<\n\n>>>>>>>>\n50\n41 18467 6334 26500 19169 15724 11478 29358 26962 24464 5705 28145 23281 16827 9961 491 2995 11942 4827 5436 32391 14604 3902 153 292 12382 17421 18716 19718 19895 5447 21726 14771 11538 1869 19912 25667 26299 17035 9894 28703 23811 31322 30333 17673 4664 15141 7711 28253 6868\n========\n0 23 24 15 34 16 22 45 18 19 30 10 2 49 47 39 14 6 33 17 25 21 32 46 5 13 38 26 44 1 27 4 28 29 35 31 12 41 9 36 37 3 8 11 48 40 7 43 42 20\n<<<<<<<<\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <vector>\n\n//Escolha e implemente um algoritmo de ordena\u00c3\u00a7\u00c3\u00a3o\nstd::vector<int> ordenar(std::vector<int> arr) {\n\n    (void) arr;\n    return arr;\n}\n\nstd::vector<int> originalIndices(std::vector<int>& arr, std::vector<int>& arrOrdenado) {\n\n    (void) arr;\n    (void) arrOrdenado;\n    return std::vector<int> {};\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<int> arr(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> arr[i];\n    }\n\n    std::vector<int> arrOrdenado = ordenar(arr);\n    std::vector<int> indices = originalIndices(arr, arrOrdenado);\n\n    for (int i = 0; i < (int) indices.size(); i++) {\n        if (i != 0) {\n            std:: cout << \" \";\n        }\n        std::cout << indices[i];\n    }\n\n    std::cout << std::endl;\n\n    return 0;\n}",
                "encoding": 0
            }
        ]
    }
}
