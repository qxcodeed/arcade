{
    "title": "@vacina: Otimizando vacinas",
    "description": "# Otimizando vacinas\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Tests](#tests)\n-- | -- | --\n<!-- toch -->\n\n## Intro\n\nUm novo v\u00edrus mortal est\u00e1 infectando uma grande popula\u00e7\u00e3o de um planeta. Um brilhante cientista chamado Wladimir descobriu uma nova cepa de v\u00edrus que pode curar essa doen\u00e7a. A vacina produzida a partir desse v\u00edrus tem v\u00e1rias pot\u00eancias, dependendo da contagem de c\u00e9lulas T. Uma pessoa \u00e9 curada somente se a contagem de c\u00e9lulas T na vacina for maior do que a contagem de c\u00e9lulas T da pessoa.\n\nUm m\u00e9dico recebe um conjunto de relat\u00f3rios contendo a contagem de c\u00e9lulas T de cada paciente infectado. O laborat\u00f3rio QuixaVax armazena todas as vacinas que o m\u00e9dico possui e suas respectivas contagens de c\u00e9lulas T. Voc\u00ea precisa determinar se o m\u00e9dico pode salvar todos os pacientes com as vacinas dispon\u00edveis. Note que o n\u00famero de vacinas e pacientes \u00e9 igual.\n\n## Draft\n\n- Voc\u00ea deve implementar um algoritmo de ordena\u00e7\u00e3o e a fun\u00e7\u00e3o `vacinou` no arquivo `main.cpp`.\n\n<!-- links .cache/draft -->\n- cpp\n  - [main.cpp](https://github.com/qxcodeed/arcade/blob/master/base/vacina/.cache/draft/cpp/main.cpp)\n<!-- links -->\n\n## Tests\n\n### Entrada\n\n- A primeira linha cont\u00e9m um n\u00famero inteiro N, representando o n\u00famero de vacinas e pacientes.\n- A segunda linha cont\u00e9m N inteiros, representando a contagem de c\u00e9lulas T de cada vacina.\n- A terceira linha cont\u00e9m N inteiros, representando a contagem de c\u00e9lulas T de cada paciente.\n\n### Sa\u00edda\n\n- Imprima uma \u00fanica linha contendo Yes, se todos os pacientes podem ser salvos, e No, caso contr\u00e1rio.\n\n### Exemplos\n\n```txt\n>>>>>>>>\n5\n123 146 454 542 456\n100 328 248 689 200\n========\nNo\n<<<<<<<<\n```\n\n> **Explica\u00e7\u00e3o**:\n>\n> - A vacina 1 (contagem 123) cura o paciente 1 (contagem 100).\n>\n> - A vacina 2 (contagem 146) n\u00e3o cura nenhum outro.\n\n```txt\n>>>>>>>>\n5\n123 690 454 150 456\n100 328 248 689 145\n========\nYes\n<<<<<<<<\n```\n\n> **Explica\u00e7\u00e3o**:\n>\n>A vacina 1 (contagem 123) cura o paciente 1 (contagem 100).\n>\n> A vacina 2 (contagem 690) cura o paciente 4.\n>\n> A vacina 3 (contagem 454) cura o paciente 2.\n>\n> A vacina 4 (contagem 150) cura o paciente 5.\n>\n> A vacina 5 (contagem 150) cura o paciente 3.\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n5\n123 146 454 542 456\n100 328 248 689 200\n======== EXPECT\nNo\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n123 690 454 150 456\n100 328 248 689 145\n======== EXPECT\nYes\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n10 61 55 88 17\n15 76 21 73 19\n======== EXPECT\nNo\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <vector>\n\n//Escolha e implemente um algoritmo de ordena\u00e7\u00e3o\nvoid ordenar(std::vector<int>& arr) {\n    (void) arr;\n}\n\nvoid vacinou(std::vector<int>& vacinas, std::vector<int>& pacientes){\n    (void) vacinas;\n    (void) pacientes;\n}\n\nint main(){\n    int n;\n    std::cin >> n;\n    \n    std::vector<int> vacinas(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> vacinas[i];\n    }\n\n    std::vector<int> pacientes(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> pacientes[i];\n    }\n\n    ordenar(vacinas);\n    ordenar(pacientes);\n\n    vacinou(vacinas, pacientes);\n}\n",
                "type": "show"
            }
        ]
    }
}
