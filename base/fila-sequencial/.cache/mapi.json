{
    "title": "@fila-sequencial: Fila sequencial CPP",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@fila-sequencial: Fila sequencial CPP</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@fila-sequencial: Fila sequencial CPP</h1>\n            <h1 id=\"fila-sequencial-cpp\">Fila sequencial CPP</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<h2 id=\"intro\">Intro</h2>\n<p>Neste exerc\u00edcio, voc\u00ea implementar\u00e1 uma <strong>Fila</strong> usando uma <strong>Lista Sequencial</strong> (array). A fila \u00e9 uma estrutura de dados linear que segue o princ\u00edpio FIFO (<strong>First In, First Out</strong>), onde o primeiro elemento inserido \u00e9 o primeiro a ser removido.</p>\n<p>Na implementa\u00e7\u00e3o da fila sequencial, os elementos s\u00e3o armazenados em um array <code>Arr</code>, e a fila possui:</p>\n<ul>\n<li><code>front</code>: ponteiro que aponta para o primeiro elemento da fila.</li>\n<li><code>size</code>: representa o n\u00famero atual de elementos na fila e deve ser atualizado ap\u00f3s cada opera\u00e7\u00e3o de inser\u00e7\u00e3o e remo\u00e7\u00e3o.</li>\n<li><code>capacity</code>: representa o tamanho m\u00e1ximo da fila.</li>\n</ul>\n<h3 id=\"estrutura-do-exercicio\">Estrutura do Exerc\u00edcio</h3>\n<p>A classe <code>SequentialQueue</code> est\u00e1 definida no arquivo <code>lib.cpp</code> e possui os seguintes m\u00e9todos:</p>\n<ul>\n<li>~~<code>SequentialQueue()</code>~~</li>\n<li>~~<code>~SequentialQueue()</code>~~</li>\n<li><code>void push(int info)</code></li>\n<li><code>void pop()</code></li>\n<li><code>int peek()</code></li>\n<li><code>void clear()</code></li>\n<li><code>bool empty()</code></li>\n<li><code>bool full()</code></li>\n<li>~~<code>void print()</code>~~</li>\n</ul>\n<p>Os m\u00e9todos riscados j\u00e1 est\u00e3o implementados; voc\u00ea deve implementar os demais m\u00e9todos, conforme as descri\u00e7\u00f5es nos coment\u00e1rios do arquivo <code>lib.cpp</code>.</p>\n<h3 id=\"observacoes\">Observa\u00e7\u00f5es</h3>\n<ul>\n<li><strong>OBS. 1:</strong> N\u00e3o altere os m\u00e9todos j\u00e1 implementados.</li>\n<li><strong>OBS. 2:</strong> N\u00e3o \u00e9 necess\u00e1rio escrever a fun\u00e7\u00e3o <code>main()</code>, pois ela j\u00e1 est\u00e1 implementada no ambiente de avalia\u00e7\u00e3o.</li>\n</ul>\n<h2 id=\"draft\">Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp</li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/fila-sequencial/.cache/draft/cpp/lib.cpp\">lib.cpp</a></li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/fila-sequencial/.cache/draft/cpp/main.cpp\">main.cpp</a></li>\n</ul>\n<!-- links -->\n\n<h2 id=\"tests\">Tests</h2>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A entrada consistir\u00e1 em uma sequ\u00eancia de opera\u00e7\u00f5es.</li>\n</ul>\n<h3 id=\"saida\">Sa\u00edda</h3>\n<ul>\n<li>O programa deve exibir o estado da fila conforme as opera\u00e7\u00f5es realizadas, conforme descrito nos casos de teste.</li>\n</ul>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste peek\ntest_peek\n======== EXPECT\nTESTE peek\n[]\npush 10\npeek == 10\npush 15\npeek == 10\npush 20\npeek == 10\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste push\ntest_push\n======== EXPECT\nTESTE push\npush 10\npush 15\npush 20\npush 25\nEsperado: [10, 15, 20, 25]\nFila: [10, 15, 20, 25]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste pop\ntest_pop\n======== EXPECT\nTESTE pop\nFila: [10, 15, 20, 25, 30]\npop\nFila: [15, 20, 25, 30]\npop\nFila: [20, 25, 30]\npop\nFila: [25, 30]\npop\nFila: [30]\npop\nFila: []\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste tudo\ntest_all\n======== EXPECT\nTESTE todos (push, pop, peek, size), capacity = 6\npush 1\nFila: [1]\npush 2\nFila: [1, 2]\npush 3\nFila: [1, 2, 3]\npop\nFila: [2, 3]\npop\nFila: [3]\npush 4\nFila: [3, 4]\npush 5\nFila: [3, 4, 5]\npop\nFila: [4, 5]\npop\nFila: [5]\npush 6\nFila: [5, 6]\npush 7\nFila: [5, 6, 7]\npush 8\nFila: [5, 6, 7, 8]\npop\nFila: [6, 7, 8]\npop\nFila: [7, 8]\npop\nFila: [8]\npop\nFila: []\npush 9\nFila: [9]\npush 10\nFila: [9, 10]\npush 11\nFila: [9, 10, 11]\npush 12\nFila: [9, 10, 11, 12]\npush 13\nFila: [9, 10, 11, 12, 13]\npush 14\nFila: [9, 10, 11, 12, 13, 14]\npush 15\nFila: [9, 10, 11, 12, 13, 14]\npush 16\nFila: [9, 10, 11, 12, 13, 14]\npush 17\nFila: [9, 10, 11, 12, 13, 14]\npush 18\nFila: [9, 10, 11, 12, 13, 14]\npop\nFila: [10, 11, 12, 13, 14]\npop\nFila: [11, 12, 13, 14]\nLista: [11, 12, 13, 14]\nsize: 4\nclear\nFila: []\nsize: 0\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "lib.cpp",
                "contents": "#include <iostream>\n\n// SequentialQueue ou Pilha Sequencial\n// Altere somente os campos marcados com TODO\nstruct SequentialQueue {\n    int front;     // Indice do elemento na frente da fila\n    int size;      // Quantidade de elementos da fila\n    int capacity;  // Quantidade m\u00e1xima de elementos permitidos dentro da fila\n    int *Arr;      // Ponteiro para array de elementos onde salvamos as informacoes do usuario\n\n    SequentialQueue(int capacity) {\n        size = 0;\n        front = 0;\n        this->capacity = capacity;\n        Arr = new int[capacity];\n    }\n\n    ~SequentialQueue() {\n        delete[] Arr;\n    }\n\n\n    // Adiciona um elemento no topo da fila\n    // info: informacao do elemento a ser inserido\n    void push(int info) {\n        // TODO\n        (void) info;\n    }\n\n\n    // Remove um elemento do topo da fila.\n    // Nao faz nada caso a fila esteja vazia.\n    void pop(){\n        // TODO\n    }\n\n\n    // Retorna a informacao do elemento no topo da fila.\n    // Retorna -1, caso a fila esteja vazia.\n    int peek(){\n        // TODO\n        return -1;\n    }\n\n\n    // Remove todos os elementos da fila\n    void clear(){\n        // TODO\n    }\n\n\n    // Devolve true se cheia e false caso contrario\n    bool empty(){\n        // TODO\n        return false;\n    }\n\n    // Devolve true se vazia e false caso contrario\n    bool full(){\n        // TODO\n        return false;\n    }\n\n    // Printa as informacoes da lista\n    void print() {\n        std::cout << \"[\";\n        for(int i = 0; i < size; i++) {\n            std::cout << Arr[(front+i)%capacity];\n            if(i < size-1) {\n                std::cout << \", \";\n            }\n        }\n        std::cout << \"]\" << std::endl;\n    }    \n};\n",
                "encoding": 0
            },
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <map>\n#include \"lib.cpp\"\n\nusing std::cout;\nusing std::endl;\n\nbool LOG_ALLOCATED = false;\nstd::map<void*, int> allocated_nodes_status = {};\nstd::map<int, int> mapa = {};\nconst int ALLOCATED = 1;\nconst int DELETED = 2;\n\n// Salvar Nos alocados\n\ntemplate <typename K, typename V>\nvoid printMap(const std::map<K, V>& m) {\n    for (const auto& pair : m) {\n        std::cout << \"Key: \" << pair.first << \", Value: \" << pair.second << std::endl;\n    }\n}\n\n/////////////// TESTE CONSTRUCT ///////////////\n\nvoid test_constructor() {\n    cout << \"TESTE Construtor\" << endl;\n    SequentialQueue* queue = new SequentialQueue(8); \n\n    if(queue->size == 0 && queue->capacity == 8) {\n        cout << \"Ok\" << endl;\n    } else {\n        cout << \"Atributos incorretos\";\n    }\n}\n\n\nvoid push_test(SequentialQueue &queue, int info) {\n    if(queue.size < queue.capacity) {\n        int back = (queue.front + queue.size) % queue.capacity;\n        queue.Arr[back] = info;\n        queue.size++;\n    }\n}\n\nint peek_test(SequentialQueue &queue) {\n    if(queue.size == 0) {\n        return -1;\n    } else {\n        return queue.Arr[queue.front];\n    }\n}\n\n/////////////// TESTE HAS_INFO ///////////////\n\nvoid test_peek() {\n    cout << \"TESTE peek\" << endl;\n    SequentialQueue queue(8);\n    \n    queue.print();\n\n    push_test(queue, 10);\n    cout << \"push 10\" << endl;\n    cout << \"peek == \" << queue.peek() << endl;\n\n    push_test(queue, 15);\n    cout << \"push 15\" << endl;\n    cout << \"peek == \" << queue.peek() << endl;\n    \n    push_test(queue, 20);\n    cout << \"push 20\" << endl;\n    cout << \"peek == \" << queue.peek() << endl;\n}\n\n\n/////////////// TESTE PUSH ///////////////\n\nvoid test_push() {\n    allocated_nodes_status.clear();\n    cout << \"TESTE push\" << endl;\n    SequentialQueue queue(4);\n\n    queue.push(10);\n    cout << \"push \" << 10 << endl;\n\n    queue.push(15);\n    cout << \"push \" << 15 << endl;\n\n    queue.push(20);\n    cout << \"push \" << 20 << endl;\n\n    queue.push(25);\n    cout << \"push \" << 25 << endl;\n\n    cout << \"Esperado: [10, 15, 20, 25]\" << endl;\n    cout << \"Fila: \"; queue.print();\n}\n\n/////////////// TESTE POP ///////////////\n\nvoid test_pop() {\n    cout << \"TESTE pop\" << endl;\n    SequentialQueue queue(8);\n\n    push_test(queue, 10);\n    push_test(queue, 15);\n    push_test(queue, 20);\n    push_test(queue, 25);\n    push_test(queue, 30);\n\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n}\n\n/////////////// TESTE CLEAR ///////////////\n\nvoid test_clear() {}\n\n/////////////// TESTE SIZE ///////////////\n\nvoid test_all() {\n    cout << \"TESTE todos (push, pop, peek, size), capacity = 6\" << endl;\n    SequentialQueue queue(6);\n    int x = 1;\n    \n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    \n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    \n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    \n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"Lista: \"; queue.print();\n    cout << \"size: \" << queue.size << endl;\n\n    cout << \"clear\" << endl; queue.clear();\n    cout << \"Fila: \"; queue.print();\n    cout << \"size: \" << queue.size << endl;\n}\n\n/////////////// FIM TESTES ///////////////\n\nint main() {\n    std::string input;\n    std::cin >> input;\n\n    if(input == \"test_peek\") test_peek();\n    if(input == \"test_push\") test_push();\n    if(input == \"test_pop\") test_pop();\n    if(input == \"test_all\") test_all();\n}\n",
                "encoding": 0
            }
        ]
    }
}
