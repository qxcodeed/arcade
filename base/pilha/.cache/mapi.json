{
    "title": "@pilha: Pilha sobre uma lista sequencial",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@pilha: Pilha sobre uma lista sequencial</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Pilha sobre uma lista sequencial</h1>\n<ul>\n<li>A pilha \u00e9 uma estrutura de dados linear que armazena elementos de forma ordenada, onde o \u00faltimo elemento adicionado \u00e9 o primeiro a ser removido (LIFO - Last In First Out).</li>\n<li>A pilha pode ser implementada utilizando uma lista sequencial, onde os elementos s\u00e3o armazenados em um vetor e o topo da pilha \u00e9 representado pelo \u00faltimo \u00edndice ocupado do vetor.</li>\n<li>A pilha possui duas opera\u00e7\u00f5es principais: empilhar (push) e desempilhar (pop).</li>\n<li>A opera\u00e7\u00e3o de empilhar adiciona um elemento ao topo da pilha, enquanto a opera\u00e7\u00e3o de desempilhar remove o elemento do topo da pilha.</li>\n<li>Uma implementa\u00e7\u00e3o eficiente da pilha pode ser efetuada sobre uma lista sequencial, por exemplo, a atividade <a href=\"https://github.com/qxcodeed/arcade/blob/master/base/pilha/../vetbuild/Readme.md\">@vetbuild</a>.</li>\n<li>Nesse modelo, a pilha \u00e9 apenas uma restri\u00e7\u00e3o dos m\u00e9todos de acesso e manipula\u00e7\u00e3o da lista sequencial, ou seja, a pilha \u00e9 uma lista sequencial com restri\u00e7\u00f5es.</li>\n<li>Para essa atividade, voc\u00ea deve implementar uma pilha utilizando uma lista sequencial, preferencialmente gen\u00e9rica, ou seja, que funcione para qualquer tipo de dado. A base por baixo da pilha \u00e9 qualquer vetor din\u00e2mico que sua linguagem j\u00e1 tenha implementado.<ul>\n<li>list em python</li>\n<li>vector em C++</li>\n<li>ArrayList em Java</li>\n<li>slices em Go</li>\n</ul>\n</li>\n<li>A pilha deve ter as seguintes opera\u00e7\u00f5es:<ul>\n<li>Criar uma pilha vazia, com capacidade inicial: O(1).</li>\n<li>Verificar se a pilha est\u00e1 vazia: O(1).</li>\n<li>Empilhar um elemento, redimensionando o vetor se necess\u00e1rio: O(1) amortizado.</li>\n<li>Desempilhar um elemento: O(1).</li>\n<li>Obter o elemento do topo da pilha: O(1).</li>\n<li>Obter o tamanho da pilha: O(1).</li>\n<li>Limpar a pilha: O(1).</li>\n<li>Gerar um texto com os elementos da pilha: O(n).</li>\n</ul>\n</li>\n<li>\n<p>Observa\u00e7\u00f5es interessantes:</p>\n<ul>\n<li>Diferente da lista sequencial, a pilha n\u00e3o deve ter um m\u00e9todo de acesso direto aos elementos, ou seja, n\u00e3o deve ter um m\u00e9todo que permita acessar um elemento em uma posi\u00e7\u00e3o espec\u00edfica da pilha. A \u00fanica forma de acessar os elementos da pilha \u00e9 atrav\u00e9s das opera\u00e7\u00f5es de empilhar e desempilhar.</li>\n<li>Pilhas normalmente n\u00e3o possuem iteradores, m\u00e9todos de busca ou percorrimento. O m\u00e9todo toString aqui \u00e9 apenas para debug e visualiza\u00e7\u00e3o do estado da pilha e normalmente n\u00e3o \u00e9 disponibilizado em implementa\u00e7\u00f5es reais de pilhas.</li>\n</ul>\n</li>\n<li>\n<p>Voc\u00ea encontrar\u00e1 orienta\u00e7\u00f5es espec\u00edficas de cada linguagem no arquivo <code>extra.md</code>.</p>\n</li>\n</ul>\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE empilhar</span>\n<span class=\"c1\"># $init &lt;capacidade&gt;</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"c1\"># show the current state of the stack, using _ for unused capacity</span>\n<span class=\"nv\">$debug</span>\n_,<span class=\"w\"> </span>_\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$debug</span>\n<span class=\"m\">1</span>,<span class=\"w\"> </span>_\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$debug</span>\n<span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$debug</span>\n<span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span>_\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE desempilhar</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"nv\">$debug</span>\n<span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"nv\">$top</span>\n<span class=\"m\">8</span>\n<span class=\"nv\">$size</span>\n<span class=\"m\">5</span>\n<span class=\"nv\">$clear</span>\n<span class=\"nv\">$debug</span>\n_,<span class=\"w\"> </span>_,<span class=\"w\"> </span>_,<span class=\"w\"> </span>_,<span class=\"w\"> </span>_\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE erros</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$pop</span>\nstack<span class=\"w\"> </span>is<span class=\"w\"> </span>empty\n<span class=\"nv\">$top</span>\nstack<span class=\"w\"> </span>is<span class=\"w\"> </span>empty\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"nv\">$debug</span>\n<span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">8</span>,<span class=\"w\"> </span>_,<span class=\"w\"> </span>_,<span class=\"w\"> </span>_\n<span class=\"nv\">$pop</span>\n<span class=\"nv\">$debug</span>\n<span class=\"m\">2</span>,<span class=\"w\"> </span>_,<span class=\"w\"> </span>_,<span class=\"w\"> </span>_,<span class=\"w\"> </span>_\n<span class=\"nv\">$pop</span>\n<span class=\"nv\">$debug</span>\n_,<span class=\"w\"> </span>_,<span class=\"w\"> </span>_,<span class=\"w\"> </span>_,<span class=\"w\"> </span>_\n<span class=\"nv\">$pop</span>\nstack<span class=\"w\"> </span>is<span class=\"w\"> </span>empty\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT empilhar\ninit 2\ndebug\npush 1\ndebug\npush 2\ndebug\npush 3\ndebug\nend\n======== EXPECT\n$init 2\n$debug\n_, _\n$push 1\n$debug\n1, _\n$push 2\n$debug\n1, 2\n$push 3\n$debug\n1, 2, 3, _\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT desempilhar\ninit 5\npush 5\npush 4\npush 3\npush 2\npush 8\ndebug\ntop\nsize\nclear\ndebug\nend\n======== EXPECT\n$init 5\n$push 5\n$push 4\n$push 3\n$push 2\n$push 8\n$debug\n5, 4, 3, 2, 8\n$top\n8\n$size\n5\n$clear\n$debug\n_, _, _, _, _\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT erros\ninit 5\npop\ntop\npush 2\npush 8\ndebug\npop\ndebug\npop\ndebug\npop\nend\n======== EXPECT\n$init 5\n$pop\nstack is empty\n$top\nstack is empty\n$push 2\n$push 8\n$debug\n2, 8, _, _, _\n$pop\n$debug\n2, _, _, _, _\n$pop\n$debug\n_, _, _, _, _\n$pop\nstack is empty\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# Orienta\u00e7\u00f5es de Implementa\u00e7\u00e3o\n\n```go\ntype Stack[T any] struct {   // Uma pilha gen\u00e9rica que pode armazenar qualquer tipo de dado.\n    data []T                 // Os dados s\u00e3o armazenados em um slice, a capacidade do slice \u00e9 a capacidade da pilha.\n    Push(value T)            // Adiciona um valor ao topo da pilha utilizando append.\n    Pop() error              // Remove o valor do topo da pilha.\n    Peek() (T, error)        // Retorna o valor do topo da pilha sem remov\u00ea-lo.\n    IsEmpty() bool           // Retorna true se a pilha estiver vazia.\n    Size() int               // Retorna o n\u00famero de elementos na pilha. Isso equivale ao tamanho do slice.\n    Clear()                  // Limpa a pilha, removendo todos os elementos.\n    String() string          // Retorna uma representa\u00e7\u00e3o em string dos elementos da pilha para efeitos de debug.\n}\n\nfunc NewStack[T any](cap int) *Stack[T]  // Cria uma nova pilha com a capacidade inicial especificada\n```\n\nPara remover o \u00faltimo elemento ou zerar o slice, voc\u00ea pode usar as opera\u00e7\u00f5es de slice do Go, como `s = s[:len(s)-1]` para remover o \u00faltimo elemento ou `s = s[:0]` para zerar o slice. O operador de fatiamento mant\u00e9m a capacidade original do bloco alocado, ele apenas manipula o tamanho do slice, o que \u00e9 eficiente em termos de mem\u00f3ria.\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\ntype Stack[T any] struct {\n\tdata []T\n}\n\n// func (s *Stack[T]) String() string {\n// \toutput := \"\"\n// \tfor i := range cap(s.data) {\n// \t\tif i != 0 {\n// \t\t\toutput += \", \"\n// \t\t}\n// \t\tif i < len(s.data) {\n// \t\t\toutput += fmt.Sprintf(\"%d\", s.data[i])\n// \t\t} else {\n// \t\t\toutput += \"_\"\n// \t\t}\n// \t}\n// \treturn output\n// }\n// \nfunc main() {\n\tvar line, cmd string\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\t// v := NewStack[int](10)\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline = scanner.Text()\n\t\tfmt.Println(line)\n\t\tparts := strings.Fields(line)\n\t\tif len(parts) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcmd = parts[0]\n\n\t\tswitch cmd {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"init\":\n\t\t\t// cap, _ := strconv.Atoi(parts[1])\n\t\t\t// v = NewStack[int](cap)\n\t\tcase \"push\":\n\t\t\t// for _, part := range parts[1:] {\n\t\t\t// \tvalue, _ := strconv.Atoi(part)\n\t\t\t// \tv.Push(value)\n\t\t\t// }\n\t\tcase \"debug\":\n\t\t\t// fmt.Println(v)\n\t\tcase \"top\":\n\t\t\t// top, err := v.Peek()\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(top)\n\t\t\t// }\n\t\tcase \"size\":\n\t\t\t// fmt.Println(v.Size())\n\t\tcase \"pop\":\n\t\t\t// err := v.Pop()\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// }\n\t\tcase \"clear\":\n\t\t\t// v.Clear()\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
