{
    "title": "@dividido: Percorrer in-order",
    "description": "# Percorrer in-order\n\n<!--TOC_BEGIN-->\n- [Descri\u00e7\u00e3o](#descri\u00e7\u00e3o)\n- [lib](#lib)\n- [Arquivos](#arquivos)\n- [Testes](#testes)\n<!--TOC_END-->\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/dividido/cover.jpg)\n\n## Descri\u00e7\u00e3o\n\n- Leia a string que representa a \u00e1rvore serializada.\n- Voc\u00ea deve construir a \u00e1rvore a partir da string implementando corretamente o construtor do c\u00f3digo de partida.\n- Voc\u00ea pode entender a l\u00f3gica de serializa\u00e7\u00e3o no seguinte [link](https://www.geeksforgeeks.org/serialize-deserialize-binary-tree/).\n- A sa\u00edda \u00e9 a \u00e1rvore percorrida in-order, mas j\u00e1 est\u00e1 implementado.\n\n## lib\n\n- lib.hpp\n\n<!--ADD lib.hpp cpp-->\n```cpp\n#pragma once\n#include <iostream>\nusing namespace std;\n\nstruct Node {\n    int value;\n    Node * left;\n    Node * right;\n    Node(int value = 0, Node * left = nullptr, Node * right = nullptr){\n        this->value = value;\n        this->left = left;\n        this->right = right;\n    }\n};\n\nclass BTree {\npublic:\n    Node * root {nullptr};\n    BTree(string serial);\n    ~BTree();\n    std::string format();\n    std::string in_order();\n};\n```\n<!--ADD_END-->\n\n## Arquivos\n\n- [main.cpp](https://github.com/qxcodeed/arcade/blob/master/base/dividido/main.cpp)\n- [student.cpp](https://github.com/qxcodeed/arcade/blob/master/base/dividido/student.cpp)\n- [lib.h](https://github.com/qxcodeed/arcade/blob/master/base/dividido/lib.hpp)\n- [lib.cpp](https://github.com/qxcodeed/arcade/blob/master/base/dividido/lib.cpp)\n\n## Testes\n\n```txt\n>>>>>>>> um\n4 # # \n========\n[ 4 ]\n<<<<<<<<\n\n>>>>>>>> dois\n1 # 0 # # \n========\n[ 1 0 ]\n<<<<<<<<\n\n>>>>>>>> tres\n4 # 8 2 # # # \n========\n[ 4 2 8 ]\n<<<<<<<<\n\n>>>>>>>> quatro\n0 9 4 # # # 5 # # \n========\n[ 4 9 0 5 ]\n<<<<<<<<\n\n>>>>>>>> cinco\n0 4 # # 2 0 # # 3 # # \n========\n[ 4 0 0 2 3 ]\n<<<<<<<<\n\n>>>>>>>> seis\n2 0 0 # # # 3 # 7 # 9 # # \n========\n[ 0 0 2 3 7 9 ]\n<<<<<<<<\n\n>>>>>>>> dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n========\n[ 7 8 4 6 1 0 5 9 2 3 ]\n<<<<<<<<\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT um\n4 # # \n======== EXPECT\n[ 4 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dois\n1 # 0 # # \n======== EXPECT\n[ 1 0 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT tres\n4 # 8 2 # # # \n======== EXPECT\n[ 4 2 8 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT quatro\n0 9 4 # # # 5 # # \n======== EXPECT\n[ 4 9 0 5 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT cinco\n0 4 # # 2 0 # # 3 # # \n======== EXPECT\n[ 4 0 0 2 3 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT seis\n2 0 0 # # # 3 # 7 # 9 # # \n======== EXPECT\n[ 0 0 2 3 7 9 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n======== EXPECT\n[ 7 8 4 6 1 0 5 9 2 3 ]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
