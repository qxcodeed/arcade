{
    "title": "@soma: Soma e M\u00ednimo Recursivos",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@soma: Soma e M\u00ednimo Recursivos</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Soma e M\u00ednimo Recursivos</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#descri\u00e7\u00e3o\">Descri\u00e7\u00e3o</a></th>\n<th><a href=\"#testes\">Testes</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/soma/cover.jpg\" /></p>\n<h2>Descri\u00e7\u00e3o</h2>\n<p>Implemente os m\u00e9todos solicitados no rascunho de acordo com os coment\u00e1rios no c\u00f3digo. Essa N\u00c3O \u00e9 uma \u00e1rvore bin\u00e1ria de busca. \u00c9 uma \u00e1rvore bin\u00e1ria gen\u00e9rica no qual os n\u00f3s podem conter quaisquer valores.</p>\n<h2>Testes</h2>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT 01 um\n4 # # \n======== EXPECT\nArvore:\n4\nSoma: 4, Minimo: 4\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT 02 dois\n1 # 0 # # \n======== EXPECT\nArvore:\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25000\nSoma: 1, Minimo: 0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT 03 tres\n4 # 8 2 # # # \n======== EXPECT\nArvore:\n\u256d\u2500\u2500\u2500#\n4\n\u2502   \u256d\u2500\u2500\u25002\n\u2570\u2500\u2500\u25008\n    \u2570\u2500\u2500\u2500#\nSoma: 14, Minimo: 2\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT 04 quatro\n0 9 4 # # # 5 # # \n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25004\n\u256d\u2500\u2500\u25009\n\u2502   \u2570\u2500\u2500\u2500#\n0\n\u2570\u2500\u2500\u25005\nSoma: 18, Minimo: 0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT 05 cinco\n0 4 # # 2 0 # # -3 # # \n======== EXPECT\nArvore:\n\u256d\u2500\u2500\u25004\n0\n\u2502   \u256d\u2500\u2500\u25000\n\u2570\u2500\u2500\u25002\n    \u2570\u2500\u2500\u2500-3\nSoma: 3, Minimo: -3\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT 06 seis\n2 0 5 # # # 3 # 7 # -9 # # \n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25005\n\u256d\u2500\u2500\u25000\n\u2502   \u2570\u2500\u2500\u2500#\n2\n\u2502   \u256d\u2500\u2500\u2500#\n\u2570\u2500\u2500\u25003\n    \u2502   \u256d\u2500\u2500\u2500#\n    \u2570\u2500\u2500\u25007\n        \u2570\u2500\u2500\u2500-9\nSoma: 8, Minimo: -9\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT 07 dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25007\n\u256d\u2500\u2500\u25008\n\u2502   \u2502   \u256d\u2500\u2500\u2500#\n\u2502   \u2570\u2500\u2500\u25004\n\u2502       \u2570\u2500\u2500\u25006\n1\n\u2502   \u256d\u2500\u2500\u25000\n\u2570\u2500\u2500\u25005\n    \u2502   \u256d\u2500\u2500\u2500#\n    \u2570\u2500\u2500\u25009\n        \u2502   \u256d\u2500\u2500\u25002\n        \u2570\u2500\u2500\u25003\n            \u2570\u2500\u2500\u2500#\nSoma: 45, Minimo: 0\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01 um\n4 # # \n======== EXPECT\nArvore:\n4\nSoma: 4, Minimo: 4\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02 dois\n1 # 0 # # \n======== EXPECT\nArvore:\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25000\nSoma: 1, Minimo: 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03 tres\n4 # 8 2 # # # \n======== EXPECT\nArvore:\n\u256d\u2500\u2500\u2500#\n4\n\u2502   \u256d\u2500\u2500\u25002\n\u2570\u2500\u2500\u25008\n    \u2570\u2500\u2500\u2500#\nSoma: 14, Minimo: 2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04 quatro\n0 9 4 # # # 5 # # \n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25004\n\u256d\u2500\u2500\u25009\n\u2502   \u2570\u2500\u2500\u2500#\n0\n\u2570\u2500\u2500\u25005\nSoma: 18, Minimo: 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05 cinco\n0 4 # # 2 0 # # -3 # # \n======== EXPECT\nArvore:\n\u256d\u2500\u2500\u25004\n0\n\u2502   \u256d\u2500\u2500\u25000\n\u2570\u2500\u2500\u25002\n    \u2570\u2500\u2500\u2500-3\nSoma: 3, Minimo: -3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06 seis\n2 0 5 # # # 3 # 7 # -9 # # \n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25005\n\u256d\u2500\u2500\u25000\n\u2502   \u2570\u2500\u2500\u2500#\n2\n\u2502   \u256d\u2500\u2500\u2500#\n\u2570\u2500\u2500\u25003\n    \u2502   \u256d\u2500\u2500\u2500#\n    \u2570\u2500\u2500\u25007\n        \u2570\u2500\u2500\u2500-9\nSoma: 8, Minimo: -9\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07 dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n======== EXPECT\nArvore:\n    \u256d\u2500\u2500\u25007\n\u256d\u2500\u2500\u25008\n\u2502   \u2502   \u256d\u2500\u2500\u2500#\n\u2502   \u2570\u2500\u2500\u25004\n\u2502       \u2570\u2500\u2500\u25006\n1\n\u2502   \u256d\u2500\u2500\u25000\n\u2570\u2500\u2500\u25005\n    \u2502   \u256d\u2500\u2500\u2500#\n    \u2570\u2500\u2500\u25009\n        \u2502   \u256d\u2500\u2500\u25002\n        \u2570\u2500\u2500\u25003\n            \u2570\u2500\u2500\u2500#\nSoma: 45, Minimo: 0\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "__main.cpp",
                "contents": "\n#include <iostream>\n#include <sstream>\n#include <stack>\nusing namespace std;\n\n\nstruct Node{\n    int value;\n    Node * left;\n    Node * right;\n    Node(int value = 0, Node * left = nullptr, Node * right = nullptr){\n        this->value = value;\n        this->left = left;\n        this->right = right;\n    }\n};\n\n// Imprime o n\u00f3 atual com o espa\u00e7amento baseado na profundidade\nint rec_sum(Node * node) {\n    if (node == nullptr) {\n        return 0;\n    }\n    return node->value + rec_sum(node->left) + rec_sum(node->right);\n}\n\nint rec_min(Node * node) {\n    if (node->left == nullptr && node->right == nullptr) {\n        return node->value;\n    }\n    auto value = node->value;\n    if (node->left != nullptr) {\n        value = min(value, rec_min(node->left));\n    }\n    if (node->right != nullptr) {\n        value = min(value, rec_min(node->right));\n    }\n    return value;\n}\n// ---------------------------------------------------------\n// N\u00e3o altere daqui para baixo.\n\nvoid bshow(Node * node, string history = \"\"){\n    if(node != nullptr && (node->left != nullptr || node->right != nullptr))\n        bshow(node->left , history + \"l\");\n    for(int i = 0; i < (int) history.size() - 1; i++)\n        cout << (history[i] != history[i + 1] ? \"\u2502   \" : \"    \");\n    if(history != \"\")\n        cout << (history.back() == 'l' ? \"\u256d\u2500\u2500\u2500\" : \"\u2570\u2500\u2500\u2500\");\n    if(node == nullptr){\n        cout << \"#\" << endl;\n        return;\n    }\n    cout << node->value << endl;\n    if(node->left != nullptr || node->right != nullptr) {\n        bshow(node->right, history + \"r\");\n    }\n}\n\nNode* clone(stringstream& ss) {\n    string value;\n    ss >> value;\n    if(value == \"#\")\n        return nullptr;\n    int num;\n    stringstream(value) >> num;\n    Node* node = new Node(num);\n    node->left = clone(ss);\n    node->right = clone(ss);\n    return node;\n}\n\n\nint main(){\n    string line;\n    getline(cin, line);\n    stringstream ss(line);\n    Node* root = clone(ss);\n    cout << \"Arvore:\\n\";\n    bshow(root);\n    cout << \"Soma: \" << rec_sum(root) << \", Minimo: \" << rec_min(root) << endl;\n    return 0;\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Node struct {\n\tValue int\n\tLeft  *Node\n\tRight *Node\n}\n\nfunc rec_sum(node *Node) int {\n\t_ = node\n\treturn 0\n}\n\nfunc rec_min(node *Node) int {\n\t_ = node\n\treturn 0\n}\n\n// MyShow imprime a \u00e1rvore bin\u00e1ria de forma formatada.\nfunc MyShow(node *Node, nivel int) {\n\t_, _ = node, nivel\n\t// TODO\n}\n\nfunc BShow(node *Node, heranca string) {\n\tif node != nil && (node.Left != nil || node.Right != nil) {\n\t\tBShow(node.Left, heranca+\"l\")\n\t}\n\tfor i := 0; i < len(heranca)-1; i++ {\n\t\tif heranca[i] != heranca[i+1] {\n\t\t\tfmt.Print(\"\u2502   \")\n\t\t} else {\n\t\t\tfmt.Print(\"    \")\n\t\t}\n\t}\n\tif heranca != \"\" {\n\t\tif heranca[len(heranca)-1] == 'l' {\n\t\t\tfmt.Print(\"\u256d\u2500\u2500\u2500\")\n\t\t} else {\n\t\t\tfmt.Print(\"\u2570\u2500\u2500\u2500\")\n\t\t}\n\t}\n\tif node == nil {\n\t\tfmt.Println(\"#\")\n\t\treturn\n\t}\n\tfmt.Println(node.Value)\n\tif node.Left != nil || node.Right != nil {\n\t\tBShow(node.Right, heranca+\"r\")\n\t}\n}\n\nfunc create(parts *[]string) *Node {\n\telem := (*parts)[0]\n\t*parts = (*parts)[1:]\n\tif elem == \"#\" {\n\t\treturn nil\n\t}\n\tvalue, _ := strconv.Atoi(elem)\n\tnode := &Node{Value: value}\n\tnode.Left = create(parts)\n\tnode.Right = create(parts)\n\treturn node\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tscanner.Scan()\n\tparts := strings.Split(scanner.Text(), \" \")\n\troot := create(&parts)\n\tfmt.Println(\"Arvore:\")\n\tBShow(root, \"\")\n\tfmt.Printf(\"Soma: %d, Minimo: %d\\n\", rec_sum(root), rec_min(root))\n}\n",
                "type": "show"
            }
        ],
        "py": [
            {
                "name": "__main.py",
                "contents": "class Node:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\nclass BTree:\n    def __init__(self, serial=None):\n        self.root = None\n    def __clone(self, ss, index=[0]):\n        if index[0] >= len(ss):\n            return None\n            \n        value = ss[index[0]]\n        index[0] += 1\n        \n        if value == '#':\n            return None\n            \n        try:\n            num = int(value)\n        except ValueError:\n            return None\n            \n        node = Node(num)\n        node.left = self.__clone(ss, index)\n        node.right = self.__clone(ss, index)\n        return node\n    \n    def bshow(self):\n        self.__bshow(self.root, \"\")\n\n    def __bshow(self, node, inheritance):\n        if node is not None and (node.left is not None or node.right is not None):\n            self.__bshow(node.left, inheritance + \"l\")\n        \n        for i in range(len(inheritance) - 1):\n            print(\"\u2502   \" if inheritance[i] != inheritance[i+1] else \"    \", end=\"\")\n        \n        if inheritance:\n            print(\"\u250c\u2500\u2500\u2500\" if inheritance[-1] == 'l' else \"\u2514\u2500\u2500\u2500\", end=\"\")\n        \n        print(\"#\" if node is None else node.value)\n        \n        if node is not None and (node.left is not None or node.right is not None):\n            self.__bshow(node.right, inheritance + \"r\")\n\nif __name__ == \"__main__\":\n    line = input().strip()\n    bt = BTree(line)\n    bt.bshow()\n    #print(f\"{bt.sum()} {bt.min()}\")\n",
                "type": "show"
            }
        ]
    }
}
