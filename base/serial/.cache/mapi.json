{
    "title": "@serial: Lendo uma \u00e1rvore a partir de um serial",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@serial: Lendo uma \u00e1rvore a partir de um serial</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@serial: Lendo uma \u00e1rvore a partir de um serial</h1>\n            <h1 id=\"lendo-uma-arvore-a-partir-de-um-serial\">Lendo uma \u00e1rvore a partir de um serial</h1>\n<!--TOC_BEGIN-->\n<ul>\n<li><a href=\"#descri\u00e7\u00e3o\">Descri\u00e7\u00e3o</a></li>\n<li><a href=\"#testes\">Testes</a></li>\n<li><a href=\"#ajuda\">Ajuda</a></li>\n<li><a href=\"#c\u00f3digo-base\">C\u00f3digo base</a></li>\n</ul>\n<!--TOC_END-->\n\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/serial/cover.jpg\" /></p>\n<h2 id=\"descricao\">Descri\u00e7\u00e3o</h2>\n<ul>\n<li>Leia a string que representa a \u00e1rvore serializada.</li>\n<li>Voc\u00ea deve construir a \u00e1rvore a partir da string implementando corretamente o construtor do c\u00f3digo de partida.</li>\n<li>Voc\u00ea pode entender a l\u00f3gica de serializa\u00e7\u00e3o no seguinte <a href=\"https://www.geeksforgeeks.org/serialize-deserialize-binary-tree/\">link</a>.</li>\n<li>A sa\u00edda \u00e9 a \u00e1rvore percorrida in-order, mas j\u00e1 est\u00e1 implementado no c\u00f3digo de partida.</li>\n</ul>\n<h2 id=\"testes\">Testes</h2>\n<div class=\"codehilite\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; um\n4 # # \n========\n[ 4 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; dois\n1 # 0 # # \n========\n[ 1 0 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; tres\n4 # 8 2 # # # \n========\n[ 4 2 8 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; quatro\n0 9 4 # # # 5 # # \n========\n[ 4 9 0 5 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; cinco\n0 4 # # 2 0 # # 3 # # \n========\n[ 4 0 0 2 3 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; seis\n2 0 0 # # # 3 # 7 # 9 # # \n========\n[ 0 0 2 3 7 9 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n========\n[ 7 8 4 6 1 0 5 9 2 3 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre></div>\n\n<h2 id=\"ajuda\">Ajuda</h2>\n<p>Voc\u00ea pode utilizar o c\u00f3digo a seguir como ponto de partida. O m\u00e9todo <code>bshow</code> da \u00e1rvore imprime a \u00e1rvore em um formato amig\u00e1vel. Voc\u00ea pode utiliz\u00e1-lo para conferir se seu c\u00f3digo est\u00e1 funcionando corretamente.</p>\n<p>Para o caso da \u00e1rvore do \u00faltimo teste, temos essa sa\u00edda.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">//serial</span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"err\">#</span>\n\n<span class=\"c1\">//bshow()</span>\n<span class=\"w\">    </span><span class=\"err\">\u250c\u2500\u2500\u2500</span><span class=\"mi\">7</span>\n<span class=\"err\">\u250c\u2500\u2500\u2500</span><span class=\"mi\">8</span>\n<span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u250c\u2500\u2500\u2500#</span>\n<span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u2514\u2500\u2500\u2500</span><span class=\"mi\">4</span>\n<span class=\"err\">\u2502</span><span class=\"w\">       </span><span class=\"err\">\u2514\u2500\u2500\u2500</span><span class=\"mi\">6</span>\n<span class=\"mi\">1</span>\n<span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u250c\u2500\u2500\u2500</span><span class=\"mi\">0</span>\n<span class=\"err\">\u2514\u2500\u2500\u2500</span><span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u250c\u2500\u2500\u2500#</span>\n<span class=\"w\">    </span><span class=\"err\">\u2514\u2500\u2500\u2500</span><span class=\"mi\">9</span>\n<span class=\"w\">        </span><span class=\"err\">\u2502</span><span class=\"w\">   </span><span class=\"err\">\u250c\u2500\u2500\u2500</span><span class=\"mi\">2</span>\n<span class=\"w\">        </span><span class=\"err\">\u2514\u2500\u2500\u2500</span><span class=\"mi\">3</span>\n<span class=\"w\">            </span><span class=\"err\">\u2514\u2500\u2500\u2500#</span>\n</code></pre></div>\n\n<p>Para simplificar o c\u00f3digo, estou utilizando a conven\u00e7\u00e3o <code>__</code> para expressar quais s\u00e3o os m\u00e9todos privados, pr\u00f3pria do python.</p>\n<p>Os locais onde voc\u00ea deve colocar seu c\u00f3digo est\u00e3o marcados com //TODO. Como estamos lidando com \u00e1rvores, voc\u00ea dever\u00e1 criar tamb\u00e9m os m\u00e9todos recursivos para realizar a opera\u00e7\u00e3o de constru\u00e7\u00e3o da \u00e1rvore.</p>\n<h2 id=\"codigo-base\">C\u00f3digo base</h2>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sstream&gt;</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"k\">namespace</span><span class=\"w\"> </span><span class=\"nn\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Node</span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">BTree</span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"k\">nullptr</span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"n\">BTree</span><span class=\"p\">(){</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n\n<span class=\"w\">    </span><span class=\"n\">BTree</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">serial</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"c1\">//TODO fa\u00e7a o construtor que constroi a \u00e1rvore utilizando o texto</span>\n<span class=\"w\">        </span><span class=\"c1\">//aprenda a utilizar o stringstream, se voc\u00ea ainda n\u00e3o sabe</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"o\">~</span><span class=\"n\">BTree</span><span class=\"p\">(){</span><span class=\"w\"> </span><span class=\"c1\">//destrutor da \u00e1rvore</span>\n<span class=\"w\">        </span><span class=\"n\">__destroy</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">root</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"n\">__destroy</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">__destroy</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">__destroy</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">delete</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"n\">bshow</span><span class=\"p\">(){</span>\n<span class=\"w\">        </span><span class=\"n\">__bshow</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">root</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"n\">__bshow</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">heranca</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;&quot;</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"n\">__bshow</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">heranca</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"s\">&quot;l&quot;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">heranca</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">heranca</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">heranca</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"s\">&quot;\u2502   &quot;</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">&quot;    &quot;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">heranca</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">heranca</span><span class=\"p\">.</span><span class=\"n\">back</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"sc\">&#39;l&#39;</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"s\">&quot;\u250c\u2500\u2500\u2500&quot;</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">&quot;\u2514\u2500\u2500\u2500&quot;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">){</span>\n<span class=\"w\">            </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;#&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"n\">__bshow</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">heranca</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"s\">&quot;r&quot;</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"n\">show_in_order</span><span class=\"p\">(){</span>\n<span class=\"w\">        </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;[ &quot;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">__show_in_order</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;]</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"n\">__show_in_order</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">__show_in_order</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot; &quot;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">__show_in_order</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"w\">    </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">getline</span><span class=\"p\">(</span><span class=\"n\">cin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">BTree</span><span class=\"w\"> </span><span class=\"n\">bt</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">bt</span><span class=\"p\">.</span><span class=\"n\">show_in_order</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT um\n4 # # \n======== EXPECT\n[ 4 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dois\n1 # 0 # # \n======== EXPECT\n[ 1 0 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT tres\n4 # 8 2 # # # \n======== EXPECT\n[ 4 2 8 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT quatro\n0 9 4 # # # 5 # # \n======== EXPECT\n[ 4 9 0 5 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT cinco\n0 4 # # 2 0 # # 3 # # \n======== EXPECT\n[ 4 0 0 2 3 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT seis\n2 0 0 # # # 3 # 7 # 9 # # \n======== EXPECT\n[ 0 0 2 3 7 9 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n======== EXPECT\n[ 7 8 4 6 1 0 5 9 2 3 ]\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
