{
    "title": "@serial: Lendo uma \u00e1rvore a partir de um serial",
    "description": "# Lendo uma \u00e1rvore a partir de um serial\n\n<!--TOC_BEGIN-->\n- [Descri\u00e7\u00e3o](#descri\u00e7\u00e3o)\n- [Testes](#testes)\n- [Ajuda](#ajuda)\n- [C\u00f3digo base](#c\u00f3digo-base)\n<!--TOC_END-->\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/serial/cover.jpg)\n\n## Descri\u00e7\u00e3o\n\n- Leia a string que representa a \u00e1rvore serializada.\n- Voc\u00ea deve construir a \u00e1rvore a partir da string implementando corretamente o construtor do c\u00f3digo de partida.\n- Voc\u00ea pode entender a l\u00f3gica de serializa\u00e7\u00e3o no seguinte [link](https://www.geeksforgeeks.org/serialize-deserialize-binary-tree/).\n- A sa\u00edda \u00e9 a \u00e1rvore percorrida in-order, mas j\u00e1 est\u00e1 implementado no c\u00f3digo de partida.\n\n## Testes\n\n```txt\n>>>>>>>> um\n4 # # \n========\n[ 4 ]\n<<<<<<<<\n\n>>>>>>>> dois\n1 # 0 # # \n========\n[ 1 0 ]\n<<<<<<<<\n\n>>>>>>>> tres\n4 # 8 2 # # # \n========\n[ 4 2 8 ]\n<<<<<<<<\n\n>>>>>>>> quatro\n0 9 4 # # # 5 # # \n========\n[ 4 9 0 5 ]\n<<<<<<<<\n\n>>>>>>>> cinco\n0 4 # # 2 0 # # 3 # # \n========\n[ 4 0 0 2 3 ]\n<<<<<<<<\n\n>>>>>>>> seis\n2 0 0 # # # 3 # 7 # 9 # # \n========\n[ 0 0 2 3 7 9 ]\n<<<<<<<<\n\n>>>>>>>> dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n========\n[ 7 8 4 6 1 0 5 9 2 3 ]\n<<<<<<<<\n\n```\n\n## Ajuda\n\nVoc\u00ea pode utilizar o c\u00f3digo a seguir como ponto de partida. O m\u00e9todo `bshow` da \u00e1rvore imprime a \u00e1rvore em um formato amig\u00e1vel. Voc\u00ea pode utiliz\u00e1-lo para conferir se seu c\u00f3digo est\u00e1 funcionando corretamente.\n\nPara o caso da \u00e1rvore do \u00faltimo teste, temos essa sa\u00edda.\n\n```c\n//serial\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # #\n\n//bshow()\n    \u250c\u2500\u2500\u25007\n\u250c\u2500\u2500\u25008\n\u2502   \u2502   \u250c\u2500\u2500\u2500#\n\u2502   \u2514\u2500\u2500\u25004\n\u2502       \u2514\u2500\u2500\u25006\n1\n\u2502   \u250c\u2500\u2500\u25000\n\u2514\u2500\u2500\u25005\n    \u2502   \u250c\u2500\u2500\u2500#\n    \u2514\u2500\u2500\u25009\n        \u2502   \u250c\u2500\u2500\u25002\n        \u2514\u2500\u2500\u25003\n            \u2514\u2500\u2500\u2500#\n```\n\nPara simplificar o c\u00f3digo, estou utilizando a conven\u00e7\u00e3o `__` para expressar quais s\u00e3o os m\u00e9todos privados, pr\u00f3pria do python.\n\nOs locais onde voc\u00ea deve colocar seu c\u00f3digo est\u00e3o marcados com //TODO. Como estamos lidando com \u00e1rvores, voc\u00ea dever\u00e1 criar tamb\u00e9m os m\u00e9todos recursivos para realizar a opera\u00e7\u00e3o de constru\u00e7\u00e3o da \u00e1rvore.\n\n## C\u00f3digo base\n\n```cpp\n\n#include <iostream>\n#include <sstream>\nusing namespace std;\n\nstruct Node{\n    int value;\n    Node * left;\n    Node * right;\n    Node(int value = 0, Node * left = nullptr, Node * right = nullptr){\n        this->value = value;\n        this->left = left;\n        this->right = right;\n    }\n};\n\nstruct BTree{\n    Node * root {nullptr};\n    BTree(){\n    }\n\n\n    BTree(string serial){\n        //TODO fa\u00e7a o construtor que constroi a \u00e1rvore utilizando o texto\n        //aprenda a utilizar o stringstream, se voc\u00ea ainda n\u00e3o sabe\n    }\n\n    ~BTree(){ //destrutor da \u00e1rvore\n        __destroy(this->root);\n    }\n\n    void __destroy(Node * node){\n        if(node == nullptr)\n            return;\n        __destroy(node->left);\n        __destroy(node->right);\n        delete node;\n    }\n    \n    void bshow(){\n        __bshow(this->root);\n    }\n\n    void __bshow(Node * node, string heranca = \"\"){\n        if(node != nullptr && (node->left != nullptr || node->right != nullptr))\n            __bshow(node->left , heranca + \"l\");\n        for(int i = 0; i < (int) heranca.size() - 1; i++)\n            cout << (heranca[i] != heranca[i + 1] ? \"\u2502   \" : \"    \");\n        if(heranca != \"\")\n            cout << (heranca.back() == 'l' ? \"\u250c\u2500\u2500\u2500\" : \"\u2514\u2500\u2500\u2500\");\n        if(node == nullptr){\n            cout << \"#\" << endl;\n            return;\n        }\n        cout << node->value << endl;\n        if(node != nullptr && (node->left != nullptr || node->right != nullptr))\n            __bshow(node->right, heranca + \"r\");\n    }\n\n    void show_in_order(){\n        cout << \"[ \";\n        __show_in_order(root);\n        cout << \"]\\n\";\n    }\n\n    void __show_in_order(Node * node){\n        if(node == nullptr)\n            return;\n        __show_in_order(node->left);\n        cout << node->value << \" \";\n        __show_in_order(node->right);\n    }\n\n};\n\nint main(){\n    string line;\n    getline(cin, line);\n    BTree bt(line);\n    bt.show_in_order();\n}\n```",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT um\n4 # # \n======== EXPECT\n[ 4 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dois\n1 # 0 # # \n======== EXPECT\n[ 1 0 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT tres\n4 # 8 2 # # # \n======== EXPECT\n[ 4 2 8 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT quatro\n0 9 4 # # # 5 # # \n======== EXPECT\n[ 4 9 0 5 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT cinco\n0 4 # # 2 0 # # 3 # # \n======== EXPECT\n[ 4 0 0 2 3 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT seis\n2 0 0 # # # 3 # 7 # 9 # # \n======== EXPECT\n[ 0 0 2 3 7 9 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n======== EXPECT\n[ 7 8 4 6 1 0 5 9 2 3 ]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
