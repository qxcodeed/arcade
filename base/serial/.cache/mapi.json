{
    "title": "@serial: Lendo uma \u00e1rvore a partir de um serial",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@serial: Lendo uma \u00e1rvore a partir de um serial</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@serial: Lendo uma \u00e1rvore a partir de um serial</h1>\n            <h1 id=\"lendo-uma-arvore-a-partir-de-um-serial\">Lendo uma \u00e1rvore a partir de um serial</h1>\n<!--TOC_BEGIN-->\n<ul>\n<li><a href=\"#descri\u00e7\u00e3o\">Descri\u00e7\u00e3o</a></li>\n<li><a href=\"#testes\">Testes</a></li>\n<li><a href=\"#ajuda\">Ajuda</a></li>\n<li><a href=\"#c\u00f3digo-base\">C\u00f3digo base</a></li>\n</ul>\n<!--TOC_END-->\n\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/serial/cover.jpg\" /></p>\n<h2 id=\"descricao\">Descri\u00e7\u00e3o</h2>\n<ul>\n<li>Leia a string que representa a \u00e1rvore serializada.</li>\n<li>Voc\u00ea deve construir a \u00e1rvore a partir da string implementando corretamente o construtor do c\u00f3digo de partida.</li>\n<li>Voc\u00ea pode entender a l\u00f3gica de serializa\u00e7\u00e3o no seguinte <a href=\"https://www.geeksforgeeks.org/serialize-deserialize-binary-tree/\">link</a>.</li>\n<li>A sa\u00edda \u00e9 a \u00e1rvore percorrida in-order, mas j\u00e1 est\u00e1 implementado no c\u00f3digo de partida.</li>\n</ul>\n<h2 id=\"testes\">Testes</h2>\n<pre class=\"codehilite\"><code class=\"language-txt\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; um\n4 # # \n========\n[ 4 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; dois\n1 # 0 # # \n========\n[ 1 0 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; tres\n4 # 8 2 # # # \n========\n[ 4 2 8 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; quatro\n0 9 4 # # # 5 # # \n========\n[ 4 9 0 5 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; cinco\n0 4 # # 2 0 # # 3 # # \n========\n[ 4 0 0 2 3 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; seis\n2 0 0 # # # 3 # 7 # 9 # # \n========\n[ 0 0 2 3 7 9 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n========\n[ 7 8 4 6 1 0 5 9 2 3 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre>\n\n<h2 id=\"ajuda\">Ajuda</h2>\n<p>Voc\u00ea pode utilizar o c\u00f3digo a seguir como ponto de partida. O m\u00e9todo <code>bshow</code> da \u00e1rvore imprime a \u00e1rvore em um formato amig\u00e1vel. Voc\u00ea pode utiliz\u00e1-lo para conferir se seu c\u00f3digo est\u00e1 funcionando corretamente.</p>\n<p>Para o caso da \u00e1rvore do \u00faltimo teste, temos essa sa\u00edda.</p>\n<pre class=\"codehilite\"><code class=\"language-c\">//serial\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # #\n\n//bshow()\n    \u250c\u2500\u2500\u25007\n\u250c\u2500\u2500\u25008\n\u2502   \u2502   \u250c\u2500\u2500\u2500#\n\u2502   \u2514\u2500\u2500\u25004\n\u2502       \u2514\u2500\u2500\u25006\n1\n\u2502   \u250c\u2500\u2500\u25000\n\u2514\u2500\u2500\u25005\n    \u2502   \u250c\u2500\u2500\u2500#\n    \u2514\u2500\u2500\u25009\n        \u2502   \u250c\u2500\u2500\u25002\n        \u2514\u2500\u2500\u25003\n            \u2514\u2500\u2500\u2500#\n</code></pre>\n\n<p>Para simplificar o c\u00f3digo, estou utilizando a conven\u00e7\u00e3o <code>__</code> para expressar quais s\u00e3o os m\u00e9todos privados, pr\u00f3pria do python.</p>\n<p>Os locais onde voc\u00ea deve colocar seu c\u00f3digo est\u00e3o marcados com //TODO. Como estamos lidando com \u00e1rvores, voc\u00ea dever\u00e1 criar tamb\u00e9m os m\u00e9todos recursivos para realizar a opera\u00e7\u00e3o de constru\u00e7\u00e3o da \u00e1rvore.</p>\n<h2 id=\"codigo-base\">C\u00f3digo base</h2>\n<pre class=\"codehilite\"><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;sstream&gt;\nusing namespace std;\n\nstruct Node{\n    int value;\n    Node * left;\n    Node * right;\n    Node(int value = 0, Node * left = nullptr, Node * right = nullptr){\n        this-&gt;value = value;\n        this-&gt;left = left;\n        this-&gt;right = right;\n    }\n};\n\nstruct BTree{\n    Node * root {nullptr};\n    BTree(){\n    }\n\n\n    BTree(string serial){\n        //TODO fa\u00e7a o construtor que constroi a \u00e1rvore utilizando o texto\n        //aprenda a utilizar o stringstream, se voc\u00ea ainda n\u00e3o sabe\n    }\n\n    ~BTree(){ //destrutor da \u00e1rvore\n        __destroy(this-&gt;root);\n    }\n\n    void __destroy(Node * node){\n        if(node == nullptr)\n            return;\n        __destroy(node-&gt;left);\n        __destroy(node-&gt;right);\n        delete node;\n    }\n\n    void bshow(){\n        __bshow(this-&gt;root);\n    }\n\n    void __bshow(Node * node, string heranca = &quot;&quot;){\n        if(node != nullptr &amp;&amp; (node-&gt;left != nullptr || node-&gt;right != nullptr))\n            __bshow(node-&gt;left , heranca + &quot;l&quot;);\n        for(int i = 0; i &lt; (int) heranca.size() - 1; i++)\n            cout &lt;&lt; (heranca[i] != heranca[i + 1] ? &quot;\u2502   &quot; : &quot;    &quot;);\n        if(heranca != &quot;&quot;)\n            cout &lt;&lt; (heranca.back() == 'l' ? &quot;\u250c\u2500\u2500\u2500&quot; : &quot;\u2514\u2500\u2500\u2500&quot;);\n        if(node == nullptr){\n            cout &lt;&lt; &quot;#&quot; &lt;&lt; endl;\n            return;\n        }\n        cout &lt;&lt; node-&gt;value &lt;&lt; endl;\n        if(node != nullptr &amp;&amp; (node-&gt;left != nullptr || node-&gt;right != nullptr))\n            __bshow(node-&gt;right, heranca + &quot;r&quot;);\n    }\n\n    void show_in_order(){\n        cout &lt;&lt; &quot;[ &quot;;\n        __show_in_order(root);\n        cout &lt;&lt; &quot;]\\n&quot;;\n    }\n\n    void __show_in_order(Node * node){\n        if(node == nullptr)\n            return;\n        __show_in_order(node-&gt;left);\n        cout &lt;&lt; node-&gt;value &lt;&lt; &quot; &quot;;\n        __show_in_order(node-&gt;right);\n    }\n\n};\n\nint main(){\n    string line;\n    getline(cin, line);\n    BTree bt(line);\n    bt.show_in_order();\n}\n</code></pre>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT um\n4 # # \n======== EXPECT\n[ 4 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dois\n1 # 0 # # \n======== EXPECT\n[ 1 0 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT tres\n4 # 8 2 # # # \n======== EXPECT\n[ 4 2 8 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT quatro\n0 9 4 # # # 5 # # \n======== EXPECT\n[ 4 9 0 5 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT cinco\n0 4 # # 2 0 # # 3 # # \n======== EXPECT\n[ 4 0 0 2 3 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT seis\n2 0 0 # # # 3 # 7 # 9 # # \n======== EXPECT\n[ 0 0 2 3 7 9 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n======== EXPECT\n[ 7 8 4 6 1 0 5 9 2 3 ]\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
