{
    "title": "@serial: Lendo uma \u00e1rvore a partir de um serial",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@serial: Lendo uma \u00e1rvore a partir de um serial</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Lendo uma \u00e1rvore a partir de um serial</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#descri\u00e7\u00e3o\">Descri\u00e7\u00e3o</a></th>\n<th><a href=\"#testes\">Testes</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/serial/cover.jpg\" /></p>\n<h2>Descri\u00e7\u00e3o</h2>\n<ul>\n<li>Leia a string que representa a \u00e1rvore serializada.</li>\n<li>Voc\u00ea deve construir a \u00e1rvore a partir da string implementando corretamente o construtor do c\u00f3digo de partida.</li>\n<li>Voc\u00ea pode entender a l\u00f3gica de serializa\u00e7\u00e3o no seguinte <a href=\"https://www.geeksforgeeks.org/serialize-deserialize-binary-tree/\">link para explica\u00e7\u00e3o</a>.</li>\n<li>A sa\u00edda \u00e9 a \u00e1rvore percorrida in-order, mas j\u00e1 est\u00e1 implementado no c\u00f3digo de partida.</li>\n<li>Baixe o c\u00f3digo de rascunho e implemente a fun\u00e7\u00e3o <code>create</code> para construir a \u00e1rvore a partir da string serializada.</li>\n</ul>\n<h2>Testes</h2>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT um\n4 # # \n======== EXPECT\n4\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT dois\n1 # 0 # # \n======== EXPECT\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25000\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT tres\n4 # 8 2 # # # \n======== EXPECT\n\u256d\u2500\u2500\u2500#\n4\n\u2502   \u256d\u2500\u2500\u25002\n\u2570\u2500\u2500\u25008\n    \u2570\u2500\u2500\u2500#\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT quatro\n0 9 4 # # # 5 # # \n======== EXPECT\n    \u256d\u2500\u2500\u25004\n\u256d\u2500\u2500\u25009\n\u2502   \u2570\u2500\u2500\u2500#\n0\n\u2570\u2500\u2500\u25005\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT cinco\n0 4 # # 2 0 # # 3 # # \n======== EXPECT\n\u256d\u2500\u2500\u25004\n0\n\u2502   \u256d\u2500\u2500\u25000\n\u2570\u2500\u2500\u25002\n    \u2570\u2500\u2500\u25003\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT seis\n2 0 0 # # # 3 # 7 # 9 # # \n======== EXPECT\n    \u256d\u2500\u2500\u25000\n\u256d\u2500\u2500\u25000\n\u2502   \u2570\u2500\u2500\u2500#\n2\n\u2502   \u256d\u2500\u2500\u2500#\n\u2570\u2500\u2500\u25003\n    \u2502   \u256d\u2500\u2500\u2500#\n    \u2570\u2500\u2500\u25007\n        \u2570\u2500\u2500\u25009\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; INSERT dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n======== EXPECT\n    \u256d\u2500\u2500\u25007\n\u256d\u2500\u2500\u25008\n\u2502   \u2502   \u256d\u2500\u2500\u2500#\n\u2502   \u2570\u2500\u2500\u25004\n\u2502       \u2570\u2500\u2500\u25006\n1\n\u2502   \u256d\u2500\u2500\u25000\n\u2570\u2500\u2500\u25005\n    \u2502   \u256d\u2500\u2500\u2500#\n    \u2570\u2500\u2500\u25009\n        \u2502   \u256d\u2500\u2500\u25002\n        \u2570\u2500\u2500\u25003\n            \u2570\u2500\u2500\u2500#\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT um\n4 # # \n======== EXPECT\n4\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dois\n1 # 0 # # \n======== EXPECT\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25000\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT tres\n4 # 8 2 # # # \n======== EXPECT\n\u256d\u2500\u2500\u2500#\n4\n\u2502   \u256d\u2500\u2500\u25002\n\u2570\u2500\u2500\u25008\n    \u2570\u2500\u2500\u2500#\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT quatro\n0 9 4 # # # 5 # # \n======== EXPECT\n    \u256d\u2500\u2500\u25004\n\u256d\u2500\u2500\u25009\n\u2502   \u2570\u2500\u2500\u2500#\n0\n\u2570\u2500\u2500\u25005\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT cinco\n0 4 # # 2 0 # # 3 # # \n======== EXPECT\n\u256d\u2500\u2500\u25004\n0\n\u2502   \u256d\u2500\u2500\u25000\n\u2570\u2500\u2500\u25002\n    \u2570\u2500\u2500\u25003\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT seis\n2 0 0 # # # 3 # 7 # 9 # # \n======== EXPECT\n    \u256d\u2500\u2500\u25000\n\u256d\u2500\u2500\u25000\n\u2502   \u2570\u2500\u2500\u2500#\n2\n\u2502   \u256d\u2500\u2500\u2500#\n\u2570\u2500\u2500\u25003\n    \u2502   \u256d\u2500\u2500\u2500#\n    \u2570\u2500\u2500\u25007\n        \u2570\u2500\u2500\u25009\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n======== EXPECT\n    \u256d\u2500\u2500\u25007\n\u256d\u2500\u2500\u25008\n\u2502   \u2502   \u256d\u2500\u2500\u2500#\n\u2502   \u2570\u2500\u2500\u25004\n\u2502       \u2570\u2500\u2500\u25006\n1\n\u2502   \u256d\u2500\u2500\u25000\n\u2570\u2500\u2500\u25005\n    \u2502   \u256d\u2500\u2500\u2500#\n    \u2570\u2500\u2500\u25009\n        \u2502   \u256d\u2500\u2500\u25002\n        \u2570\u2500\u2500\u25003\n            \u2570\u2500\u2500\u2500#\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "solver.cpp",
                "contents": "\n#include <iostream>\n#include <sstream>\nusing namespace std;\n\nstruct Node{\n    int value;\n    Node * left;\n    Node * right;\n    Node(int value = 0, Node * left = nullptr, Node * right = nullptr){\n        this->value = value;\n        this->left = left;\n        this->right = right;\n    }\n};\n\n// Clone uma \u00e1rvore bin\u00e1ria consumindo dados de uma stringstream.\nNode* clone(stringstream& ss) {\n    // TODO\n    (void) ss;\n    return nullptr;\n}\n\n// N\u00e3o altere daqui para baixo.\n\nvoid bshow(Node * node, string history = \"\"){\n    if(node != nullptr && (node->left != nullptr || node->right != nullptr))\n        bshow(node->left , history + \"l\");\n    for(int i = 0; i < (int) history.size() - 1; i++)\n        cout << (history[i] != history[i + 1] ? \"\u2502   \" : \"    \");\n    if(history != \"\")\n        cout << (history.back() == 'l' ? \"\u256d\u2500\u2500\u2500\" : \"\u2570\u2500\u2500\u2500\");\n    if(node == nullptr){\n        cout << \"#\" << endl;\n        return;\n    }\n    cout << node->value << endl;\n    if(node->left != nullptr || node->right != nullptr) {\n        bshow(node->right, history + \"r\");\n    }\n}\n\n\nint main(){\n    string line;\n    getline(cin, line);\n    stringstream ss(line);\n    Node* root = clone(ss);\n    bshow(root);\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// Node representa um n\u00f3 na \u00e1rvore bin\u00e1ria.\ntype Node struct {\n\tValue int\n\tLeft  *Node\n\tRight *Node\n}\n\n// create constr\u00f3i uma \u00e1rvore bin\u00e1ria a partir de uma lista de strings.\n// Consuma os elementos da lista sempre do in\u00edcio.\n// Voc\u00ea pode obter o primeiro elemento com 'elem := (*parts)[0]'\n// Voc\u00ea pode fazer um \"push_front\" no array usando '*parts = (*parts)[1:]\n// Se o elemento for \"#\", significa que o n\u00f3 \u00e9 nulo.\nfunc create(parts *[]string) *Node {\n\t_ = parts\n\treturn nil\n}\n\n// BShow \u00e9 uma fun\u00e7\u00e3o auxiliar para imprimir a \u00e1rvore bin\u00e1ria.\n// Primeira invoca\u00e7\u00e3o de ser com history como uma string vazia.\nfunc BShow(node *Node, history string) {\n\tif node != nil && (node.Left != nil || node.Right != nil) {\n\t\tBShow(node.Left, history+\"l\")\n\t}\n\n\tfor i := 0; i < len(history)-1; i++ {\n\t\tif history[i] != history[i+1] {\n\t\t\tfmt.Print(\"\u2502   \")\n\t\t} else {\n\t\t\tfmt.Print(\"    \")\n\t\t}\n\t}\n\tif history != \"\" {\n\t\tif history[len(history)-1] == 'l' {\n\t\t\tfmt.Print(\"\u256d\u2500\u2500\u2500\")\n\t\t} else {\n\t\t\tfmt.Print(\"\u2570\u2500\u2500\u2500\")\n\t\t}\n\t}\n\tif node == nil {\n\t\tfmt.Println(\"#\")\n\t\treturn\n\t}\n\tfmt.Println(node.Value)\n\tif node.Left != nil || node.Right != nil {\n\t\tBShow(node.Right, history+\"r\")\n\t}\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tscanner.Scan()\n\tline := scanner.Text()\n\tparts := strings.Split(line, \" \")\n\troot := create(&parts)\n\tBShow(root, \"\")\n}\n",
                "type": "show"
            }
        ],
        "py": [
            {
                "name": "main.py",
                "contents": "class Node:\n    def __init__(self, value: int):\n        self.value = value\n        self.left: Node | None = None\n        self.right: Node | None = None\n\n# Consuma uma lista de strings para construir uma \u00e1rvore bin\u00e1ria.\n# Voc\u00ea pode obter o elemento 0 da lista em cada chamada recursiva\n# e remover esse elemento da lista usando del parts[0].\ndef create(parts: list[str]) -> Node | None:\n    return None\n# N\u00e3o altere o resto do c\u00f3digo\n    \ndef bshow(node: Node | None, history: str = \"\"):\n    if node is not None and (node.left is not None or node.right is not None):\n        bshow(node.left, history + \"l\")\n    for i in range(len(history) - 1):\n        print(\"\u2502   \" if history[i] != history[i+1] else \"    \", end=\"\")\n    if history:\n        print(\"\u256d\u2500\u2500\u2500\" if history[-1] == 'l' else \"\u2570\u2500\u2500\u2500\", end=\"\")    \n    if node is None:\n        print(\"#\")\n        return\n    print(node.value)\n    if node.left is not None or node.right is not None:\n        bshow(node.right, history + \"r\")\n    \nif __name__ == \"__main__\":\n    line = input().strip()\n    root = create(line.split())\n    bshow(root)\n",
                "type": "show"
            }
        ]
    }
}
