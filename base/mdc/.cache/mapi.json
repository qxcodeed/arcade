{
    "title": "@mdc: Implemente o mdc recursivo",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@mdc: Implemente o mdc recursivo</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Implemente o mdc recursivo</h1>\n<p>Implemente a fun\u00e7\u00e3o que calcula o mdc de dois n\u00fameros de forma recursiva.</p>\n<p>O mdc de dois n\u00fameros inteiros \u00e9 o maior n\u00famero inteiro que divide ambos sem deixar resto.\nPara calcular o mdc de dois n\u00fameros, voc\u00ea pode usar o algoritmo de Euclides.</p>\n<p><a href=\"https://pt.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm\">LINK</a></p>\n<h2>O Algoritmo</h2>\n<ul>\n<li>\n<p>O Algoritmo Euclidiano para encontrar o MDC(A,B) \u00e9 dado por:</p>\n</li>\n<li>\n<p>Se A = 0, ent\u00e3o MDC(A,B)=B, uma vez que MDC(0,B)=B, e podemos parar a verifica\u00e7\u00e3o.  </p>\n</li>\n<li>Se B = 0, ent\u00e3o MDC(A,B)=A, uma vez que o MDC(A,0)=A, e podemos parar a verifica\u00e7\u00e3o.  </li>\n<li>Escreva A na forma do resto do quociente (A = B\u22c5Q + R), ou seja R = A % B.</li>\n<li>Encontre o MDC(B,R) usando o Algoritmo Euclidiano, j\u00e1 que MDC(A,B) = MDC(B,R)</li>\n</ul>\n<h2>I/O</h2>\n<ul>\n<li>Entrada<ul>\n<li>A entrada consiste de dois n\u00fameros inteiros positivos.</li>\n</ul>\n</li>\n<li>Sa\u00edda<ul>\n<li>A sa\u00edda consiste de um n\u00famero inteiro positivo que representa o mdc dos dois n\u00fameros.</li>\n</ul>\n</li>\n</ul>\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n<span class=\"m\">3</span>\n<span class=\"nv\">5</span>\n<span class=\"o\">========</span>\n<span class=\"m\">1</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n<span class=\"m\">6</span>\n<span class=\"nv\">9</span>\n<span class=\"o\">========</span>\n<span class=\"m\">3</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n<span class=\"m\">50</span>\n<span class=\"nv\">15</span>\n<span class=\"o\">========</span>\n<span class=\"m\">5</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n<span class=\"m\">270</span>\n<span class=\"nv\">192</span>\n<span class=\"o\">========</span>\n<span class=\"m\">6</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n<span class=\"m\">192</span>\n<span class=\"nv\">276</span>\n<span class=\"o\">========</span>\n<span class=\"m\">12</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt;&lt;\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n3\n5\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n6\n9\n======== EXPECT\n3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n50\n15\n======== EXPECT\n5\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n270\n192\n======== EXPECT\n6\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n192\n276\n======== EXPECT\n12\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n\nint mdc(int a, int b) {\n  return 0;\n}\n\nint main() {\n  int a, b;\n  std::cin >> a >> b;\n  std::cout << mdc(a, b) << std::endl;\n  return 0;\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc mdc(a, b int) int {\n\treturn 0\n}\n\nfunc main() {\n\tvar a, b int\n\tfmt.Scan(&a, &b)\n\tfmt.Println(mdc(a, b))\n}\n",
                "type": "show"
            }
        ]
    }
}
