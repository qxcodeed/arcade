{
    "title": "@lista_d3: Lista Dupla - Extra",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@lista_d3: Lista Dupla - Extra</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Lista Dupla - Extra</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<h2>Intro</h2>\n<p>Utilizando a estrutura criada em @lista_d2, vamos fazer algumas manipula\u00e7\u00f5es de dados.</p>\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE compare &lt;lista1&gt; &lt;lista2&gt;</span>\n<span class=\"c1\"># compara se duas listas s\u00e3o iguais</span>\n<span class=\"nv\">$compare</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,3,4,5<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,3,4,5<span class=\"o\">]</span>\niguais\n<span class=\"nv\">$compare</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[]</span>\niguais\n<span class=\"nv\">$compare</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>\ndiferentes\n<span class=\"nv\">$compare</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\ndiferentes\n<span class=\"nv\">$compare</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2<span class=\"o\">]</span>\ndiferentes\n<span class=\"nv\">$compare</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,3<span class=\"o\">]</span>\ndiferentes\n<span class=\"nv\">$compare</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>,1<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2<span class=\"o\">]</span>\ndiferentes\n<span class=\"nv\">$compare</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,3,2<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,3,2<span class=\"o\">]</span>\niguais\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE addsorted</span>\n<span class=\"c1\"># insere os valores de forma ordenada dentro da estrutura</span>\n<span class=\"nv\">$addsorted</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">7</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">9</span><span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"o\">[</span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">7</span>,<span class=\"w\"> </span><span class=\"m\">8</span>,<span class=\"w\"> </span><span class=\"m\">9</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE reverse</span>\n<span class=\"nv\">$reverse</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$reverse</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$reverse</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$reverse</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,3,4,5,6,7,8<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">8</span>,<span class=\"w\"> </span><span class=\"m\">7</span>,<span class=\"w\"> </span><span class=\"m\">6</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE merge</span>\n<span class=\"c1\"># fa\u00e7a o merge de duas listas ordenadas, inserindo a segunda lista na primeira</span>\n<span class=\"c1\"># aproveitando a ideia de que ambas est\u00e3o ordenadas</span>\n<span class=\"nv\">$merge</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,5,6,8<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>,3,3,4,4,9<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">6</span>,<span class=\"w\"> </span><span class=\"m\">8</span>,<span class=\"w\"> </span><span class=\"m\">9</span><span class=\"o\">]</span>\n<span class=\"nv\">$merge</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"o\">]</span>\n<span class=\"nv\">$merge</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"o\">]</span>\n<span class=\"nv\">$merge</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>,3<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"nv\">$merge</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>,3<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,4,5<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT compare <lista1> <lista2>\ncompare [1,2,3,4,5] [1,2,3,4,5]\ncompare [] []\ncompare [1] [2]\ncompare [1,2] [1]\ncompare [1] [1,2]\ncompare [1,2] [1,3]\ncompare [2,1] [1,2]\ncompare [1,3,2] [1,3,2]\nend\n======== EXPECT\n$compare [1,2,3,4,5] [1,2,3,4,5]\niguais\n$compare [] []\niguais\n$compare [1] [2]\ndiferentes\n$compare [1,2] [1]\ndiferentes\n$compare [1] [1,2]\ndiferentes\n$compare [1,2] [1,3]\ndiferentes\n$compare [2,1] [1,2]\ndiferentes\n$compare [1,3,2] [1,3,2]\niguais\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT addsorted\naddsorted 4 5 7 4 2 8 1 9 0\nend\n======== EXPECT\n$addsorted 4 5 7 4 2 8 1 9 0\n[0, 1, 2, 4, 4, 5, 7, 8, 9]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reverse\nreverse []\nreverse [1]\nreverse [1,2]\nreverse [1,2,3,4,5,6,7,8]\nend\n======== EXPECT\n$reverse []\n[]\n$reverse [1]\n[1]\n$reverse [1,2]\n[2, 1]\n$reverse [1,2,3,4,5,6,7,8]\n[8, 7, 6, 5, 4, 3, 2, 1]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT merge\nmerge [1,5,6,8] [2,3,3,4,4,9]\nmerge [1] [2]\nmerge [2] [1]\nmerge [2,3] [1,2]\nmerge [2,3] [1,4,5]\nend\n======== EXPECT\n$merge [1,5,6,8] [2,3,3,4,4,9]\n[1, 2, 3, 3, 4, 4, 5, 6, 8, 9]\n$merge [1] [2]\n[1, 2]\n$merge [2] [1]\n[1, 2]\n$merge [2,3] [1,2]\n[1, 2, 2, 3]\n$merge [2,3] [1,4,5]\n[1, 2, 3, 4, 5]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Node struct {\n\tValue int\n\tnext  *Node\n\tprev  *Node\n\troot  *Node\n}\n\ntype LList struct {\n\troot *Node\n\tsize int\n}\n\nfunc NewLList() *LList {\n\tlist := &LList{}\n\tlist.root = &Node{root: nil}\n\tlist.root.next = list.root\n\tlist.root.prev = list.root\n\tlist.root.root = list.root // n\u00f3 sentinela aponta pra si mesmo\n\treturn list\n}\n\nfunc (l *LList) PushBack(value int) {\n\tl.insertBefore(l.root, value)\n}\n\nfunc (l *LList) insertBefore(mark *Node, value int) {\n\tn := &Node{\n\t\tValue: value,\n\t\troot:  l.root,\n\t}\n\tn.prev = mark.prev\n\tn.next = mark\n\tmark.prev.next = n\n\tmark.prev = n\n}\n\n\nfunc str2list(serial string) *LList {\n\tserial = serial[1 : len(serial)-1]\n\tll := NewLList()\n\tif serial == \"\" {\n\t\treturn ll\n\t}\n\tfor _, p := range strings.Split(serial, \",\") {\n\t\tvalue, _ := strconv.Atoi(p)\n\t\tll.PushBack(value)\n\t}\n\treturn ll\n}\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\tfmt.Println(line)\n\t\targs := strings.Fields(line)\n\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := args[0]\n\n\t\tswitch cmd {\n\t\tcase \"compare\":\n\t\t\t// lla := str2list(args[1])\n\t\t\t// llb := str2list(args[2])\n\t\t\t// if equals(lla, llb) {\n\t\t\t// \tfmt.Println(\"iguais\")\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"diferentes\")\n\t\t\t// }\n\t\tcase \"addsorted\":\n\t\t\t// lla := NewLList()\n\t\t\t// for i := 1; i < len(args); i++ {\n\t\t\t// \tvalue, _ := strconv.Atoi(args[i])\n\t\t\t// \taddsorted(lla, value)\n\t\t\t// }\n\t\t\t// fmt.Println(lla)\n\t\tcase \"reverse\":\n\t\t\t// lla := str2list(args[1])\n\t\t\t// reverse(lla)\n\t\t\t// fmt.Println(lla)\n\t\tcase \"merge\":\n\t\t\t// lla := str2list(args[1])\n\t\t\t// llb := str2list(args[2])\n\t\t\t// merged := merge(lla, llb)\n\t\t\t// fmt.Println(merged)\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
