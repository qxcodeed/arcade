{
    "title": "@lista_d3: Lista Dupla - Extra",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@lista_d3: Lista Dupla - Extra</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"lista-dupla---extra\">Lista Dupla - Extra</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<h2 id=\"intro\">Intro</h2>\n<p>Utilizando a estrutura criada em <span class=\"citation\"\ndata-cites=\"lista_d2\">@lista_d2</span>, vamos fazer algumas manipula\u00e7\u00f5es\nde dados.</p>\n<h2 id=\"shell\">Shell</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE compare &lt;lista1&gt; &lt;lista2&gt;</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># compara se duas listas s\u00e3o iguais</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$compare</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,3,4,5</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,3,4,5</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">iguais</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$compare</span> [] []</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">iguais</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$compare</span> <span class=\"pp\">[</span><span class=\"ss\">1</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">2</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">diferentes</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$compare</span> <span class=\"pp\">[</span><span class=\"ss\">1,2</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">1</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">diferentes</span></span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$compare</span> <span class=\"pp\">[</span><span class=\"ss\">1</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">1,2</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">diferentes</span></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$compare</span> <span class=\"pp\">[</span><span class=\"ss\">1,2</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">1,3</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">diferentes</span></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$compare</span> <span class=\"pp\">[</span><span class=\"ss\">2,1</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">1,2</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">diferentes</span></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$compare</span> <span class=\"pp\">[</span><span class=\"ss\">1,3,2</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">1,3,2</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">iguais</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE addsorted</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># insere os valores de forma ordenada dentro da estrutura</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$addsorted</span> 4 5 7 4 2 8 1 9 0</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[0,</span> 1, 2, 4, 4, 5, 7, 8, 9]</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb3\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE reverse</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$reverse</span> []</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$reverse</span> <span class=\"pp\">[</span><span class=\"ss\">1</span><span class=\"pp\">]</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1]</span></span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$reverse</span> <span class=\"pp\">[</span><span class=\"ss\">1,2</span><span class=\"pp\">]</span></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[2,</span> 1]</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$reverse</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,3,4,5,6,7,8</span><span class=\"pp\">]</span></span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[8,</span> 7, 6, 5, 4, 3, 2, 1]</span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb4\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE merge</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># fa\u00e7a o merge de duas listas ordenadas, inserindo a segunda lista na primeira</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># aproveitando a ideia de que ambas est\u00e3o ordenadas</span></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$merge</span> <span class=\"pp\">[</span><span class=\"ss\">1,5,6,8</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">2,3,3,4,4,9</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 3, 4, 4, 5, 6, 8, 9]</span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$merge</span> <span class=\"pp\">[</span><span class=\"ss\">1</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">2</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2]</span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$merge</span> <span class=\"pp\">[</span><span class=\"ss\">2</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">1</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-9\"><a href=\"#cb4-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2]</span>\n<span id=\"cb4-10\"><a href=\"#cb4-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$merge</span> <span class=\"pp\">[</span><span class=\"ss\">2,3</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">1,2</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-11\"><a href=\"#cb4-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 2, 3]</span>\n<span id=\"cb4-12\"><a href=\"#cb4-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$merge</span> <span class=\"pp\">[</span><span class=\"ss\">2,3</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">1,4,5</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-13\"><a href=\"#cb4-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 5]</span>\n<span id=\"cb4-14\"><a href=\"#cb4-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT compare <lista1> <lista2>\ncompare [1,2,3,4,5] [1,2,3,4,5]\ncompare [] []\ncompare [1] [2]\ncompare [1,2] [1]\ncompare [1] [1,2]\ncompare [1,2] [1,3]\ncompare [2,1] [1,2]\ncompare [1,3,2] [1,3,2]\nend\n======== EXPECT\n$compare [1,2,3,4,5] [1,2,3,4,5]\niguais\n$compare [] []\niguais\n$compare [1] [2]\ndiferentes\n$compare [1,2] [1]\ndiferentes\n$compare [1] [1,2]\ndiferentes\n$compare [1,2] [1,3]\ndiferentes\n$compare [2,1] [1,2]\ndiferentes\n$compare [1,3,2] [1,3,2]\niguais\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT addsorted\naddsorted 4 5 7 4 2 8 1 9 0\nend\n======== EXPECT\n$addsorted 4 5 7 4 2 8 1 9 0\n[0, 1, 2, 4, 4, 5, 7, 8, 9]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reverse\nreverse []\nreverse [1]\nreverse [1,2]\nreverse [1,2,3,4,5,6,7,8]\nend\n======== EXPECT\n$reverse []\n[]\n$reverse [1]\n[1]\n$reverse [1,2]\n[2, 1]\n$reverse [1,2,3,4,5,6,7,8]\n[8, 7, 6, 5, 4, 3, 2, 1]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT merge\nmerge [1,5,6,8] [2,3,3,4,4,9]\nmerge [1] [2]\nmerge [2] [1]\nmerge [2,3] [1,2]\nmerge [2,3] [1,4,5]\nend\n======== EXPECT\n$merge [1,5,6,8] [2,3,3,4,4,9]\n[1, 2, 3, 3, 4, 4, 5, 6, 8, 9]\n$merge [1] [2]\n[1, 2]\n$merge [2] [1]\n[1, 2]\n$merge [2,3] [1,2]\n[1, 2, 2, 3]\n$merge [2,3] [1,4,5]\n[1, 2, 3, 4, 5]\n$end\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Node struct {\n\tValue int\n\tnext  *Node\n\tprev  *Node\n\troot  *Node\n}\n\ntype LList struct {\n\troot *Node\n\tsize int\n}\n\nfunc NewLList() *LList {\n\tlist := &LList{}\n\tlist.root = &Node{root: nil}\n\tlist.root.next = list.root\n\tlist.root.prev = list.root\n\tlist.root.root = list.root // n\u00f3 sentinela aponta pra si mesmo\n\treturn list\n}\n\nfunc (l *LList) PushBack(value int) {\n\tl.insertBefore(l.root, value)\n}\n\nfunc (l *LList) insertBefore(mark *Node, value int) {\n\tn := &Node{\n\t\tValue: value,\n\t\troot:  l.root,\n\t}\n\tn.prev = mark.prev\n\tn.next = mark\n\tmark.prev.next = n\n\tmark.prev = n\n}\n\n\nfunc str2list(serial string) *LList {\n\tserial = serial[1 : len(serial)-1]\n\tll := NewLList()\n\tif serial == \"\" {\n\t\treturn ll\n\t}\n\tfor _, p := range strings.Split(serial, \",\") {\n\t\tvalue, _ := strconv.Atoi(p)\n\t\tll.PushBack(value)\n\t}\n\treturn ll\n}\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\tfmt.Println(line)\n\t\targs := strings.Fields(line)\n\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := args[0]\n\n\t\tswitch cmd {\n\t\tcase \"compare\":\n\t\t\t// lla := str2list(args[1])\n\t\t\t// llb := str2list(args[2])\n\t\t\t// if equals(lla, llb) {\n\t\t\t// \tfmt.Println(\"iguais\")\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"diferentes\")\n\t\t\t// }\n\t\tcase \"addsorted\":\n\t\t\t// lla := NewLList()\n\t\t\t// for i := 1; i < len(args); i++ {\n\t\t\t// \tvalue, _ := strconv.Atoi(args[i])\n\t\t\t// \taddsorted(lla, value)\n\t\t\t// }\n\t\t\t// fmt.Println(lla)\n\t\tcase \"reverse\":\n\t\t\t// lla := str2list(args[1])\n\t\t\t// reverse(lla)\n\t\t\t// fmt.Println(lla)\n\t\tcase \"merge\":\n\t\t\t// lla := str2list(args[1])\n\t\t\t// llb := str2list(args[2])\n\t\t\t// merged := merge(lla, llb)\n\t\t\t// fmt.Println(merged)\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "encoding": 0
            }
        ]
    }
}
