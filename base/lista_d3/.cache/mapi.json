{
    "title": "@lista_d3: Lista Dupla - Extra",
    "description": "# Lista Dupla - Extra\n\n<!-- toch -->\n[Intro](#intro) | [Shell](#shell)\n-- | --\n<!-- toch -->\n\n## Intro\n\nUtilizando a estrutura criada em @lista_d2, vamos fazer algumas manipula\u00e7\u00f5es de dados.\n\n## Shell\n\n```bash\n#TEST_CASE compare <lista1> <lista2>\n# compara se duas listas s\u00e3o iguais\n$compare [1,2,3,4,5] [1,2,3,4,5]\niguais\n$compare [] []\niguais\n$compare [1] [2]\ndiferentes\n$compare [1,2] [1]\ndiferentes\n$compare [1] [1,2]\ndiferentes\n$compare [1,2] [1,3]\ndiferentes\n$compare [2,1] [1,2]\ndiferentes\n$compare [1,3,2] [1,3,2]\niguais\n$end\n```\n\n```bash\n#TEST_CASE addsorted\n# insere os valores de forma ordenada dentro da estrutura\n$addsorted 4 5 7 4 2 8 1 9 0\n[0, 1, 2, 4, 4, 5, 7, 8, 9]\n$end\n```\n\n```bash\n#TEST_CASE reverse\n$reverse []\n[]\n$reverse [1]\n[1]\n$reverse [1,2]\n[2, 1]\n$reverse [1,2,3,4,5,6,7,8]\n[8, 7, 6, 5, 4, 3, 2, 1]\n$end\n```\n\n```bash\n#TEST_CASE merge\n# fa\u00e7a o merge de duas listas ordenadas, inserindo a segunda lista na primeira\n# aproveitando a ideia de que ambas est\u00e3o ordenadas\n$merge [1,5,6,8] [2,3,3,4,4,9]\n[1, 2, 3, 3, 4, 4, 5, 6, 8, 9]\n$merge [1] [2]\n[1, 2]\n$merge [2] [1]\n[1, 2]\n$merge [2,3] [1,2]\n[1, 2, 2, 3]\n$merge [2,3] [1,4,5]\n[1, 2, 3, 4, 5]\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT compare <lista1> <lista2>\ncompare [1,2,3,4,5] [1,2,3,4,5]\ncompare [] []\ncompare [1] [2]\ncompare [1,2] [1]\ncompare [1] [1,2]\ncompare [1,2] [1,3]\ncompare [2,1] [1,2]\ncompare [1,3,2] [1,3,2]\nend\n======== EXPECT\n$compare [1,2,3,4,5] [1,2,3,4,5]\niguais\n$compare [] []\niguais\n$compare [1] [2]\ndiferentes\n$compare [1,2] [1]\ndiferentes\n$compare [1] [1,2]\ndiferentes\n$compare [1,2] [1,3]\ndiferentes\n$compare [2,1] [1,2]\ndiferentes\n$compare [1,3,2] [1,3,2]\niguais\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT addsorted\naddsorted 4 5 7 4 2 8 1 9 0\nend\n======== EXPECT\n$addsorted 4 5 7 4 2 8 1 9 0\n[0, 1, 2, 4, 4, 5, 7, 8, 9]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reverse\nreverse []\nreverse [1]\nreverse [1,2]\nreverse [1,2,3,4,5,6,7,8]\nend\n======== EXPECT\n$reverse []\n[]\n$reverse [1]\n[1]\n$reverse [1,2]\n[2, 1]\n$reverse [1,2,3,4,5,6,7,8]\n[8, 7, 6, 5, 4, 3, 2, 1]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT merge\nmerge [1,5,6,8] [2,3,3,4,4,9]\nmerge [1] [2]\nmerge [2] [1]\nmerge [2,3] [1,2]\nmerge [2,3] [1,4,5]\nend\n======== EXPECT\n$merge [1,5,6,8] [2,3,3,4,4,9]\n[1, 2, 3, 3, 4, 4, 5, 6, 8, 9]\n$merge [1] [2]\n[1, 2]\n$merge [2] [1]\n[1, 2]\n$merge [2,3] [1,2]\n[1, 2, 2, 3]\n$merge [2,3] [1,4,5]\n[1, 2, 3, 4, 5]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Node struct {\n\tValue int\n\tnext  *Node\n\tprev  *Node\n\troot  *Node\n}\n\ntype LList struct {\n\troot *Node\n\tsize int\n}\n\nfunc NewLList() *LList {\n\tlist := &LList{}\n\tlist.root = &Node{root: nil}\n\tlist.root.next = list.root\n\tlist.root.prev = list.root\n\tlist.root.root = list.root // n\u00f3 sentinela aponta pra si mesmo\n\treturn list\n}\n\nfunc (l *LList) PushBack(value int) {\n\tl.insertBefore(l.root, value)\n}\n\nfunc (l *LList) insertBefore(mark *Node, value int) {\n\tn := &Node{\n\t\tValue: value,\n\t\troot:  l.root,\n\t}\n\tn.prev = mark.prev\n\tn.next = mark\n\tmark.prev.next = n\n\tmark.prev = n\n}\n\n\nfunc str2list(serial string) *LList {\n\tserial = serial[1 : len(serial)-1]\n\tll := NewLList()\n\tif serial == \"\" {\n\t\treturn ll\n\t}\n\tfor _, p := range strings.Split(serial, \",\") {\n\t\tvalue, _ := strconv.Atoi(p)\n\t\tll.PushBack(value)\n\t}\n\treturn ll\n}\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\tfmt.Println(line)\n\t\targs := strings.Fields(line)\n\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := args[0]\n\n\t\tswitch cmd {\n\t\tcase \"compare\":\n\t\t\t// lla := str2list(args[1])\n\t\t\t// llb := str2list(args[2])\n\t\t\t// if equals(lla, llb) {\n\t\t\t// \tfmt.Println(\"iguais\")\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"diferentes\")\n\t\t\t// }\n\t\tcase \"addsorted\":\n\t\t\t// lla := NewLList()\n\t\t\t// for i := 1; i < len(args); i++ {\n\t\t\t// \tvalue, _ := strconv.Atoi(args[i])\n\t\t\t// \taddsorted(lla, value)\n\t\t\t// }\n\t\t\t// fmt.Println(lla)\n\t\tcase \"reverse\":\n\t\t\t// lla := str2list(args[1])\n\t\t\t// reverse(lla)\n\t\t\t// fmt.Println(lla)\n\t\tcase \"merge\":\n\t\t\t// lla := str2list(args[1])\n\t\t\t// llb := str2list(args[2])\n\t\t\t// merged := merge(lla, llb)\n\t\t\t// fmt.Println(merged)\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
