{
    "title": "@fila_enc: Fila usando lista encadeada simples",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@fila_enc: Fila usando lista encadeada simples</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Fila usando lista encadeada simples</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<h2>Intro</h2>\n<p>Neste exerc\u00edcio, voc\u00ea implementar\u00e1 uma <strong>Fila</strong> utilizando uma <strong>Lista Simplesmente Encadeada</strong>. Fila \u00e9 uma estrutura de dados linear que segue o princ\u00edpio FIFO (<strong>First In, First Out</strong>), onde o primeiro elemento inserido \u00e9 tamb\u00e9m o primeiro a ser removido.</p>\n<p>Na implementa\u00e7\u00e3o de uma fila encadeada, cada n\u00f3 cont\u00e9m uma informa\u00e7\u00e3o e um ponteiro para o pr\u00f3ximo elemento. A estrutura da fila \u00e9 composta por:</p>\n<ul>\n<li><code>head</code>: ponteiro para o primeiro n\u00f3 da fila. \u00c9 utilizado para remover elementos da fila.</li>\n<li><code>tail</code>: ponteiro para o \u00faltimo n\u00f3 da fila. \u00c9 utilizado para adicionar novos elementos \u00e0 fila.</li>\n</ul>\n<p>Cada opera\u00e7\u00e3o de inser\u00e7\u00e3o e remo\u00e7\u00e3o na fila deve atualizar o atributo <code>size</code>, que representa o n\u00famero de elementos na fila. Sua fila n\u00e3o deve utilizar n\u00f3s de marca\u00e7\u00e3o, ou seja, n\u00e3o deve haver n\u00f3s que n\u00e3o contenham dados v\u00e1lidos. Todas as opera\u00e7\u00f5es devem ser implementadas de forma eficiente.</p>\n<h3>Complexidade das opera\u00e7\u00f5es</h3>\n<ul>\n<li>Inser\u00e7\u00e3o (<code>push</code>): O(1) - Adiciona um elemento ao final da fila (enqueue).</li>\n<li>Remo\u00e7\u00e3o (<code>pop</code>): O(1) - Remove o elemento do in\u00edcio da fila (dequeue).</li>\n<li>Verifica\u00e7\u00e3o do tamanho (<code>size</code>): O(1) - Retorna o n\u00famero de elementos na fila.</li>\n<li>Verifica\u00e7\u00e3o se a fila est\u00e1 vazia (<code>isEmpty</code>): O(1) - Retorna verdadeiro se n\u00e3o h\u00e1 elementos na fila.</li>\n<li>Visualiza\u00e7\u00e3o do primeiro elemento (<code>peek</code>): O(1) - Retorna o primeiro elemento sem remov\u00ea-lo.</li>\n<li>Visualiza\u00e7\u00e3o do estado da fila (<code>show</code>): O(n) - Retorna uma representa\u00e7\u00e3o em string dos elementos da fila para debug.</li>\n</ul>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>go<ul>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/fila_enc/.cache/draft/go/main.go\">main.go</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE 01</span>\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">6</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE 02</span>\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">7</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">7</span>,<span class=\"w\"> </span><span class=\"m\">8</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">7</span>,<span class=\"w\"> </span><span class=\"m\">8</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">7</span>,<span class=\"w\"> </span><span class=\"m\">8</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE 03</span>\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">20</span>\n<span class=\"nv\">$push</span><span class=\"w\"> </span><span class=\"m\">30</span>\n<span class=\"nv\">$peek</span>\n<span class=\"m\">10</span>\n<span class=\"nv\">$pop</span>\n<span class=\"nv\">$peek</span>\n<span class=\"m\">20</span>\n<span class=\"nv\">$pop</span>\n<span class=\"nv\">$peek</span>\n<span class=\"m\">30</span>\n<span class=\"nv\">$pop</span>\n<span class=\"nv\">$peek</span>\nfalha:<span class=\"w\"> </span>fila<span class=\"w\"> </span>vazia\n<span class=\"nv\">$pop</span>\nfalha:<span class=\"w\"> </span>fila<span class=\"w\"> </span>vazia\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01\npush 4\npush 5\npush 6\nshow\nend\n======== EXPECT\n$push 4\n$push 5\n$push 6\n$show\n[4, 5, 6]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02\npush 1 3 5 7 8\nshow\npop\nshow\npop\nshow\nend\n======== EXPECT\n$push 1 3 5 7 8\n$show\n[1, 3, 5, 7, 8]\n$pop\n$show\n[3, 5, 7, 8]\n$pop\n$show\n[5, 7, 8]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\npush 10\npush 20\npush 30\npeek\npop\npeek\npop\npeek\npop\npeek\npop\nend\n======== EXPECT\n$push 10\n$push 20\n$push 30\n$peek\n10\n$pop\n$peek\n20\n$pop\n$peek\n30\n$pop\n$peek\nfalha: fila vazia\n$pop\nfalha: fila vazia\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// func (q *Queue[T]) Enqueue(value T)\n// func (q *Queue[T]) Dequeue() (T, bool)\n// func (q *Queue[T]) Peek() (T, bool)\n// func (q *Queue[T]) Size() int\n// func (q *Queue[T]) IsEmpty() bool\n// func (q *Queue[T]) Clear()\n\n\ntype Node[T any] struct {\n\tValue T\n\tnext  *Node[T]\n}\n\ntype Queue[T any] struct {\n\thead *Node[T]\n\ttail *Node[T]\n\tsize int\n}\n\nfunc NewQueue[T any]() *Queue[T] {\n\treturn &Queue[T]{}\n}\n\nfunc (q *Queue[T]) String() string {\n\tresult := \"[\"\n\tfor n := q.head; n != nil; n = n.next {\n\t\tif n != q.head {\n\t\t\tresult += \", \"\n\t\t}\n\t\tresult += fmt.Sprintf(\"%v\", n.Value)\n\t}\n\treturn result + \"]\"\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tqueue := NewQueue[int]()\n\n\tfor {\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\tfmt.Println(\"$\" + line)\n\t\targs := strings.Fields(line)\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tswitch args[0] {\n\t\tcase \"end\":\n\t\t\tbreak\n\t\tcase \"show\":\n\t\t\tfmt.Println(queue)\n\t\tcase \"push\":\n\t\t\t// for _, arg := range args[1:] {\n\t\t\t// \tvalue, _ := strconv.Atoi(arg)\n\t\t\t// \tqueue.Enqueue(value)\n\t\t\t// }\n\t\tcase \"pop\":\n\t\t\t// if _, ok := queue.Dequeue(); !ok {\n\t\t\t// \tfmt.Println(\"falha: fila vazia\")\n\t\t\t// }\n\t\tcase \"peek\":\n\t\t\t// if value, ok := queue.Peek(); ok {\n\t\t\t// \tfmt.Println(value)\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"falha: fila vazia\")\n\t\t\t// }\n\t\tdefault:\n\t\t\tfmt.Println(\"Unknown command:\", args[0])\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
