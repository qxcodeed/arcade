{
    "title": "@fila_enc: Fila encadeada CPP",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@fila_enc: Fila encadeada CPP</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n  </style>\n</head>\n<body>\n<h1 id=\"fila-encadeada-cpp\">Fila encadeada CPP</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr class=\"header\">\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<h2 id=\"intro\">Intro</h2>\n<p>Neste exerc\u00edcio, voc\u00ea implementar\u00e1 uma <strong>Fila</strong>\nutilizando uma <strong>Lista Simplesmente Encadeada</strong>. Fila \u00e9 uma\nestrutura de dados linear que segue o princ\u00edpio FIFO (<strong>First In,\nFirst Out</strong>), onde o primeiro elemento inserido \u00e9 tamb\u00e9m o\nprimeiro a ser removido.</p>\n<p>Na implementa\u00e7\u00e3o de uma fila encadeada, cada n\u00f3 cont\u00e9m uma informa\u00e7\u00e3o\ne um ponteiro para o pr\u00f3ximo elemento. A estrutura da fila \u00e9 composta\npor:</p>\n<ul>\n<li><code>head</code>: ponteiro para o primeiro n\u00f3 da fila.</li>\n<li><code>tail</code>: ponteiro para o \u00faltimo n\u00f3 da fila.</li>\n</ul>\n<p>Cada opera\u00e7\u00e3o de inser\u00e7\u00e3o e remo\u00e7\u00e3o na fila deve atualizar o atributo\n<code>size</code>, que representa o n\u00famero de elementos na fila.</p>\n<h3 id=\"estrutura-do-exerc\u00edcio\">Estrutura do Exerc\u00edcio</h3>\n<p>A classe <code>LinkedQueue</code> est\u00e1 definida no arquivo\n<code>lib.cpp</code> e possui os seguintes m\u00e9todos:</p>\n<ul>\n<li><del><code>LinkedQueue()</code></del></li>\n<li><del><code>~LinkedQueue()</code></del></li>\n<li><code>void push(int info)</code></li>\n<li><code>void pop()</code></li>\n<li><code>int peek()</code></li>\n<li><code>void clear()</code></li>\n<li><del><code>void empty()</code></del></li>\n<li><del><code>void print()</code></del></li>\n</ul>\n<p>Os m\u00e9todos riscados j\u00e1 est\u00e3o implementados; voc\u00ea deve implementar os\ndemais m\u00e9todos, conforme as descri\u00e7\u00f5es nos coment\u00e1rios do arquivo\n<code>lib.cpp</code>.</p>\n<h3 id=\"observa\u00e7\u00f5es\">Observa\u00e7\u00f5es</h3>\n<ul>\n<li><strong>OBS. 1:</strong> N\u00e3o altere os m\u00e9todos j\u00e1\nimplementados.</li>\n<li><strong>OBS. 2:</strong> N\u00e3o \u00e9 necess\u00e1rio escrever a fun\u00e7\u00e3o\n<code>main()</code>, pois ela j\u00e1 est\u00e1 implementada no ambiente de\navalia\u00e7\u00e3o.</li>\n</ul>\n<h2 id=\"draft\">Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/fila_enc/.cache/draft/cpp/lib.cpp\">lib.cpp</a></li>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/fila_enc/.cache/draft/cpp/main.cpp\">main.cpp</a>\n<!-- links --></li>\n</ul></li>\n</ul>\n<h2 id=\"tests\">Tests</h2>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A entrada consistir\u00e1 em uma sequ\u00eancia de opera\u00e7\u00f5es de inser\u00e7\u00e3o\n(<code>push</code>), remo\u00e7\u00e3o (<code>pop</code>), consulta\n(<code>peek</code>), e limpeza (<code>clear</code>).</li>\n</ul>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<ul>\n<li>O programa deve exibir o estado da fila conforme as opera\u00e7\u00f5es\nrealizadas, seguindo o formato descrito nos casos de teste.</li>\n</ul>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste peek\ntest_peek\n======== EXPECT\nTESTE peek\n[]\npush 10\npeek == 10\npush 15\npeek == 10\npush 20\npeek == 10\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste push\ntest_push\n======== EXPECT\nTESTE push\npush 10\npush 15\npush 20\npush 25\nEsperado: [10 -> 15 -> 20 -> 25]\nFila: [10 -> 15 -> 20 -> 25]\n4 Nos alocados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste pop\ntest_pop\n======== EXPECT\nTESTE pop\nFila: [10 -> 15 -> 20 -> 25 -> 30]\npop\nFila: [15 -> 20 -> 25 -> 30]\npop\nFila: [20 -> 25 -> 30]\npop\nFila: [25 -> 30]\npop\nFila: [30]\npop\nFila: []\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste tudo\ntest_all\n======== EXPECT\nTESTE todos (push, pop, peek, size)\npush 1\nFila: [1]\npush 2\nFila: [1 -> 2]\npush 3\nFila: [1 -> 2 -> 3]\npop\nFila: [2 -> 3]\npop\nFila: [3]\npush 4\nFila: [3 -> 4]\npush 5\nFila: [3 -> 4 -> 5]\npop\nFila: [4 -> 5]\npop\nFila: [5]\npush 6\nFila: [5 -> 6]\npush 7\nFila: [5 -> 6 -> 7]\npush 8\nFila: [5 -> 6 -> 7 -> 8]\npop\nFila: [6 -> 7 -> 8]\npop\nFila: [7 -> 8]\nLista: [7 -> 8]\nsize: 2\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "lib.cpp",
                "contents": "#include <iostream>\n\n// Node: classe utilizada para representar um No\n// NAO ALTERE ESSA CLASSE\nstruct Node {\n    int info; // Informacao salva pelo usuario na lista\n    Node *next; // Ponteiro para o proximo elemento da lista\n\n    Node(); // Construtor\n    Node(int info, Node *next = nullptr); // Construtor\n    \n    ~Node(); // Destrutor\n};\n\n// Queue ou Pilha\n// Altere somente os campos marcados com TODO\nstruct LinkedQueue {\n    Node *front; // Ponteiro para a cabeca da lista (primeiro No)\n    Node *back;  // Ponteiro para a cauda da lista (ultimo No)\n    int size;    // Quantidade de elementos da fila (salvar esse valor permite sua consulta em O(1))\n\n    LinkedQueue() {\n        front = nullptr;\n        back = nullptr;\n        size = 0;\n    }\n\n    ~LinkedQueue(){\n        clear();\n    }\n\n\n    // Adiciona um elemento no topo da fila\n    // info: informacao do elemento a ser inserido\n    void push(int info) {\n        // TODO\n        (void) info;\n    }\n\n\n    // Remove um elemento do topo da fila.\n    // Nao faz nada caso a fila esteja vazia.\n    void pop(){\n        // TODO\n    }\n\n\n    // Retorna a informacao do elemento na frente da fila.\n    // Retorna -1, caso a fila esteja vazia.\n    int peek(){\n        // TODO\n        return -1;\n    }\n\n\n    // Remove todos os elementos da fila\n    void clear(){\n        // TODO\n    }\n\n\n    // Devolve true se cheia e false caso contrario\n    bool empty(){\n        return front == nullptr;\n    }\n\n\n    // Printa as informacoes da lista\n    void print(){\n        std::cout << \"[\";\n        for(Node* node = front; node != NULL; node = node->next){\n            std::cout << node->info;\n            if(node->next != NULL)\n                std::cout << \" -> \";\n        }\n        std::cout << \"]\" << std::endl;\n    }    \n};\n",
                "encoding": 0
            },
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <map>\n#include \"lib.cpp\"\n\nusing std::cout;\nusing std::endl;\n\nbool LOG_ALLOCATED = false;\nstd::map<void*, int> allocated_nodes_status = {};\nstd::map<int, int> mapa = {};\nconst int ALLOCATED = 1;\nconst int DELETED = 2;\n\n// Salvar Nos alocados\nNode::Node() {\n    allocated_nodes_status[this] = ALLOCATED;\n}\n\nNode::Node(int info, Node* next) {\n    allocated_nodes_status[this] = ALLOCATED;\n    this->info = info;\n    this->next = next;\n}\nNode::~Node() {\n    allocated_nodes_status[this] = DELETED;\n}\n\ntemplate <typename K, typename V>\nvoid printMap(const std::map<K, V>& m) {\n    for (const auto& pair : m) {\n        std::cout << \"Key: \" << pair.first << \", Value: \" << pair.second << std::endl;\n    }\n}\n\n/////////////// TESTE CONSTRUCT ///////////////\n\nvoid test_constructor() {\n    cout << \"TESTE Construtor\" << endl;\n    LinkedQueue* queue = new LinkedQueue(); \n\n    if(queue->front == nullptr && queue->size == 0){\n        cout << \"Ok\" << endl;\n    }else{\n        cout << \"Atributos incorretos\";\n    }\n}\n\n\nvoid push_test(LinkedQueue &queue, int info) {\n    if(queue.front == nullptr) {\n        queue.front = queue.back = new Node(info, nullptr);\n    } else {\n        auto nnode = new Node(info, nullptr);\n        queue.back->next = nnode;\n        queue.back = nnode;\n    }\n}\n\nint peek_test(LinkedQueue &queue) {\n    if(queue.front == nullptr) {\n        return -1;\n    } else {\n        return queue.front->info;\n    }\n}\n\n/////////////// TESTE HAS_INFO ///////////////\n\nvoid test_peek() {\n    cout << \"TESTE peek\" << endl;\n    LinkedQueue queue;\n    \n    queue.print();\n\n    push_test(queue, 10);\n    cout << \"push 10\" << endl;\n    cout << \"peek == \" << queue.peek() << endl;\n\n    push_test(queue, 15);\n    cout << \"push 15\" << endl;\n    cout << \"peek == \" << queue.peek() << endl;\n    \n    push_test(queue, 20);\n    cout << \"push 20\" << endl;\n    cout << \"peek == \" << queue.peek() << endl;\n}\n\n\n/////////////// TESTE PUSH ///////////////\n\nvoid test_push() {\n    allocated_nodes_status.clear();\n    cout << \"TESTE push\" << endl;\n    LinkedQueue queue;\n\n    queue.push(10);\n    cout << \"push \" << 10 << endl;\n\n    queue.push(15);\n    cout << \"push \" << 15 << endl;\n\n    queue.push(20);\n    cout << \"push \" << 20 << endl;\n\n    queue.push(25);\n    cout << \"push \" << 25 << endl;\n\n    cout << \"Esperado: [10 -> 15 -> 20 -> 25]\" << endl;\n    cout << \"Fila: \"; queue.print();\n    cout << allocated_nodes_status.size() << \" Nos alocados\" << endl;\n}\n\n/////////////// TESTE POP ///////////////\n\nvoid test_pop() {\n    cout << \"TESTE pop\" << endl;\n    LinkedQueue queue;\n\n    push_test(queue, 10);\n    push_test(queue, 15);\n    push_test(queue, 20);\n    push_test(queue, 25);\n    push_test(queue, 30);\n\n    Node *node1 = queue.front;\n    Node *node2 = node1->next;\n    Node *node3 = node2->next;\n    Node *node4 = node3->next;\n    Node *node5 = node4->next;\n\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED &&\n                                allocated_nodes_status[node4] == DELETED &&\n                                allocated_nodes_status[node5] == DELETED;\n\n    if(all_nodes_deleted) {\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    } else {\n        cout << \"Existem Nos removidos da fila que nao foram liberados na memoria\" << endl;\n    }\n}\n\n/////////////// TESTE CLEAR ///////////////\n\nvoid test_clear() {}\n\n/////////////// TESTE SIZE ///////////////\n\nvoid test_all() {\n    cout << \"TESTE todos (push, pop, peek, size)\" << endl;\n    LinkedQueue queue;\n    int x = 1;\n    \n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    \n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    \n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n    cout << \"push \" << x << endl; queue.push(x); x++;\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n    cout << \"pop\" << endl; queue.pop();\n    cout << \"Fila: \"; queue.print();\n\n    cout << \"Lista: \"; queue.print();\n    cout << \"size: \" << queue.size << endl;\n}\n\n/////////////// FIM TESTES ///////////////\n\nint main() {\n    std::string input;\n    std::cin >> input;\n\n    if(input == \"test_peek\") test_peek();\n    if(input == \"test_push\") test_push();\n    if(input == \"test_pop\") test_pop();\n    if(input == \"test_all\") test_all();\n}\n",
                "encoding": 0
            }
        ]
    }
}
