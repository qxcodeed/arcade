{
    "title": "@vetbuild: Implementando lista sequencial din\u00e2mica",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@vetbuild: Implementando lista sequencial din\u00e2mica</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@vetbuild: Implementando lista sequencial din\u00e2mica</h1>\n            <h1 id=\"implementando-lista-sequencial-dinamica\">Implementando lista sequencial din\u00e2mica</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/vetbuild/cover.jpg\" /></p>\n<p>Implemente as seguintes fun\u00e7\u00f5es do vetor din\u00e2mico.</p>\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case create\n$init 3\n$status\nsize:0 capacity:3\n$show\n[]\n$end\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case push\n$init 1\n$status\nsize:0 capacity:1\n$show\n[]\n$push 3\n$show\n[3]\n$status\nsize:1 capacity:1\n$push 4\n$show\n[3, 4]\n$status\nsize:2 capacity:2\n$push 5\n$show\n[3, 4, 5]\n$status\nsize:3 capacity:4\n$push 1\n$show\n[3, 4, 5, 1]\n$status\nsize:4 capacity:4\n$push 2\n$show\n[3, 4, 5, 1, 2]\n$status\nsize:5 capacity:8\n$end\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case get e set\n$init 10\n$push 10 2 8 12 8 6\n$show\n[10, 2, 8, 12, 8, 6]\n$get 2\n8\n$set 2 20\n$show\n[10, 2, 20, 12, 8, 6]\n$get 10\nindex out of range\n$set 10 20\nindex out of range\n$show\n[10, 2, 20, 12, 8, 6]\n$end\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case clear\n$init 6\n$push 1 2 3 4 5 6\n$clear\n$show\n[]\n$status\nsize:0 capacity:6\n$end\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case reserve\n$init 6\n$push 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$reserve 10\n$show\n[1, 2, 3, 4, 5, 6]\n$status\nsize:6 capacity:10\n$end\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case pop\n$init 5\n$push 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$pop\n$show\n[1, 2, 3, 4]\n$pop\n$pop\n$pop\n$show\n[1]\n$status\nsize:1 capacity:5\n$pop\n$show\n[]\n$pop\nvector is empty\n$status\nsize:0 capacity:5\n$end\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case insert\n$init 6\n$push 1 2 3 4 5\n$insert 2 10\n$show\n[1, 2, 10, 3, 4, 5]\n$status\nsize:6 capacity:6\n$insert 0 20\n$show\n[20, 1, 2, 10, 3, 4, 5]\n$status\nsize:7 capacity:12\n$end\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case insert_resize\n$init 6\n$push 1 2 3 4 5 6\n$insert 2 10\n$show\n[1, 2, 10, 3, 4, 5, 6]\n$status\nsize:7 capacity:12\n$end\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case erase\n$init 6\n$push 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$erase 2\n$show\n[1, 2, 4, 5, 6]\n$status\nsize:5 capacity:6\n$erase 0\n$show\n[2, 4, 5, 6]\n$status\nsize:4 capacity:6\n$erase 8\nindex out of range\n$status\nsize:4 capacity:6\n$show\n[2, 4, 5, 6]\n$end\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case indexOf e contains\n$init 10\n$push 10 2 8 12 8 6\n$indexOf 12\n3\n$indexOf 8\n2\n$indexOf 7\n-1\n$contains 12\ntrue\n$end\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case reverse e sort\n$init 10\n$push 10 2 8 12 8 6\n$show\n[10, 2, 8, 12, 8, 6]\n$reverse\n$show\n[6, 8, 12, 8, 2, 10]\n$sort\n$show\n[2, 6, 8, 8, 10, 12]\n$end\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case sorted\n$init 10\n$push 10 2 8 12 8 6\n$show\n[10, 2, 8, 12, 8, 6]\n$sorted\n[2, 6, 8, 8, 10, 12]\n$show\n[10, 2, 8, 12, 8, 6]\n$end\n</code></pre>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT create\ninit 3\nstatus\nshow\nend\n======== EXPECT\n$init 3\n$status\nsize:0 capacity:3\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT push\ninit 1\nstatus\nshow\npush 3\nshow\nstatus\npush 4\nshow\nstatus\npush 5\nshow\nstatus\npush 1\nshow\nstatus\npush 2\nshow\nstatus\nend\n======== EXPECT\n$init 1\n$status\nsize:0 capacity:1\n$show\n[]\n$push 3\n$show\n[3]\n$status\nsize:1 capacity:1\n$push 4\n$show\n[3, 4]\n$status\nsize:2 capacity:2\n$push 5\n$show\n[3, 4, 5]\n$status\nsize:3 capacity:4\n$push 1\n$show\n[3, 4, 5, 1]\n$status\nsize:4 capacity:4\n$push 2\n$show\n[3, 4, 5, 1, 2]\n$status\nsize:5 capacity:8\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT get e set\ninit 10\npush 10 2 8 12 8 6\nshow\nget 2\nset 2 20\nshow\nget 10\nset 10 20\nshow\nend\n======== EXPECT\n$init 10\n$push 10 2 8 12 8 6\n$show\n[10, 2, 8, 12, 8, 6]\n$get 2\n8\n$set 2 20\n$show\n[10, 2, 20, 12, 8, 6]\n$get 10\nindex out of range\n$set 10 20\nindex out of range\n$show\n[10, 2, 20, 12, 8, 6]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT clear\ninit 6\npush 1 2 3 4 5 6\nclear\nshow\nstatus\nend\n======== EXPECT\n$init 6\n$push 1 2 3 4 5 6\n$clear\n$show\n[]\n$status\nsize:0 capacity:6\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reserve\ninit 6\npush 1 2 3 4 5 6\nshow\nreserve 10\nshow\nstatus\nend\n======== EXPECT\n$init 6\n$push 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$reserve 10\n$show\n[1, 2, 3, 4, 5, 6]\n$status\nsize:6 capacity:10\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT pop\ninit 5\npush 1 2 3 4 5\nshow\npop\nshow\npop\npop\npop\nshow\nstatus\npop\nshow\npop\nstatus\nend\n======== EXPECT\n$init 5\n$push 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$pop\n$show\n[1, 2, 3, 4]\n$pop\n$pop\n$pop\n$show\n[1]\n$status\nsize:1 capacity:5\n$pop\n$show\n[]\n$pop\nvector is empty\n$status\nsize:0 capacity:5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT insert\ninit 6\npush 1 2 3 4 5\ninsert 2 10\nshow\nstatus\ninsert 0 20\nshow\nstatus\nend\n======== EXPECT\n$init 6\n$push 1 2 3 4 5\n$insert 2 10\n$show\n[1, 2, 10, 3, 4, 5]\n$status\nsize:6 capacity:6\n$insert 0 20\n$show\n[20, 1, 2, 10, 3, 4, 5]\n$status\nsize:7 capacity:12\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT insert_resize\ninit 6\npush 1 2 3 4 5 6\ninsert 2 10\nshow\nstatus\nend\n======== EXPECT\n$init 6\n$push 1 2 3 4 5 6\n$insert 2 10\n$show\n[1, 2, 10, 3, 4, 5, 6]\n$status\nsize:7 capacity:12\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT erase\ninit 6\npush 1 2 3 4 5 6\nshow\nerase 2\nshow\nstatus\nerase 0\nshow\nstatus\nerase 8\nstatus\nshow\nend\n======== EXPECT\n$init 6\n$push 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$erase 2\n$show\n[1, 2, 4, 5, 6]\n$status\nsize:5 capacity:6\n$erase 0\n$show\n[2, 4, 5, 6]\n$status\nsize:4 capacity:6\n$erase 8\nindex out of range\n$status\nsize:4 capacity:6\n$show\n[2, 4, 5, 6]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT indexOf e contains\ninit 10\npush 10 2 8 12 8 6\nindexOf 12\nindexOf 8\nindexOf 7\ncontains 12\nend\n======== EXPECT\n$init 10\n$push 10 2 8 12 8 6\n$indexOf 12\n3\n$indexOf 8\n2\n$indexOf 7\n-1\n$contains 12\ntrue\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reverse e sort\ninit 10\npush 10 2 8 12 8 6\nshow\nreverse\nshow\nsort\nshow\nend\n======== EXPECT\n$init 10\n$push 10 2 8 12 8 6\n$show\n[10, 2, 8, 12, 8, 6]\n$reverse\n$show\n[6, 8, 12, 8, 2, 10]\n$sort\n$show\n[2, 6, 8, 8, 10, 12]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sorted\ninit 10\npush 10 2 8 12 8 6\nshow\nsorted\nshow\nend\n======== EXPECT\n$init 10\n$push 10 2 8 12 8 6\n$show\n[10, 2, 8, 12, 8, 6]\n$sorted\n[2, 6, 8, 8, 10, 12]\n$show\n[10, 2, 8, 12, 8, 6]\n$end\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "/*\nVector representa um array din\u00e2mico que pode crescer conforme necess\u00e1rio.\nEle fornece m\u00e9todos para manipular o array, como adicionar, remover e acessar elementos.\n\nclass Vector {\n- int* data;          // Guarda os elementos do vetor\n- int size;           // Guarda o n\u00famero atual de elementos\n- int capacity;       // Guarda a capacidade atual do vetor\n__\n+ Vector(int capacity);                // Cria um novo vetor com a capacidade inicial especificada\n+ void reserve(int newCapacity);      // Redimensiona a capacidade do vetor para pelo menos o valor especificado\n+ void pushBack(int value);           // Adiciona um valor ao final do vetor, redimensionando se necess\u00e1rio\n+ int getSize();                      // Retorna o n\u00famero atual de elementos no vetor\n__\n+ bool popBack();                     // Remove o \u00faltimo elemento do vetor. Retorna false se o vetor estiver vazio\n+ int getCapacity();                  // Retorna a capacidade atual do vetor\n+ std::string status();              // Retorna o tamanho e a capacidade do vetor\n+ std::string str();                 // Retorna uma representa\u00e7\u00e3o em string dos elementos do vetor\n__\n+ int get(int index);                         // Retorna o elemento no \u00edndice especificado sem verifica\u00e7\u00e3o de limites\n+ std::pair<int, bool> at(int index);        // Retorna o elemento no \u00edndice especificado com verifica\u00e7\u00e3o de limites. Retorna false se o \u00edndice estiver fora dos limites\n+ bool set(int index, int value);            // Define o valor no \u00edndice especificado. Retorna false se o \u00edndice estiver fora dos limites\n+ void clear();                              // Limpa todos os elementos do vetor\n__\n+ bool insert(int index, int value);         // Insere um valor no \u00edndice especificado, deslocando os elementos conforme necess\u00e1rio. Retorna false se o \u00edndice estiver fora dos limites\n+ bool erase(int index);                     // Remove o elemento no \u00edndice especificado, deslocando os elementos conforme necess\u00e1rio. Retorna false se o \u00edndice estiver fora dos limites\n__\n+ int indexOf(int value);                    // Retorna o \u00edndice da primeira ocorr\u00eancia do valor especificado, ou -1 se n\u00e3o for encontrado\n+ bool contains(int value);                  // Verifica se o valor especificado existe no vetor\n+ void reverse();                            // Inverte a ordem dos elementos no vetor\n+ void sort();                               // Ordena os elementos do vetor em ordem crescente\n+ std::vector<int> sorted();                 // Retorna uma c\u00f3pia ordenada dos elementos do vetor\n};\n*/\n\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nint main() {\n    std::string line, cmd;\n    \n    // // V \u00e9 criado como ponteiro para n\u00e3o ter problemas com c\u00f3pias\n    // Vector* v = new Vector(0);\n\n    while (true) {\n        std::cout << \"$\";\n        if (!std::getline(std::cin, line)) break;\n\n        std::cout << line << \"\\n\";\n        std::istringstream iss(line);\n        std::vector<std::string> parts;\n        std::string word;\n        while (iss >> word) parts.push_back(word);\n        if (parts.empty()) continue;\n        cmd = parts[0];\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"init\") {\n            // int cap = std::stoi(parts[1]);\n            // delete v;\n            // v = new Vector(cap);\n        } else if (cmd == \"push\") {\n            // for (size_t i = 1; i < parts.size(); i++)\n            //     v->push_back(std::stoi(parts[i]));\n        } else if (cmd == \"show\") {\n            // std::cout << v->str() << \"\\n\";\n        } else if (cmd == \"status\") {\n            // std::cout << v->status() << \"\\n\";\n        } else if (cmd == \"pop\") {\n            // if (!v->pop_back())\n            //     std::cout << \"vector is empty\\n\";\n        } else if (cmd == \"insert\") {\n            // int index = std::stoi(parts[1]);\n            // int value = std::stoi(parts[2]);\n            // if (!v->insert(index, value))\n            //     std::cout << \"index out of range\\n\";\n        } else if (cmd == \"erase\") {\n            // int index = std::stoi(parts[1]);\n            // if (!v->erase(index))\n            //     std::cout << \"index out of range\\n\";\n        } else if (cmd == \"indexOf\") {\n            // int value = std::stoi(parts[1]);\n            // std::cout << v->index_of(value) << \"\\n\";\n        } else if (cmd == \"contains\") {\n            // int value = std::stoi(parts[1]);\n            // std::cout << (v->contains(value) ? \"true\" : \"false\") << \"\\n\";\n        } else if (cmd == \"clear\") {\n            // v->clear();\n        } else if (cmd == \"capacity\") {\n            // std::cout << v->get_capaticy() << \"\\n\";\n        } else if (cmd == \"get\") {\n            // int index = std::stoi(parts[1]);\n            // auto [val, ok] = v->at(index);\n            // if (ok)\n            //     std::cout << val << \"\\n\";\n            // else\n            //     std::cout << \"index out of range\\n\";\n            // \n        } else if (cmd == \"set\") {\n            // int index = std::stoi(parts[1]);\n            // int value = std::stoi(parts[2]);\n            // if (!v->set(index, value))\n            //     std::cout << \"index out of range\\n\";\n        } else if (cmd == \"reserve\") {\n            // int newCap = std::stoi(parts[1]);\n            // v->reserve(newCap);\n        } else if (cmd == \"sort\") {\n            // v->sort();\n        } else if (cmd == \"sorted\") {\n            // auto sorted = v->sorted();\n            // std::cout << \"[\";\n            // for (size_t i = 0; i < sorted.size(); i++) {\n            //     std::cout << sorted[i];\n            //     if (i + 1 < sorted.size()) std::cout << \", \";\n            // }\n            // std::cout << \"]\\n\";\n        } else if (cmd == \"reverse\") {\n            // v->reverse();\n        } else {\n            std::cout << \"comando invalido\\n\";\n        }\n    }\n    // delete v;\n    return 0;\n}\n",
                "encoding": 0
            }
        ],
        "go": [
            {
                "name": "main.go",
                "contents": "/*\n\nVector representa um array din\u00e2mico que pode crescer conforme necess\u00e1rio.\nEle fornece m\u00e9todos para manipular o array, como adicionar, remover e acessar elementos.\n\nclass Vector {\n- data []int: Guarda os elementos do vetor\n- size int: Guarda o n\u00famero atual de elementos\n- capacity int: Guarda a capacidade atual do vetor\n__\n+ NewVector(capacity int) *Vector: Cria um novo vetor com a capacidade inicial especificada\n+ Reserve(newCapacity int): Redimensiona a capacidade do vetor para pelo menos o valor especificado\n+ PushBack(value int): Adiciona um valor ao final do vetor, redimensionando se necess\u00e1rio\n+ Size() int: Retorna o n\u00famero atual de elementos no vetor\n__\n+ PopBack() (int, error): Remove e retorna o \u00faltimo elemento do vetor. Retorna um erro se o vetor estiver vazio\n+ Capacity() int: Retorna a capacidade atual do vetor\n+ Status() string: Retorna o tamanho e a capacidade do vetor\n+ String() string: Retorna uma representa\u00e7\u00e3o em string dos elementos do vetor\n__\n+ Get(index int) int: Retorna o elemento no \u00edndice especificado sem verifica\u00e7\u00e3o de limites\n+ At(index int) (int, error): Retorna o elemento no \u00edndice especificado com verifica\u00e7\u00e3o de limites. Retorna um erro se o \u00edndice estiver fora dos limites\n+ Set(index int, value int) error: Define o valor no \u00edndice especificado. Retorna um erro se o \u00edndice estiver fora dos limites\n+ Clear(): Limpa todos os elementos do vetor\n__\n+ Insert(index int, value int) error: Insere um valor no \u00edndice especificado, deslocando os elementos conforme necess\u00e1rio. Retorna um erro se o \u00edndice estiver fora dos limites\n+ Erase(index int) error: Remove o elemento no \u00edndice especificado, deslocando os elementos conforme necess\u00e1rio. Retorna um erro se o \u00edndice estiver fora dos limites\n__\n+ IndexOf(value int) int: Retorna o \u00edndice da primeira ocorr\u00eancia do valor especificado, ou -1 se n\u00e3o for encontrado\n+ Contains(value int) bool: Verifica se o valor especificado existe no vetor\n+ Reverse() int: Inverte a ordem dos elementos no vetor\n+ Sort() int: Ordena os elementos do vetor em ordem crescente\n+ Sorted() []int: Retorna uma c\u00f3pia ordenada dos elementos do vetor\n}\n*/\n\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tvar line, cmd string\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\t// v := NewVector(0)\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline = scanner.Text()\n\t\tfmt.Println(line)\n\t\tparts := strings.Fields(line)\n\t\tif len(parts) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcmd = parts[0]\n\n\t\tswitch cmd {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"init\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\t\t// v = NewVector(value)\n\t\tcase \"push\":\n\t\t\t// for _, part := range parts[1:] {\n\t\t\t// \tvalue, _ := strconv.Atoi(part)\n\t\t\t// \tv.PushBack(value)\n\t\t\t// }\n\t\tcase \"show\":\n\t\t\t// fmt.Println(v)\n\t\tcase \"status\":\n\t\t\t// fmt.Println(v.Status())\n\t\tcase \"pop\":\n\t\t\t// err := v.PopBack()\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// }\n\t\tcase \"insert\":\n\t\t\t// index, _ := strconv.Atoi(parts[1])\n\t\t\t// value, _ := strconv.Atoi(parts[2])\n\t\t\t// err := v.Insert(index, value)\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// }\n\t\tcase \"erase\":\n\t\t\t// index, _ := strconv.Atoi(parts[1])\n\t\t\t// err := v.Erase(index)\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// }\n\t\tcase \"indexOf\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\t\t// index := v.IndexOf(value)\n\t\t\t// fmt.Println(index)\n\t\tcase \"contains\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\t\t// if v.Contains(value) {\n\t\t\t// \tfmt.Println(\"true\")\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"false\")\n\t\t\t// }\n\t\tcase \"clear\":\n\t\t\t// v.Clear()\n\t\tcase \"capacity\":\n\t\t\t// fmt.Println(v.Capacity())\n\t\tcase \"get\":\n\t\t\t// index, _ := strconv.Atoi(parts[1])\n\t\t\t// value, err := v.At(index)\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(value)\n\t\t\t// }\n\t\tcase \"set\":\n\t\t\t// index, _ := strconv.Atoi(parts[1])\n\t\t\t// value, _ := strconv.Atoi(parts[2])\n\t\t\t// err := v.Set(index, value)\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// }\n\t\t\t// \n\t\tcase \"reserve\":\n\t\t\t// newCapacity, _ := strconv.Atoi(parts[1])\n\t\t\t// v.Reserve(newCapacity)\n\t\tcase \"sort\":\n\t\t\t// v.Sort()\n\t\tcase \"sorted\":\n\t\t\t// fmt.Println(\"[\" + Join(v.Sorted(), \", \") + \"]\")\n\t\tcase \"reverse\":\n\t\t\t// v.Reverse()\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "encoding": 0
            }
        ]
    }
}
