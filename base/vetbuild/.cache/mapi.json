{
    "title": "@vetbuild: Lista Sequencial Din\u00e2mica",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@vetbuild: Lista Sequencial Din\u00e2mica</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"lista-sequencial-din\u00e2mica\">Lista Sequencial Din\u00e2mica</h1>\n<ul>\n<li>O vetor din\u00e2mico \u00e9 uma lista sequencial que pode crescer ou diminuir\nde tamanho conforme necess\u00e1rio.</li>\n<li>Ele \u00e9 implementado com diferentes nomes dependendo da linguagem.\n<ul>\n<li>c n\u00e3o possui vetor din\u00e2mico, mas pode ser implementado com\nponteiros.</li>\n<li>c++ usa <code>Vector</code></li>\n<li>go usa <code>slice</code></li>\n<li>python usa <code>list</code></li>\n<li>rust usa <code>Vec</code></li>\n<li>java usa <code>ArrayList</code></li>\n<li>javascript e typescript usam <code>Array</code></li>\n</ul></li>\n</ul>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/vetbuild/cover.jpg\"\nalt=\"_\" />\n<figcaption aria-hidden=\"true\">_</figcaption>\n</figure>\n<p>Implemente a classe do vetor din\u00e2mico.</p>\n<ul>\n<li><p>Cada linguagem vai ter um arquivo <code>extra.md</code> com\norienta\u00e7\u00f5es sobre a implementa\u00e7\u00e3o.</p></li>\n<li><p>Voc\u00ea deve criar a classe e implementar os m\u00e9todos conforme as\norienta\u00e7\u00f5es.</p></li>\n<li><p>Depois de implementar um m\u00e9todo, descomente e ajuste a entrada do\nm\u00e9todo na fun\u00e7\u00e3o main.</p></li>\n<li><p>Implemente apenas os m\u00e9todos necess\u00e1rios para passar no primeiro\nteste.</p></li>\n<li><p>Depois de passar no primeiro teste, implemente os m\u00e9todos\nnecess\u00e1rios para passar no segundo teste.</p></li>\n<li><p>Continue assim at\u00e9 passar em todos os testes.</p></li>\n<li><p>Os seguintes testes mostrar o comportamento esperado da classe\npara cada invoca\u00e7\u00e3o de m\u00e9todo.</p></li>\n<li><p>Cada linha que come\u00e7a com <code>$</code> equivale a uma chamada\nde m\u00e9todo.</p></li>\n<li><p>Cada #TEST_CASE separa um caso de teste diferente.</p></li>\n</ul>\n<h2 id=\"drafts\">Drafts</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>c\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/c/main.c\">main.c</a></li>\n</ul></li>\n<li>cpp\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/cpp/extra.md\">extra.md</a></li>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/cpp/main.cpp\">main.cpp</a></li>\n</ul></li>\n<li>go\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/go/extra.md\">extra.md</a></li>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/go/main.go\">main.go</a></li>\n</ul></li>\n<li>java\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/java/Shell.java\">Shell.java</a></li>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/java/extra.md\">extra.md</a></li>\n</ul></li>\n<li>py\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/py/extra.md\">extra.md</a></li>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/py/main.py\">main.py</a>\n<!-- links --></li>\n</ul></li>\n</ul>\n<h2 id=\"testes\">Testes</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE create</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 3</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:0</span> capacity:3</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE push</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 1</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:0</span> capacity:1</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push</span> 3</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[3]</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:1</span> capacity:1</span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push</span> 4</span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[3,</span> 4]</span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:2</span> capacity:2</span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push</span> 5</span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[3,</span> 4, 5]</span>\n<span id=\"cb2-20\"><a href=\"#cb2-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb2-21\"><a href=\"#cb2-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:3</span> capacity:4</span>\n<span id=\"cb2-22\"><a href=\"#cb2-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push</span> 1</span>\n<span id=\"cb2-23\"><a href=\"#cb2-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb2-24\"><a href=\"#cb2-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[3,</span> 4, 5, 1]</span>\n<span id=\"cb2-25\"><a href=\"#cb2-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb2-26\"><a href=\"#cb2-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:4</span> capacity:4</span>\n<span id=\"cb2-27\"><a href=\"#cb2-27\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push</span> 2</span>\n<span id=\"cb2-28\"><a href=\"#cb2-28\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb2-29\"><a href=\"#cb2-29\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[3,</span> 4, 5, 1, 2]</span>\n<span id=\"cb2-30\"><a href=\"#cb2-30\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb2-31\"><a href=\"#cb2-31\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:5</span> capacity:8</span>\n<span id=\"cb2-32\"><a href=\"#cb2-32\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb3\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE get e set</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 10</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push</span> 10 2 8 12 8 6</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[10,</span> 2, 8, 12, 8, 6]</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$get</span> 2</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">8</span></span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$set</span> 2 20</span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[10,</span> 2, 20, 12, 8, 6]</span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$get</span> 10</span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">index</span> out of range</span>\n<span id=\"cb3-13\"><a href=\"#cb3-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$set</span> 10 20</span>\n<span id=\"cb3-14\"><a href=\"#cb3-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">index</span> out of range</span>\n<span id=\"cb3-15\"><a href=\"#cb3-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb3-16\"><a href=\"#cb3-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[10,</span> 2, 20, 12, 8, 6]</span>\n<span id=\"cb3-17\"><a href=\"#cb3-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb4\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE clear</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 6</span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push</span> 1 2 3 4 5 6</span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$clear</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:0</span> capacity:6</span>\n<span id=\"cb4-9\"><a href=\"#cb4-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb5\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE reserve</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 6</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push</span> 1 2 3 4 5 6</span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 5, 6]</span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$reserve</span> 10</span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 5, 6]</span>\n<span id=\"cb5-9\"><a href=\"#cb5-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb5-10\"><a href=\"#cb5-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:6</span> capacity:10</span>\n<span id=\"cb5-11\"><a href=\"#cb5-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb6\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE pop</span></span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 5</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push</span> 1 2 3 4 5</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 5]</span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop</span></span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4]</span>\n<span id=\"cb6-9\"><a href=\"#cb6-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop</span></span>\n<span id=\"cb6-10\"><a href=\"#cb6-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop</span></span>\n<span id=\"cb6-11\"><a href=\"#cb6-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop</span></span>\n<span id=\"cb6-12\"><a href=\"#cb6-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb6-13\"><a href=\"#cb6-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1]</span></span>\n<span id=\"cb6-14\"><a href=\"#cb6-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb6-15\"><a href=\"#cb6-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:1</span> capacity:5</span>\n<span id=\"cb6-16\"><a href=\"#cb6-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop</span></span>\n<span id=\"cb6-17\"><a href=\"#cb6-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb6-18\"><a href=\"#cb6-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb6-19\"><a href=\"#cb6-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop</span></span>\n<span id=\"cb6-20\"><a href=\"#cb6-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">vector</span> is empty</span>\n<span id=\"cb6-21\"><a href=\"#cb6-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb6-22\"><a href=\"#cb6-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:0</span> capacity:5</span>\n<span id=\"cb6-23\"><a href=\"#cb6-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb7\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE insert</span></span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 6</span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push</span> 1 2 3 4 5</span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 2 10</span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 10, 3, 4, 5]</span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:6</span> capacity:6</span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 0 20</span>\n<span id=\"cb7-10\"><a href=\"#cb7-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb7-11\"><a href=\"#cb7-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[20,</span> 1, 2, 10, 3, 4, 5]</span>\n<span id=\"cb7-12\"><a href=\"#cb7-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb7-13\"><a href=\"#cb7-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:7</span> capacity:12</span>\n<span id=\"cb7-14\"><a href=\"#cb7-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb8\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb8-1\"><a href=\"#cb8-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE insert_resize</span></span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 6</span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push</span> 1 2 3 4 5 6</span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 2 10</span>\n<span id=\"cb8-5\"><a href=\"#cb8-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb8-6\"><a href=\"#cb8-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 10, 3, 4, 5, 6]</span>\n<span id=\"cb8-7\"><a href=\"#cb8-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb8-8\"><a href=\"#cb8-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:7</span> capacity:12</span>\n<span id=\"cb8-9\"><a href=\"#cb8-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb9\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE erase</span></span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 6</span>\n<span id=\"cb9-3\"><a href=\"#cb9-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push</span> 1 2 3 4 5 6</span>\n<span id=\"cb9-4\"><a href=\"#cb9-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb9-5\"><a href=\"#cb9-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 5, 6]</span>\n<span id=\"cb9-6\"><a href=\"#cb9-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase</span> 2</span>\n<span id=\"cb9-7\"><a href=\"#cb9-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb9-8\"><a href=\"#cb9-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 4, 5, 6]</span>\n<span id=\"cb9-9\"><a href=\"#cb9-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb9-10\"><a href=\"#cb9-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:5</span> capacity:6</span>\n<span id=\"cb9-11\"><a href=\"#cb9-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase</span> 0</span>\n<span id=\"cb9-12\"><a href=\"#cb9-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb9-13\"><a href=\"#cb9-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[2,</span> 4, 5, 6]</span>\n<span id=\"cb9-14\"><a href=\"#cb9-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb9-15\"><a href=\"#cb9-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:4</span> capacity:6</span>\n<span id=\"cb9-16\"><a href=\"#cb9-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase</span> 8</span>\n<span id=\"cb9-17\"><a href=\"#cb9-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">index</span> out of range</span>\n<span id=\"cb9-18\"><a href=\"#cb9-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$status</span></span>\n<span id=\"cb9-19\"><a href=\"#cb9-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:4</span> capacity:6</span>\n<span id=\"cb9-20\"><a href=\"#cb9-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb9-21\"><a href=\"#cb9-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[2,</span> 4, 5, 6]</span>\n<span id=\"cb9-22\"><a href=\"#cb9-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb10\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb10-1\"><a href=\"#cb10-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE indexOf e contains</span></span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$init</span> 10</span>\n<span id=\"cb10-3\"><a href=\"#cb10-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push</span> 10 2 8 12 8 6</span>\n<span id=\"cb10-4\"><a href=\"#cb10-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$indexOf</span> 12</span>\n<span id=\"cb10-5\"><a href=\"#cb10-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">3</span></span>\n<span id=\"cb10-6\"><a href=\"#cb10-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$indexOf</span> 8</span>\n<span id=\"cb10-7\"><a href=\"#cb10-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">2</span></span>\n<span id=\"cb10-8\"><a href=\"#cb10-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$indexOf</span> 7</span>\n<span id=\"cb10-9\"><a href=\"#cb10-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">-1</span></span>\n<span id=\"cb10-10\"><a href=\"#cb10-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$contains</span> 12</span>\n<span id=\"cb10-11\"><a href=\"#cb10-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">true</span></span>\n<span id=\"cb10-12\"><a href=\"#cb10-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT create\ninit 3\nstatus\nshow\nend\n======== EXPECT\n$init 3\n$status\nsize:0 capacity:3\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT push\ninit 1\nstatus\nshow\npush 3\nshow\nstatus\npush 4\nshow\nstatus\npush 5\nshow\nstatus\npush 1\nshow\nstatus\npush 2\nshow\nstatus\nend\n======== EXPECT\n$init 1\n$status\nsize:0 capacity:1\n$show\n[]\n$push 3\n$show\n[3]\n$status\nsize:1 capacity:1\n$push 4\n$show\n[3, 4]\n$status\nsize:2 capacity:2\n$push 5\n$show\n[3, 4, 5]\n$status\nsize:3 capacity:4\n$push 1\n$show\n[3, 4, 5, 1]\n$status\nsize:4 capacity:4\n$push 2\n$show\n[3, 4, 5, 1, 2]\n$status\nsize:5 capacity:8\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT get e set\ninit 10\npush 10 2 8 12 8 6\nshow\nget 2\nset 2 20\nshow\nget 10\nset 10 20\nshow\nend\n======== EXPECT\n$init 10\n$push 10 2 8 12 8 6\n$show\n[10, 2, 8, 12, 8, 6]\n$get 2\n8\n$set 2 20\n$show\n[10, 2, 20, 12, 8, 6]\n$get 10\nindex out of range\n$set 10 20\nindex out of range\n$show\n[10, 2, 20, 12, 8, 6]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT clear\ninit 6\npush 1 2 3 4 5 6\nclear\nshow\nstatus\nend\n======== EXPECT\n$init 6\n$push 1 2 3 4 5 6\n$clear\n$show\n[]\n$status\nsize:0 capacity:6\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reserve\ninit 6\npush 1 2 3 4 5 6\nshow\nreserve 10\nshow\nstatus\nend\n======== EXPECT\n$init 6\n$push 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$reserve 10\n$show\n[1, 2, 3, 4, 5, 6]\n$status\nsize:6 capacity:10\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT pop\ninit 5\npush 1 2 3 4 5\nshow\npop\nshow\npop\npop\npop\nshow\nstatus\npop\nshow\npop\nstatus\nend\n======== EXPECT\n$init 5\n$push 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$pop\n$show\n[1, 2, 3, 4]\n$pop\n$pop\n$pop\n$show\n[1]\n$status\nsize:1 capacity:5\n$pop\n$show\n[]\n$pop\nvector is empty\n$status\nsize:0 capacity:5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT insert\ninit 6\npush 1 2 3 4 5\ninsert 2 10\nshow\nstatus\ninsert 0 20\nshow\nstatus\nend\n======== EXPECT\n$init 6\n$push 1 2 3 4 5\n$insert 2 10\n$show\n[1, 2, 10, 3, 4, 5]\n$status\nsize:6 capacity:6\n$insert 0 20\n$show\n[20, 1, 2, 10, 3, 4, 5]\n$status\nsize:7 capacity:12\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT insert_resize\ninit 6\npush 1 2 3 4 5 6\ninsert 2 10\nshow\nstatus\nend\n======== EXPECT\n$init 6\n$push 1 2 3 4 5 6\n$insert 2 10\n$show\n[1, 2, 10, 3, 4, 5, 6]\n$status\nsize:7 capacity:12\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT erase\ninit 6\npush 1 2 3 4 5 6\nshow\nerase 2\nshow\nstatus\nerase 0\nshow\nstatus\nerase 8\nstatus\nshow\nend\n======== EXPECT\n$init 6\n$push 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$erase 2\n$show\n[1, 2, 4, 5, 6]\n$status\nsize:5 capacity:6\n$erase 0\n$show\n[2, 4, 5, 6]\n$status\nsize:4 capacity:6\n$erase 8\nindex out of range\n$status\nsize:4 capacity:6\n$show\n[2, 4, 5, 6]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT indexOf e contains\ninit 10\npush 10 2 8 12 8 6\nindexOf 12\nindexOf 8\nindexOf 7\ncontains 12\nend\n======== EXPECT\n$init 10\n$push 10 2 8 12 8 6\n$indexOf 12\n3\n$indexOf 8\n2\n$indexOf 7\n-1\n$contains 12\ntrue\n$end\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\nimport java.util.Arrays;\n\npublic class Shell {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        // MyArrayList v = new MyArrayList(0);\n\n        while (true) {\n            System.out.print(\"$\");\n            if (!scanner.hasNextLine())\n                break;\n            String line = scanner.nextLine();\n            System.out.println(line);\n            String[] parts = line.trim().split(\"\\\\s+\");\n            if (parts.length == 0)\n                continue;\n            String cmd = parts[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            } else if (cmd.equals(\"init\")) {\n                // int cap = Integer.parseInt(parts[1]);\n                // v = new MyArrayList(cap);\n            } else if (cmd.equals(\"show\")) {\n                // System.out.println(v);\n            } else if (cmd.equals(\"status\")) {\n                // System.out.println(v.getStatus());\n            } else if (cmd.equals(\"pop\")) {\n                // v.removeLast();\n            } else if (cmd.equals(\"reserve\")) {\n                // int ncap = Integer.parseInt(parts[1]);\n                // v.ensureCapacity(ncap);\n            } else if (cmd.equals(\"push\")) {\n                // for (int i = 1; i < parts.length; i++) {\n                //     int val = Integer.parseInt(parts[i]);\n                //     v.add(val);\n                // }\n            } else if (cmd.equals(\"insert\")) {\n                // int idx = Integer.parseInt(parts[1]);\n                // int val = Integer.parseInt(parts[2]);\n                // v.add(idx, val);\n            } else if (cmd.equals(\"erase\")) {\n                // int id = Integer.parseInt(parts[1]);\n                // v.remove(id);\n            } else if (cmd.equals(\"indexOf\")) {\n                // int value = Integer.parseInt(parts[1]);\n                // System.out.println(v.indexOf(value));\n            } else if (cmd.equals(\"contains\")) {\n                // int cval = Integer.parseInt(parts[1]);\n                // System.out.println(v.contains(cval));\n            } else if (cmd.equals(\"clear\")) {\n                // v.clear();\n            } else if (cmd.equals(\"capacity\")) {\n                // System.out.println(v.getCapacity());\n            } else if (cmd.equals(\"get\")) {\n                // int gidx = Integer.parseInt(parts[1]);\n                // Integer gval = v.getAt(gidx);\n                // if (gval != null)\n                //     System.out.println(gval);\n            } else if (cmd.equals(\"set\")) {\n                // int sidx = Integer.parseInt(parts[1]);\n                // int sval = Integer.parseInt(parts[2]);\n                // v.set(sidx, sval);\n            } else {\n                System.out.println(\"comando invalido\");\n            }\n        }\n        scanner.close();\n    }\n}\n",
                "encoding": 0
            },
            {
                "name": "extra.md",
                "contents": "# Java\n\n```ts\nclass MyArrayList {\n  - elementData: int[]                      // Guarda os elementos da lista\n  - size: int                               // N\u00famero atual de elementos na lista\n  - capacity: int                           // Capacidade atual do array interno\n  --\n  + MyArrayList(initialCapacity: int)       // Cria uma nova lista com a capacidade inicial especificada\n  + ensureCapacity(minCapacity: int): void  // Garante que a capacidade seja pelo menos o valor especificado\n  + add(value: int): void                   // Adiciona um valor ao final da lista, redimensionando se necess\u00e1rio\n  + size(): int                             // Retorna o n\u00famero atual de elementos na lista\n  --\n  + removeLast(): boolean                   // Remove e retorna o \u00faltimo elemento da lista.\n  + getCapacity(): int                      // Retorna a capacidade atual da lista\n  + getStatus(): String                     // Retorna uma string com o tamanho e a capacidade\n  + toString(): String                      // Retorna uma representa\u00e7\u00e3o em string dos elementos\n  --\n  + get(index: int): int                    // Retorna o elemento no \u00edndice especificado sem verifica\u00e7\u00e3o\n  + getAt(index: int): Integer              // Retorna o elemento com verifica\u00e7\u00e3o de limites ou null caso n\u00e3o exista\n  + set(index: int, value: int): boolean    // Define o valor no \u00edndice especificado\n                                            // Define o valor no \u00edndice especificado\n  + clear(): void                           // Remove todos os elementos da lista\n  --\n  + add(index: int, value: int): boolean    // Insere valor no \u00edndice especificado, deslocando os elementos\n  + remove(index: int): boolean             // Remove o elemento no \u00edndice especificado, deslocando os elementos\n  --\n  + indexOf(value: int): int                // Retorna o \u00edndice da primeira ocorr\u00eancia do valor, ou -1\n  + contains(value: int): boolean           // Retorna se o valor est\u00e1 presente na lista\n}\n```\n",
                "encoding": 0
            }
        ],
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nint main() {\n    std::string line, cmd;\n    \n    // // V \u00e9 criado como ponteiro para n\u00e3o ter problemas com c\u00f3pias\n    // Vector* v = new Vector(0);\n\n    while (true) {\n        std::cout << \"$\";\n        if (!std::getline(std::cin, line)) break;\n\n        std::cout << line << \"\\n\";\n        std::istringstream iss(line);\n        std::vector<std::string> parts;\n        std::string word;\n        while (iss >> word) parts.push_back(word);\n        if (parts.empty()) continue;\n        cmd = parts[0];\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"init\") {\n            // int cap = std::stoi(parts[1]);\n            // delete v;\n            // v = new Vector(cap);\n        } else if (cmd == \"push\") {\n            // for (size_t i = 1; i < parts.size(); i++)\n            //     v->push_back(std::stoi(parts[i]));\n        } else if (cmd == \"show\") {\n            // std::cout << v->str() << \"\\n\";\n        } else if (cmd == \"status\") {\n            // std::cout << v->status() << \"\\n\";\n        } else if (cmd == \"pop\") {\n            // if (!v->pop_back())\n            //     std::cout << \"vector is empty\\n\";\n        } else if (cmd == \"insert\") {\n            // int index = std::stoi(parts[1]);\n            // int value = std::stoi(parts[2]);\n            // if (!v->insert(index, value))\n            //     std::cout << \"index out of range\\n\";\n        } else if (cmd == \"erase\") {\n            // int index = std::stoi(parts[1]);\n            // if (!v->erase(index))\n            //     std::cout << \"index out of range\\n\";\n        } else if (cmd == \"indexOf\") {\n            // int value = std::stoi(parts[1]);\n            // std::cout << v->index_of(value) << \"\\n\";\n        } else if (cmd == \"contains\") {\n            // int value = std::stoi(parts[1]);\n            // std::cout << (v->contains(value) ? \"true\" : \"false\") << \"\\n\";\n        } else if (cmd == \"clear\") {\n            // v->clear();\n        } else if (cmd == \"capacity\") {\n            // std::cout << v->get_capaticy() << \"\\n\";\n        } else if (cmd == \"get\") {\n            // int index = std::stoi(parts[1]);\n            // auto [val, ok] = v->at(index);\n            // if (ok)\n            //     std::cout << val << \"\\n\";\n            // else\n            //     std::cout << \"index out of range\\n\";\n            // \n        } else if (cmd == \"set\") {\n            // int index = std::stoi(parts[1]);\n            // int value = std::stoi(parts[2]);\n            // if (!v->set(index, value))\n            //     std::cout << \"index out of range\\n\";\n        } else if (cmd == \"reserve\") {\n            // int newCap = std::stoi(parts[1]);\n            // v->reserve(newCap);\n        } else {\n            std::cout << \"comando invalido\\n\";\n        }\n    }\n    // delete v;\n    return 0;\n}\n",
                "encoding": 0
            },
            {
                "name": "extra.md",
                "contents": "# Vetor\n\n```ts\nclass Vector {\n    - data: int*                              ' Guarda os elementos do vetor\n    - size: int                               ' Guarda o n\u00famero atual de elementos\n    - capacity: int                           ' Guarda a capacidade atual do vetor\n    __\n    + Vector(capacity: int)                   ' Cria um novo vetor com a capacidade inicial especificada\n    + reserve(newCapacity: int): void         ' Redimensiona a capacidade do vetor para pelo menos o valor especificado\n    + pushBack(value: int): void              ' Adiciona um valor ao final do vetor, redimensionando se necess\u00e1rio\n    + getSize(): int                          ' Retorna o n\u00famero atual de elementos no vetor\n    __\n    + popBack(): bool                         ' Remove o \u00faltimo elemento do vetor. Retorna false se o vetor estiver vazio\n    + getCapacity(): int                      ' Retorna a capacidade atual do vetor\n    + status(): string                        ' Retorna o tamanho e a capacidade do vetor\n    + str(): string                           ' Retorna uma representa\u00e7\u00e3o em string dos elementos do vetor\n    __\n    + get(index: int): int                    ' Retorna o elemento no \u00edndice especificado sem verifica\u00e7\u00e3o de limites\n    + at(index: int): pair<int, bool>         ' Retorna o elemento no \u00edndice especificado com verifica\u00e7\u00e3o de limites.\n                                              ' Retorna false se o \u00edndice estiver fora dos limites\n    + set(index: int, value: int): bool       ' Define o valor no \u00edndice especificado.\n                                              ' Retorna false se o \u00edndice estiver fora dos limites\n    + clear(): void                           ' Limpa todos os elementos do vetor\n    __\n    + insert(index: int, value: int): bool    ' Insere um valor no \u00edndice especificado, deslocando os elementos conforme necess\u00e1rio.\n                                              ' Retorna false se o \u00edndice estiver fora dos limites\n    + erase(index: int): bool                 ' Remove o elemento no \u00edndice especificado, deslocando os elementos conforme necess\u00e1rio.\n                                              ' Retorna false se o \u00edndice estiver fora dos limites\n    + indexOf(value: int): int                ' Retorna o \u00edndice da primeira ocorr\u00eancia do valor especificado, ou -1 se n\u00e3o for encontrado\n    + contains(value: int): bool              ' Verifica se o valor especificado existe no vetor\n}\n```\n",
                "encoding": 0
            }
        ],
        "c": [
            {
                "name": "main.c",
                "contents": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\ntypedef struct {\n    int* data;\n    int size;\n    int capacity;\n} Vector;\n\n\nVector* vector_create(int capacity) {\n    (void) capacity;\n    return NULL;\n}\n\n\nvoid vector_destroy(Vector* v) {\n    (void) v;\n}\n\n\nvoid vector_reserve(Vector* v, int newCapacity) {\n    (void) v;\n    (void) newCapacity;\n}\n\n\nvoid vector_push_back(Vector* v, int value) {\n    (void) v;\n    (void) value;\n}\n\n\nbool vector_pop_back(Vector* v) {\n    (void) v;\n    return false;\n}\n\n\nbool vector_insert(Vector* v, int index, int value) {\n    (void) v;\n    (void) index;\n    (void) value;\n    return false;\n}\n\n\nbool vector_erase(Vector* v, int index) {\n    (void) v;\n    (void) index;\n    return false;\n}\n\n\nint vector_index_of(Vector* v, int value) {\n    (void) v;\n    (void) value;\n    return 0;\n}\n\n\nbool vector_contains(Vector* v, int value) {\n    (void) v;\n    (void) value;\n    return false;\n}\n\n\nint vector_get_size(Vector* v) {\n    (void) v;\n    return 0;\n}\n\n\nint vector_get_capacity(Vector* v) {\n    (void) v;\n    return 0;\n}\n\n\nvoid vector_status(Vector* v) {\n    (void) v;\n}\n\n\nvoid vector_str(Vector* v) {\n    (void) v;\n}\n\n\nbool vector_at(Vector* v, int index, int* out_value) {\n    (void) v;\n    (void) index;\n    (void) out_value;\n    return false;\n}\n\n\nbool vector_set(Vector* v, int index, int value) {\n    (void) v;\n    (void) value;\n    return false;\n}\n\n\nvoid vector_clear(Vector* v) {\n    (void) v;\n}\n\nint main() {\n    char line[100];\n    Vector* v = vector_create(0);\n\n    while (true) {\n        printf(\"$\");\n        if (!fgets(line, sizeof(line), stdin)) break;\n        line[strcspn(line, \"\\n\")] = 0;\n        printf(\"%s\\n\", line);\n\n        char* cmd = strtok(line, \" \");\n        if (!cmd) continue;\n\n        if (strcmp(cmd, \"end\") == 0) {\n            break;\n        } else if (strcmp(cmd, \"init\") == 0) {\n            int cap = atoi(strtok(NULL, \" \"));\n            vector_destroy(v);\n            v = vector_create(cap);\n        } else if (strcmp(cmd, \"push\") == 0) {\n            char* arg;\n            while ((arg = strtok(NULL, \" \")))\n                vector_push_back(v, atoi(arg));\n        } else if (strcmp(cmd, \"show\") == 0) {\n            vector_str(v);\n        } else if (strcmp(cmd, \"status\") == 0) {\n            vector_status(v);\n        } else if (strcmp(cmd, \"pop\") == 0) {\n            if (!vector_pop_back(v))\n                printf(\"vector is empty\\n\");\n        } else if (strcmp(cmd, \"insert\") == 0) {\n            int index = atoi(strtok(NULL, \" \"));\n            int value = atoi(strtok(NULL, \" \"));\n            if (!vector_insert(v, index, value))\n                printf(\"index out of range\\n\");\n        } else if (strcmp(cmd, \"erase\") == 0) {\n            int index = atoi(strtok(NULL, \" \"));\n            if (!vector_erase(v, index))\n                printf(\"index out of range\\n\");\n        } else if (strcmp(cmd, \"indexOf\") == 0) {\n            int value = atoi(strtok(NULL, \" \"));\n            printf(\"%d\\n\", vector_index_of(v, value));\n        } else if (strcmp(cmd, \"contains\") == 0) {\n            int value = atoi(strtok(NULL, \" \"));\n            printf(vector_contains(v, value) ? \"true\\n\" : \"false\\n\");\n        } else if (strcmp(cmd, \"clear\") == 0) {\n            vector_clear(v);\n        } else if (strcmp(cmd, \"capacity\") == 0) {\n            printf(\"%d\\n\", vector_get_capacity(v));\n        } else if (strcmp(cmd, \"get\") == 0) {\n            int index = atoi(strtok(NULL, \" \"));\n            int value;\n            if (vector_at(v, index, &value))\n                printf(\"%d\\n\", value);\n            else\n                printf(\"index out of range\\n\");\n        } else if (strcmp(cmd, \"set\") == 0) {\n            int index = atoi(strtok(NULL, \" \"));\n            int value = atoi(strtok(NULL, \" \"));\n            if (!vector_set(v, index, value))\n                printf(\"index out of range\\n\");\n        } else if (strcmp(cmd, \"reserve\") == 0) {\n            int newCap = atoi(strtok(NULL, \" \"));\n            vector_reserve(v, newCap);\n        } else {\n            printf(\"comando invalido\\n\");\n        }\n    }\n\n    vector_destroy(v);\n    return 0;\n}\n",
                "encoding": 0
            }
        ],
        "go": [
            {
                "name": "extra.md",
                "contents": "# Vector\n\n```ts\nclass Vector {\n  - data: []int                             ' Guarda os elementos do vetor\n  - size: int                               ' Guarda o n\u00famero atual de elementos\n  - capacity: int                           ' Guarda a capacidade atual do vetor\n  --\n  + NewVector(capacity: int): *Vector       ' Cria um novo vetor com a capacidade inicial especificada\n  + Reserve(newCapacity: int): void         ' Redimensiona a capacidade do vetor para pelo menos o valor especificado\n  + PushBack(value: int): void              ' Adiciona um valor ao final do vetor, redimensionando se necess\u00e1rio\n  + Size(): int                             ' Retorna o n\u00famero atual de elementos no vetor\n  --\n  + PopBack(): (int, error)                 ' Remove e retorna o \u00faltimo elemento do vetor. Retorna um erro se o vetor estiver vazio\n  + Capacity(): int                         ' Retorna a capacidade atual do vetor\n  + Status(): string                        ' Retorna o tamanho e a capacidade do vetor\n  + String(): string                        ' Retorna uma representa\u00e7\u00e3o em string dos elementos do vetor\n  --\n  + Get(index: int): int                    ' Retorna o elemento no \u00edndice especificado sem verifica\u00e7\u00e3o de limites\n  + At(index: int): (int, error)            ' Retorna o elemento no \u00edndice especificado com verifica\u00e7\u00e3o de limites.\n                                            ' Retorna um erro se o \u00edndice estiver fora dos limites\n  + Set(index: int, value: int): error      ' Define o valor no \u00edndice especificado.\n                                            ' Retorna um erro se o \u00edndice estiver fora dos limites\n  + Clear(): void                           ' Limpa todos os elementos do vetor\n  --\n  + Insert(index: int, value: int): error   ' Insere um valor no \u00edndice especificado, deslocando os elementos conforme necess\u00e1rio.\n                                            ' Retorna um erro se o \u00edndice estiver fora dos limites\n  + Erase(index: int): error                ' Remove o elemento no \u00edndice especificado, deslocando os elementos conforme necess\u00e1rio.\n                                            ' Retorna um erro se o \u00edndice estiver fora dos limites\n  --\n  + IndexOf(value: int): int                ' Retorna o \u00edndice da primeira ocorr\u00eancia do valor especificado, ou -1 se n\u00e3o for encontrado\n  + Contains(value: int): bool              ' Verifica se o valor especificado existe no vetor\n}\n```\n",
                "encoding": 0
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"strings\"\n)\n\n\nfunc Join(slice []int, sep string) string {\n\tif len(slice) == 0 {\n\t\treturn \"\"\n\t}\n\tresult := fmt.Sprintf(\"%d\", slice[0])\n\tfor _, value := range slice[1:] {\n\t\tresult += sep + fmt.Sprintf(\"%d\", value)\n\t}\n\treturn result\n}\n\nfunc main() {\n\tvar line, cmd string\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\t// v := NewVector(0)\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline = scanner.Text()\n\t\tfmt.Println(line)\n\t\tparts := strings.Fields(line)\n\t\tif len(parts) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcmd = parts[0]\n\n\t\tswitch cmd {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"init\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\t\t// v = NewVector(value)\n\t\tcase \"push\":\n\t\t\t// for _, part := range parts[1:] {\n\t\t\t// \tvalue, _ := strconv.Atoi(part)\n\t\t\t// \tv.PushBack(value)\n\t\t\t// }\n\t\tcase \"show\":\n\t\t\t// fmt.Println(v)\n\t\tcase \"status\":\n\t\t\t// fmt.Println(v.Status())\n\t\tcase \"pop\":\n\t\t\t// err := v.PopBack()\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// }\n\t\tcase \"insert\":\n\t\t\t// index, _ := strconv.Atoi(parts[1])\n\t\t\t// value, _ := strconv.Atoi(parts[2])\n\t\t\t// err := v.Insert(index, value)\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// }\n\t\tcase \"erase\":\n\t\t\t// index, _ := strconv.Atoi(parts[1])\n\t\t\t// err := v.Erase(index)\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// }\n\t\tcase \"indexOf\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\t\t// index := v.IndexOf(value)\n\t\t\t// fmt.Println(index)\n\t\tcase \"contains\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\t\t// if v.Contains(value) {\n\t\t\t// \tfmt.Println(\"true\")\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"false\")\n\t\t\t// }\n\t\tcase \"clear\":\n\t\t\t// v.Clear()\n\t\tcase \"capacity\":\n\t\t\t// fmt.Println(v.Capacity())\n\t\tcase \"get\":\n\t\t\t// index, _ := strconv.Atoi(parts[1])\n\t\t\t// value, err := v.At(index)\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(value)\n\t\t\t// }\n\t\tcase \"set\":\n\t\t\t// index, _ := strconv.Atoi(parts[1])\n\t\t\t// value, _ := strconv.Atoi(parts[2])\n\t\t\t// err := v.Set(index, value)\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// }\n\t\t\t// \n\t\tcase \"reserve\":\n\t\t\t// newCapacity, _ := strconv.Atoi(parts[1])\n\t\t\t// v.Reserve(newCapacity)\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "encoding": 0
            }
        ],
        "py": [
            {
                "name": "extra.md",
                "contents": "# Python\n\n```ts\nclass Vector {\n  - __data: list[int]                          ' Armazena os elementos da estrutura\n  - __size: int                                ' N\u00famero de elementos atualmente armazenados\n  - __capacity: int                            ' Capacidade total do vetor antes de realocar\n  --\n  + __init__(capacity: int): None              ' Inicializa o vetor com capacidade inicial\n  + push_back(value: int): None                ' Adiciona um valor ao final da lista\n  + pop_back(): None                           ' Remove o \u00faltimo elemento\n  + insert(index: int, value: int): None       ' Insere um valor em uma posi\u00e7\u00e3o espec\u00edfica\n  + erase(index: int): None                    ' Remove o elemento da posi\u00e7\u00e3o indicada\n  + index_of(value: int): int                  ' Retorna o \u00edndice do valor ou -1\n  + contains(value: int): bool                 ' Verifica se um valor est\u00e1 presente\n  + reserve(new_capacity: int): None           ' Aumenta a capacidade do vetor\n  + size(): int                                ' Retorna o tamanho atual do vetor\n  + capacity(): int                            ' Retorna a capacidade atual do vetor\n  + status(): str                              ' Retorna uma string com tamanho e capacidade\n  + __str__(): str                             ' Representa\u00e7\u00e3o em string dos elementos\n  + get(index: int): int                       ' Acesso direto ao \u00edndice (sem verifica\u00e7\u00e3o)\n  + at(index: int): int                        ' Acesso ao \u00edndice com verifica\u00e7\u00e3o de limites\n  + set(index: int, value: int): None          ' Altera o valor no \u00edndice especificado\n  + clear(): None                              ' Remove todos os elementos do vetor\n}\n\n```\n",
                "encoding": 0
            },
            {
                "name": "main.py",
                "contents": "def main() -> None:\n    # v: Vector = Vector(0)\n\n    while True:\n        print(\"$\", end=\"\")\n        line: str = input()\n        args: list[str] = line.split()\n        print(line)\n        cmd: str = args[0]\n        try:\n            if cmd == \"end\":\n                return\n            elif cmd == \"init\":\n                # v = Vector(int(args[1]))\n                pass\n            elif cmd == \"push\":\n                # for value in args[1:]:\n                    # v.push_back(int(value))\n                pass\n            elif cmd == \"show\":\n                # print(v)\n                pass\n            elif cmd == \"status\":\n                # print(v.status())\n                pass\n            elif cmd == \"pop\":\n                # v.pop_back()\n                pass\n            elif cmd == \"insert\":\n                # v.insert(int(args[1]), int(args[2]))\n                pass\n            elif cmd == \"erase\":\n                # v.erase(int(args[1]))\n                pass\n            elif cmd == \"indexOf\":\n                # print(v.index_of(int(args[1])))\n                pass\n            elif cmd == \"contains\":\n                # print(\"true\" if v.contains(int(args[1])) else \"false\")\n                pass\n            elif cmd == \"clear\":\n                # v.clear()\n                pass\n            elif cmd == \"capacity\":\n                # print(v.capacity())\n                pass\n            elif cmd == \"get\":\n                # print(v.at(int(args[1])))\n                pass\n            elif cmd == \"set\":\n                # v.set(int(args[1]), int(args[2]))\n                pass\n            elif cmd == \"reserve\":\n                # v.reserve(int(args[1]))\n                pass\n            else:\n                print(\"fail: comando invalido\")\n        except Exception as e:\n            print(e)\n\n\nif __name__ == \"__main__\":\n    main()\n",
                "encoding": 0
            }
        ]
    }
}
