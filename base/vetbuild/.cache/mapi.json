{
    "title": "@vetbuild: Lista Sequencial Din\u00e2mica",
    "description": "# Lista Sequencial Din\u00e2mica\n\n- O vetor din\u00e2mico \u00e9 uma lista sequencial que pode crescer ou diminuir de tamanho conforme necess\u00e1rio.\n- Ele \u00e9 implementado com diferentes nomes dependendo da linguagem.\n  - c n\u00e3o possui vetor din\u00e2mico, mas pode ser implementado com ponteiros.\n  - c++ usa `Vector`\n  - go usa `slice`\n  - python usa `list`\n  - rust usa `Vec`\n  - java usa `ArrayList`\n  - javascript e typescript usam `Array`\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/vetbuild/cover.jpg)\n\nImplemente a classe do vetor din\u00e2mico.\n\n- Cada linguagem vai ter um arquivo `extra.md` com orienta\u00e7\u00f5es sobre a implementa\u00e7\u00e3o.\n- Voc\u00ea deve criar a classe e implementar os m\u00e9todos conforme as orienta\u00e7\u00f5es.\n- Depois de implementar um m\u00e9todo, descomente e ajuste a entrada do m\u00e9todo na fun\u00e7\u00e3o main.\n- Implemente apenas os m\u00e9todos necess\u00e1rios para passar no primeiro teste.\n- Depois de passar no primeiro teste, implemente os m\u00e9todos necess\u00e1rios para passar no segundo teste.\n- Continue assim at\u00e9 passar em todos os testes.\n\n- Os seguintes testes mostram o comportamento esperado da classe para cada invoca\u00e7\u00e3o de m\u00e9todo.\n- Cada linha que come\u00e7a com `$` equivale a uma chamada de m\u00e9todo.\n- Cada #TEST_CASE separa um caso de teste diferente.\n\n## Drafts\n\n<!-- links .cache/draft -->\n- c\n  - [main.c](https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/c/main.c)\n- cpp\n  - [extra.md](https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/cpp/extra.md)\n  - [main.cpp](https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/cpp/main.cpp)\n- go\n  - [extra.md](https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/go/extra.md)\n  - [main.go](https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/go/main.go)\n- java\n  - [Shell.java](https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/java/Shell.java)\n  - [extra.md](https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/java/extra.md)\n- py\n  - [extra.md](https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/py/extra.md)\n  - [main.py](https://github.com/qxcodeed/arcade/blob/master/base/vetbuild/.cache/draft/py/main.py)\n<!-- links -->\n\n## Testes\n\n```bash\n#TEST_CASE create\n$init 3\n$status\nsize:0 capacity:3\n$show\n[]\n$end\n```\n\n```bash\n#TEST_CASE push\n$init 1\n$status\nsize:0 capacity:1\n$show\n[]\n$push 3\n$show\n[3]\n$status\nsize:1 capacity:1\n$push 4\n$show\n[3, 4]\n$status\nsize:2 capacity:2\n$push 5\n$show\n[3, 4, 5]\n$status\nsize:3 capacity:4\n$push 1\n$show\n[3, 4, 5, 1]\n$status\nsize:4 capacity:4\n$push 2\n$show\n[3, 4, 5, 1, 2]\n$status\nsize:5 capacity:8\n$end\n```\n\n```bash\n#TEST_CASE get e set\n$init 10\n$push 10 2 8 12 8 6\n$show\n[10, 2, 8, 12, 8, 6]\n$get 2\n8\n$set 2 20\n$show\n[10, 2, 20, 12, 8, 6]\n$get 10\nindex out of range\n$set 10 20\nindex out of range\n$show\n[10, 2, 20, 12, 8, 6]\n$end\n```\n\n```bash\n#TEST_CASE clear\n$init 6\n$push 1 2 3 4 5 6\n$clear\n$show\n[]\n$status\nsize:0 capacity:6\n$end\n```\n\n```bash\n#TEST_CASE reserve\n$init 6\n$push 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$reserve 10\n$show\n[1, 2, 3, 4, 5, 6]\n$status\nsize:6 capacity:10\n$end\n```\n\n```bash\n#TEST_CASE pop\n$init 5\n$push 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$pop\n$show\n[1, 2, 3, 4]\n$pop\n$pop\n$pop\n$show\n[1]\n$status\nsize:1 capacity:5\n$pop\n$show\n[]\n$pop\nvector is empty\n$status\nsize:0 capacity:5\n$end\n```\n\n```bash\n#TEST_CASE insert\n$init 6\n$push 1 2 3 4 5\n$insert 2 10\n$show\n[1, 2, 10, 3, 4, 5]\n$status\nsize:6 capacity:6\n$insert 0 20\n$show\n[20, 1, 2, 10, 3, 4, 5]\n$status\nsize:7 capacity:12\n$end\n```\n\n```bash\n#TEST_CASE insert_resize\n$init 6\n$push 1 2 3 4 5 6\n$insert 2 10\n$show\n[1, 2, 10, 3, 4, 5, 6]\n$status\nsize:7 capacity:12\n$end\n```\n\n```bash\n#TEST_CASE erase\n$init 6\n$push 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$erase 2\n$show\n[1, 2, 4, 5, 6]\n$status\nsize:5 capacity:6\n$erase 0\n$show\n[2, 4, 5, 6]\n$status\nsize:4 capacity:6\n$erase 8\nindex out of range\n$status\nsize:4 capacity:6\n$show\n[2, 4, 5, 6]\n$end\n```\n\n```bash\n#TEST_CASE indexOf e contains\n$init 10\n$push 10 2 8 12 8 6\n$indexOf 12\n3\n$indexOf 8\n2\n$indexOf 7\n-1\n$contains 12\ntrue\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT create\ninit 3\nstatus\nshow\nend\n======== EXPECT\n$init 3\n$status\nsize:0 capacity:3\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT push\ninit 1\nstatus\nshow\npush 3\nshow\nstatus\npush 4\nshow\nstatus\npush 5\nshow\nstatus\npush 1\nshow\nstatus\npush 2\nshow\nstatus\nend\n======== EXPECT\n$init 1\n$status\nsize:0 capacity:1\n$show\n[]\n$push 3\n$show\n[3]\n$status\nsize:1 capacity:1\n$push 4\n$show\n[3, 4]\n$status\nsize:2 capacity:2\n$push 5\n$show\n[3, 4, 5]\n$status\nsize:3 capacity:4\n$push 1\n$show\n[3, 4, 5, 1]\n$status\nsize:4 capacity:4\n$push 2\n$show\n[3, 4, 5, 1, 2]\n$status\nsize:5 capacity:8\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT get e set\ninit 10\npush 10 2 8 12 8 6\nshow\nget 2\nset 2 20\nshow\nget 10\nset 10 20\nshow\nend\n======== EXPECT\n$init 10\n$push 10 2 8 12 8 6\n$show\n[10, 2, 8, 12, 8, 6]\n$get 2\n8\n$set 2 20\n$show\n[10, 2, 20, 12, 8, 6]\n$get 10\nindex out of range\n$set 10 20\nindex out of range\n$show\n[10, 2, 20, 12, 8, 6]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT clear\ninit 6\npush 1 2 3 4 5 6\nclear\nshow\nstatus\nend\n======== EXPECT\n$init 6\n$push 1 2 3 4 5 6\n$clear\n$show\n[]\n$status\nsize:0 capacity:6\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reserve\ninit 6\npush 1 2 3 4 5 6\nshow\nreserve 10\nshow\nstatus\nend\n======== EXPECT\n$init 6\n$push 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$reserve 10\n$show\n[1, 2, 3, 4, 5, 6]\n$status\nsize:6 capacity:10\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT pop\ninit 5\npush 1 2 3 4 5\nshow\npop\nshow\npop\npop\npop\nshow\nstatus\npop\nshow\npop\nstatus\nend\n======== EXPECT\n$init 5\n$push 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$pop\n$show\n[1, 2, 3, 4]\n$pop\n$pop\n$pop\n$show\n[1]\n$status\nsize:1 capacity:5\n$pop\n$show\n[]\n$pop\nvector is empty\n$status\nsize:0 capacity:5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT insert\ninit 6\npush 1 2 3 4 5\ninsert 2 10\nshow\nstatus\ninsert 0 20\nshow\nstatus\nend\n======== EXPECT\n$init 6\n$push 1 2 3 4 5\n$insert 2 10\n$show\n[1, 2, 10, 3, 4, 5]\n$status\nsize:6 capacity:6\n$insert 0 20\n$show\n[20, 1, 2, 10, 3, 4, 5]\n$status\nsize:7 capacity:12\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT insert_resize\ninit 6\npush 1 2 3 4 5 6\ninsert 2 10\nshow\nstatus\nend\n======== EXPECT\n$init 6\n$push 1 2 3 4 5 6\n$insert 2 10\n$show\n[1, 2, 10, 3, 4, 5, 6]\n$status\nsize:7 capacity:12\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT erase\ninit 6\npush 1 2 3 4 5 6\nshow\nerase 2\nshow\nstatus\nerase 0\nshow\nstatus\nerase 8\nstatus\nshow\nend\n======== EXPECT\n$init 6\n$push 1 2 3 4 5 6\n$show\n[1, 2, 3, 4, 5, 6]\n$erase 2\n$show\n[1, 2, 4, 5, 6]\n$status\nsize:5 capacity:6\n$erase 0\n$show\n[2, 4, 5, 6]\n$status\nsize:4 capacity:6\n$erase 8\nindex out of range\n$status\nsize:4 capacity:6\n$show\n[2, 4, 5, 6]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT indexOf e contains\ninit 10\npush 10 2 8 12 8 6\nindexOf 12\nindexOf 8\nindexOf 7\ncontains 12\nend\n======== EXPECT\n$init 10\n$push 10 2 8 12 8 6\n$indexOf 12\n3\n$indexOf 8\n2\n$indexOf 7\n-1\n$contains 12\ntrue\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\nimport java.util.Arrays;\n\npublic class Shell {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        // MyArrayList v = new MyArrayList(0);\n\n        while (true) {\n            System.out.print(\"$\");\n            if (!scanner.hasNextLine())\n                break;\n            String line = scanner.nextLine();\n            System.out.println(line);\n            String[] parts = line.trim().split(\"\\\\s+\");\n            if (parts.length == 0)\n                continue;\n            String cmd = parts[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            } else if (cmd.equals(\"init\")) {\n                // int cap = Integer.parseInt(parts[1]);\n                // v = new MyArrayList(cap);\n            } else if (cmd.equals(\"show\")) {\n                // System.out.println(v);\n            } else if (cmd.equals(\"status\")) {\n                // System.out.println(v.getStatus());\n            } else if (cmd.equals(\"pop\")) {\n                // v.removeLast();\n            } else if (cmd.equals(\"reserve\")) {\n                // int ncap = Integer.parseInt(parts[1]);\n                // v.ensureCapacity(ncap);\n            } else if (cmd.equals(\"push\")) {\n                // for (int i = 1; i < parts.length; i++) {\n                //     int val = Integer.parseInt(parts[i]);\n                //     v.add(val);\n                // }\n            } else if (cmd.equals(\"insert\")) {\n                // int idx = Integer.parseInt(parts[1]);\n                // int val = Integer.parseInt(parts[2]);\n                // v.add(idx, val);\n            } else if (cmd.equals(\"erase\")) {\n                // int id = Integer.parseInt(parts[1]);\n                // v.remove(id);\n            } else if (cmd.equals(\"indexOf\")) {\n                // int value = Integer.parseInt(parts[1]);\n                // System.out.println(v.indexOf(value));\n            } else if (cmd.equals(\"contains\")) {\n                // int cval = Integer.parseInt(parts[1]);\n                // System.out.println(v.contains(cval));\n            } else if (cmd.equals(\"clear\")) {\n                // v.clear();\n            } else if (cmd.equals(\"capacity\")) {\n                // System.out.println(v.getCapacity());\n            } else if (cmd.equals(\"get\")) {\n                // int gidx = Integer.parseInt(parts[1]);\n                // Integer gval = v.getAt(gidx);\n                // if (gval != null)\n                //     System.out.println(gval);\n            } else if (cmd.equals(\"set\")) {\n                // int sidx = Integer.parseInt(parts[1]);\n                // int sval = Integer.parseInt(parts[2]);\n                // v.set(sidx, sval);\n            } else {\n                System.out.println(\"comando invalido\");\n            }\n        }\n        scanner.close();\n    }\n}\n",
                "type": "show"
            },
            {
                "name": "extra.md",
                "contents": "# Java\n\n```ts\nclass MyArrayList {\n  - elementData: int[]                      // Guarda os elementos da lista\n  - size: int                               // N\u00famero atual de elementos na lista\n  - capacity: int                           // Capacidade atual do array interno\n  --\n  + MyArrayList(initialCapacity: int)       // Cria uma nova lista com a capacidade inicial especificada\n  + ensureCapacity(minCapacity: int): void  // Garante que a capacidade seja pelo menos o valor especificado\n  + add(value: int): void                   // Adiciona um valor ao final da lista, redimensionando se necess\u00e1rio\n  + size(): int                             // Retorna o n\u00famero atual de elementos na lista\n  --\n  + removeLast(): boolean                   // Remove e retorna o \u00faltimo elemento da lista.\n  + getCapacity(): int                      // Retorna a capacidade atual da lista\n  + getStatus(): String                     // Retorna uma string com o tamanho e a capacidade\n  + toString(): String                      // Retorna uma representa\u00e7\u00e3o em string dos elementos\n  --\n  + get(index: int): int                    // Retorna o elemento no \u00edndice especificado sem verifica\u00e7\u00e3o\n  + getAt(index: int): Integer              // Retorna o elemento com verifica\u00e7\u00e3o de limites ou null caso n\u00e3o exista\n  + set(index: int, value: int): boolean    // Define o valor no \u00edndice especificado\n                                            // Define o valor no \u00edndice especificado\n  + clear(): void                           // Remove todos os elementos da lista\n  --\n  + add(index: int, value: int): boolean    // Insere valor no \u00edndice especificado, deslocando os elementos\n  + remove(index: int): boolean             // Remove o elemento no \u00edndice especificado, deslocando os elementos\n  --\n  + indexOf(value: int): int                // Retorna o \u00edndice da primeira ocorr\u00eancia do valor, ou -1\n  + contains(value: int): boolean           // Retorna se o valor est\u00e1 presente na lista\n}\n```\n",
                "type": "show"
            }
        ],
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nint main() {\n    std::string line, cmd;\n    \n    // // V \u00e9 criado como ponteiro para n\u00e3o ter problemas com c\u00f3pias\n    // Vector* v = new Vector(0);\n\n    while (true) {\n        std::cout << \"$\";\n        if (!std::getline(std::cin, line)) break;\n\n        std::cout << line << \"\\n\";\n        std::istringstream iss(line);\n        std::vector<std::string> parts;\n        std::string word;\n        while (iss >> word) parts.push_back(word);\n        if (parts.empty()) continue;\n        cmd = parts[0];\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"init\") {\n            // int cap = std::stoi(parts[1]);\n            // delete v;\n            // v = new Vector(cap);\n        } else if (cmd == \"push\") {\n            // for (size_t i = 1; i < parts.size(); i++)\n            //     v->push_back(std::stoi(parts[i]));\n        } else if (cmd == \"show\") {\n            // std::cout << v->str() << \"\\n\";\n        } else if (cmd == \"status\") {\n            // std::cout << v->status() << \"\\n\";\n        } else if (cmd == \"pop\") {\n            // if (!v->pop_back())\n            //     std::cout << \"vector is empty\\n\";\n        } else if (cmd == \"insert\") {\n            // int index = std::stoi(parts[1]);\n            // int value = std::stoi(parts[2]);\n            // if (!v->insert(index, value))\n            //     std::cout << \"index out of range\\n\";\n        } else if (cmd == \"erase\") {\n            // int index = std::stoi(parts[1]);\n            // if (!v->erase(index))\n            //     std::cout << \"index out of range\\n\";\n        } else if (cmd == \"indexOf\") {\n            // int value = std::stoi(parts[1]);\n            // std::cout << v->index_of(value) << \"\\n\";\n        } else if (cmd == \"contains\") {\n            // int value = std::stoi(parts[1]);\n            // std::cout << (v->contains(value) ? \"true\" : \"false\") << \"\\n\";\n        } else if (cmd == \"clear\") {\n            // v->clear();\n        } else if (cmd == \"capacity\") {\n            // std::cout << v->get_capaticy() << \"\\n\";\n        } else if (cmd == \"get\") {\n            // int index = std::stoi(parts[1]);\n            // auto [val, ok] = v->at(index);\n            // if (ok)\n            //     std::cout << val << \"\\n\";\n            // else\n            //     std::cout << \"index out of range\\n\";\n            // \n        } else if (cmd == \"set\") {\n            // int index = std::stoi(parts[1]);\n            // int value = std::stoi(parts[2]);\n            // if (!v->set(index, value))\n            //     std::cout << \"index out of range\\n\";\n        } else if (cmd == \"reserve\") {\n            // int newCap = std::stoi(parts[1]);\n            // v->reserve(newCap);\n        } else {\n            std::cout << \"comando invalido\\n\";\n        }\n    }\n    // delete v;\n    return 0;\n}\n",
                "type": "show"
            },
            {
                "name": "extra.md",
                "contents": "# Vetor\n\n```ts\nclass Vector {\n    - data: int*                              ' Guarda os elementos do vetor\n    - size: int                               ' Guarda o n\u00famero atual de elementos\n    - capacity: int                           ' Guarda a capacidade atual do vetor\n    __\n    + Vector(capacity: int)                   ' Cria um novo vetor com a capacidade inicial especificada\n    + reserve(newCapacity: int): void         ' Redimensiona a capacidade do vetor para pelo menos o valor especificado\n    + pushBack(value: int): void              ' Adiciona um valor ao final do vetor, redimensionando se necess\u00e1rio\n    + getSize(): int                          ' Retorna o n\u00famero atual de elementos no vetor\n    __\n    + popBack(): bool                         ' Remove o \u00faltimo elemento do vetor. Retorna false se o vetor estiver vazio\n    + getCapacity(): int                      ' Retorna a capacidade atual do vetor\n    + status(): string                        ' Retorna o tamanho e a capacidade do vetor\n    + str(): string                           ' Retorna uma representa\u00e7\u00e3o em string dos elementos do vetor\n    __\n    + get(index: int): int                    ' Retorna o elemento no \u00edndice especificado sem verifica\u00e7\u00e3o de limites\n    + at(index: int): pair<int, bool>         ' Retorna o elemento no \u00edndice especificado com verifica\u00e7\u00e3o de limites.\n                                              ' Retorna false se o \u00edndice estiver fora dos limites\n    + set(index: int, value: int): bool       ' Define o valor no \u00edndice especificado.\n                                              ' Retorna false se o \u00edndice estiver fora dos limites\n    + clear(): void                           ' Limpa todos os elementos do vetor\n    __\n    + insert(index: int, value: int): bool    ' Insere um valor no \u00edndice especificado, deslocando os elementos conforme necess\u00e1rio.\n                                              ' Retorna false se o \u00edndice estiver fora dos limites\n    + erase(index: int): bool                 ' Remove o elemento no \u00edndice especificado, deslocando os elementos conforme necess\u00e1rio.\n                                              ' Retorna false se o \u00edndice estiver fora dos limites\n    + indexOf(value: int): int                ' Retorna o \u00edndice da primeira ocorr\u00eancia do valor especificado, ou -1 se n\u00e3o for encontrado\n    + contains(value: int): bool              ' Verifica se o valor especificado existe no vetor\n}\n```\n",
                "type": "show"
            }
        ],
        "c": [
            {
                "name": "main.c",
                "contents": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\ntypedef struct {\n    int* data;\n    int size;\n    int capacity;\n} Vector;\n\n\nVector* vector_create(int capacity) {\n    (void) capacity;\n    return NULL;\n}\n\n\nvoid vector_destroy(Vector* v) {\n    (void) v;\n}\n\n\nvoid vector_reserve(Vector* v, int newCapacity) {\n    (void) v;\n    (void) newCapacity;\n}\n\n\nvoid vector_push_back(Vector* v, int value) {\n    (void) v;\n    (void) value;\n}\n\n\nbool vector_pop_back(Vector* v) {\n    (void) v;\n    return false;\n}\n\n\nbool vector_insert(Vector* v, int index, int value) {\n    (void) v;\n    (void) index;\n    (void) value;\n    return false;\n}\n\n\nbool vector_erase(Vector* v, int index) {\n    (void) v;\n    (void) index;\n    return false;\n}\n\n\nint vector_index_of(Vector* v, int value) {\n    (void) v;\n    (void) value;\n    return 0;\n}\n\n\nbool vector_contains(Vector* v, int value) {\n    (void) v;\n    (void) value;\n    return false;\n}\n\n\nint vector_get_size(Vector* v) {\n    (void) v;\n    return 0;\n}\n\n\nint vector_get_capacity(Vector* v) {\n    (void) v;\n    return 0;\n}\n\n\nvoid vector_status(Vector* v) {\n    (void) v;\n}\n\n\nvoid vector_str(Vector* v) {\n    (void) v;\n}\n\n\nbool vector_at(Vector* v, int index, int* out_value) {\n    (void) v;\n    (void) index;\n    (void) out_value;\n    return false;\n}\n\n\nbool vector_set(Vector* v, int index, int value) {\n    (void) v;\n    (void) value;\n    return false;\n}\n\n\nvoid vector_clear(Vector* v) {\n    (void) v;\n}\n\nint main() {\n    char line[100];\n    Vector* v = vector_create(0);\n\n    while (true) {\n        printf(\"$\");\n        if (!fgets(line, sizeof(line), stdin)) break;\n        line[strcspn(line, \"\\n\")] = 0;\n        printf(\"%s\\n\", line);\n\n        char* cmd = strtok(line, \" \");\n        if (!cmd) continue;\n\n        if (strcmp(cmd, \"end\") == 0) {\n            break;\n        } else if (strcmp(cmd, \"init\") == 0) {\n            int cap = atoi(strtok(NULL, \" \"));\n            vector_destroy(v);\n            v = vector_create(cap);\n        } else if (strcmp(cmd, \"push\") == 0) {\n            char* arg;\n            while ((arg = strtok(NULL, \" \")))\n                vector_push_back(v, atoi(arg));\n        } else if (strcmp(cmd, \"show\") == 0) {\n            vector_str(v);\n        } else if (strcmp(cmd, \"status\") == 0) {\n            vector_status(v);\n        } else if (strcmp(cmd, \"pop\") == 0) {\n            if (!vector_pop_back(v))\n                printf(\"vector is empty\\n\");\n        } else if (strcmp(cmd, \"insert\") == 0) {\n            int index = atoi(strtok(NULL, \" \"));\n            int value = atoi(strtok(NULL, \" \"));\n            if (!vector_insert(v, index, value))\n                printf(\"index out of range\\n\");\n        } else if (strcmp(cmd, \"erase\") == 0) {\n            int index = atoi(strtok(NULL, \" \"));\n            if (!vector_erase(v, index))\n                printf(\"index out of range\\n\");\n        } else if (strcmp(cmd, \"indexOf\") == 0) {\n            int value = atoi(strtok(NULL, \" \"));\n            printf(\"%d\\n\", vector_index_of(v, value));\n        } else if (strcmp(cmd, \"contains\") == 0) {\n            int value = atoi(strtok(NULL, \" \"));\n            printf(vector_contains(v, value) ? \"true\\n\" : \"false\\n\");\n        } else if (strcmp(cmd, \"clear\") == 0) {\n            vector_clear(v);\n        } else if (strcmp(cmd, \"capacity\") == 0) {\n            printf(\"%d\\n\", vector_get_capacity(v));\n        } else if (strcmp(cmd, \"get\") == 0) {\n            int index = atoi(strtok(NULL, \" \"));\n            int value;\n            if (vector_at(v, index, &value))\n                printf(\"%d\\n\", value);\n            else\n                printf(\"index out of range\\n\");\n        } else if (strcmp(cmd, \"set\") == 0) {\n            int index = atoi(strtok(NULL, \" \"));\n            int value = atoi(strtok(NULL, \" \"));\n            if (!vector_set(v, index, value))\n                printf(\"index out of range\\n\");\n        } else if (strcmp(cmd, \"reserve\") == 0) {\n            int newCap = atoi(strtok(NULL, \" \"));\n            vector_reserve(v, newCap);\n        } else {\n            printf(\"comando invalido\\n\");\n        }\n    }\n\n    vector_destroy(v);\n    return 0;\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "extra.md",
                "contents": "# Vector\n\n```ts\nclass Vector {\n  - data: []int                             ' Guarda os elementos do vetor\n  - size: int                               ' Guarda o n\u00famero atual de elementos\n  - capacity: int                           ' Guarda a capacidade atual do vetor\n  --\n  + NewVector(capacity: int): *Vector       ' Cria um novo vetor com a capacidade inicial especificada\n  + Reserve(newCapacity: int): void         ' Redimensiona a capacidade do vetor para pelo menos o valor especificado\n  + PushBack(value: int): void              ' Adiciona um valor ao final do vetor, redimensionando se necess\u00e1rio\n  + Size(): int                             ' Retorna o n\u00famero atual de elementos no vetor\n  --\n  + PopBack(): (int, error)                 ' Remove e retorna o \u00faltimo elemento do vetor. Retorna um erro se o vetor estiver vazio\n  + Capacity(): int                         ' Retorna a capacidade atual do vetor\n  + Status(): string                        ' Retorna o tamanho e a capacidade do vetor\n  + String(): string                        ' Retorna uma representa\u00e7\u00e3o em string dos elementos do vetor\n  --\n  + Get(index: int): int                    ' Retorna o elemento no \u00edndice especificado sem verifica\u00e7\u00e3o de limites\n  + At(index: int): (int, error)            ' Retorna o elemento no \u00edndice especificado com verifica\u00e7\u00e3o de limites.\n                                            ' Retorna um erro se o \u00edndice estiver fora dos limites\n  + Set(index: int, value: int): error      ' Define o valor no \u00edndice especificado.\n                                            ' Retorna um erro se o \u00edndice estiver fora dos limites\n  + Clear(): void                           ' Limpa todos os elementos do vetor\n  --\n  + Insert(index: int, value: int): error   ' Insere um valor no \u00edndice especificado, deslocando os elementos conforme necess\u00e1rio.\n                                            ' Retorna um erro se o \u00edndice estiver fora dos limites\n  + Erase(index: int): error                ' Remove o elemento no \u00edndice especificado, deslocando os elementos conforme necess\u00e1rio.\n                                            ' Retorna um erro se o \u00edndice estiver fora dos limites\n  --\n  + IndexOf(value: int): int                ' Retorna o \u00edndice da primeira ocorr\u00eancia do valor especificado, ou -1 se n\u00e3o for encontrado\n  + Contains(value: int): bool              ' Verifica se o valor especificado existe no vetor\n}\n```\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"strings\"\n)\n\n\nfunc Join(slice []int, sep string) string {\n\tif len(slice) == 0 {\n\t\treturn \"\"\n\t}\n\tresult := fmt.Sprintf(\"%d\", slice[0])\n\tfor _, value := range slice[1:] {\n\t\tresult += sep + fmt.Sprintf(\"%d\", value)\n\t}\n\treturn result\n}\n\nfunc main() {\n\tvar line, cmd string\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\t// v := NewVector(0)\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline = scanner.Text()\n\t\tfmt.Println(line)\n\t\tparts := strings.Fields(line)\n\t\tif len(parts) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcmd = parts[0]\n\n\t\tswitch cmd {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"init\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\t\t// v = NewVector(value)\n\t\tcase \"push\":\n\t\t\t// for _, part := range parts[1:] {\n\t\t\t// \tvalue, _ := strconv.Atoi(part)\n\t\t\t// \tv.PushBack(value)\n\t\t\t// }\n\t\tcase \"show\":\n\t\t\t// fmt.Println(v)\n\t\tcase \"status\":\n\t\t\t// fmt.Println(v.Status())\n\t\tcase \"pop\":\n\t\t\t// err := v.PopBack()\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// }\n\t\tcase \"insert\":\n\t\t\t// index, _ := strconv.Atoi(parts[1])\n\t\t\t// value, _ := strconv.Atoi(parts[2])\n\t\t\t// err := v.Insert(index, value)\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// }\n\t\tcase \"erase\":\n\t\t\t// index, _ := strconv.Atoi(parts[1])\n\t\t\t// err := v.Erase(index)\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// }\n\t\tcase \"indexOf\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\t\t// index := v.IndexOf(value)\n\t\t\t// fmt.Println(index)\n\t\tcase \"contains\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\t\t// if v.Contains(value) {\n\t\t\t// \tfmt.Println(\"true\")\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"false\")\n\t\t\t// }\n\t\tcase \"clear\":\n\t\t\t// v.Clear()\n\t\tcase \"capacity\":\n\t\t\t// fmt.Println(v.Capacity())\n\t\tcase \"get\":\n\t\t\t// index, _ := strconv.Atoi(parts[1])\n\t\t\t// value, err := v.At(index)\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(value)\n\t\t\t// }\n\t\tcase \"set\":\n\t\t\t// index, _ := strconv.Atoi(parts[1])\n\t\t\t// value, _ := strconv.Atoi(parts[2])\n\t\t\t// err := v.Set(index, value)\n\t\t\t// if err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// }\n\t\t\t// \n\t\tcase \"reserve\":\n\t\t\t// newCapacity, _ := strconv.Atoi(parts[1])\n\t\t\t// v.Reserve(newCapacity)\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ],
        "py": [
            {
                "name": "extra.md",
                "contents": "# Python\n\n```ts\nclass Vector {\n  - __data: list[int]                          ' Armazena os elementos da estrutura\n  - __size: int                                ' N\u00famero de elementos atualmente armazenados\n  - __capacity: int                            ' Capacidade total do vetor antes de realocar\n  --\n  + __init__(capacity: int): None              ' Inicializa o vetor com capacidade inicial\n  + push_back(value: int): None                ' Adiciona um valor ao final da lista\n  + pop_back(): None                           ' Remove o \u00faltimo elemento\n  + insert(index: int, value: int): None       ' Insere um valor em uma posi\u00e7\u00e3o espec\u00edfica\n  + erase(index: int): None                    ' Remove o elemento da posi\u00e7\u00e3o indicada\n  + index_of(value: int): int                  ' Retorna o \u00edndice do valor ou -1\n  + contains(value: int): bool                 ' Verifica se um valor est\u00e1 presente\n  + reserve(new_capacity: int): None           ' Aumenta a capacidade do vetor\n  + size(): int                                ' Retorna o tamanho atual do vetor\n  + capacity(): int                            ' Retorna a capacidade atual do vetor\n  + status(): str                              ' Retorna uma string com tamanho e capacidade\n  + __str__(): str                             ' Representa\u00e7\u00e3o em string dos elementos\n  + get(index: int): int                       ' Acesso direto ao \u00edndice (sem verifica\u00e7\u00e3o)\n  + at(index: int): int                        ' Acesso ao \u00edndice com verifica\u00e7\u00e3o de limites\n  + set(index: int, value: int): None          ' Altera o valor no \u00edndice especificado\n  + clear(): None                              ' Remove todos os elementos do vetor\n}\n\n```\n",
                "type": "show"
            },
            {
                "name": "main.py",
                "contents": "def main() -> None:\n    # v: Vector = Vector(0)\n\n    while True:\n        print(\"$\", end=\"\")\n        line: str = input()\n        args: list[str] = line.split()\n        print(line)\n        cmd: str = args[0]\n        try:\n            if cmd == \"end\":\n                return\n            elif cmd == \"init\":\n                # v = Vector(int(args[1]))\n                pass\n            elif cmd == \"push\":\n                # for value in args[1:]:\n                    # v.push_back(int(value))\n                pass\n            elif cmd == \"show\":\n                # print(v)\n                pass\n            elif cmd == \"status\":\n                # print(v.status())\n                pass\n            elif cmd == \"pop\":\n                # v.pop_back()\n                pass\n            elif cmd == \"insert\":\n                # v.insert(int(args[1]), int(args[2]))\n                pass\n            elif cmd == \"erase\":\n                # v.erase(int(args[1]))\n                pass\n            elif cmd == \"indexOf\":\n                # print(v.index_of(int(args[1])))\n                pass\n            elif cmd == \"contains\":\n                # print(\"true\" if v.contains(int(args[1])) else \"false\")\n                pass\n            elif cmd == \"clear\":\n                # v.clear()\n                pass\n            elif cmd == \"capacity\":\n                # print(v.capacity())\n                pass\n            elif cmd == \"get\":\n                # print(v.at(int(args[1])))\n                pass\n            elif cmd == \"set\":\n                # v.set(int(args[1]), int(args[2]))\n                pass\n            elif cmd == \"reserve\":\n                # v.reserve(int(args[1]))\n                pass\n            else:\n                print(\"fail: comando invalido\")\n        except Exception as e:\n            print(e)\n\n\nif __name__ == \"__main__\":\n    main()\n",
                "type": "show"
            }
        ]
    }
}
