{
    "title": "@multiset: MultiSet usando vetor din\u00e2mico",
    "description": "# MultiSet usando vetor din\u00e2mico\n\n- Um MultiSet \u00e9 um conjunto que permite a repeti\u00e7\u00e3o de elementos.\n  - Ele normalmente \u00e9 implementado com uma tabela hash ou \u00e1rvores.\n  - Mas vamos implementar um MultiSet usando uma lista sequencial ordenada.\n  - Um multiset \u00e9 equivalente a um mapa\\[chave, valor\\] onde a chave \u00e9 o elemento e o valor \u00e9 a contagem de ocorr\u00eancias do elemento.\n- Inser\u00e7\u00e3o - O(n)\n  - A lista sequencial ordenada \u00e9 uma lista que mant\u00e9m os elementos em ordem crescente e permite repeti\u00e7\u00e3o de valores.\n  - Vamos ter um vetor din\u00e2mico que vai armazenar os elementos.\n  - O vetor din\u00e2mico vai ser redimensionado quando necess\u00e1rio.\n  - O vetor din\u00e2mico vai ter um tamanho inicial padr\u00e3o.\n  - Vamos ter um custo de O(n) para inser\u00e7\u00e3o pela necessidade de deslocar os elementos.\n- Busca - O(log n)\n  - Como os dados est\u00e3o em um vetor ordenado, podemos fazer uma busca bin\u00e1ria para encontrar o elemento.\n  - A busca bin\u00e1ria tem um custo de O(log n).\n- Remo\u00e7\u00e3o - O(n)\n  - A remo\u00e7\u00e3o de um elemento tamb\u00e9m tem um custo de O(n) pela necessidade de deslocar os elementos.\n  - Como existe possibilidade de repeti\u00e7\u00e3o, remover um elemento remove apenas uma ocorr\u00eancia do elemento.\n  - Se o elemento n\u00e3o existir, deve retornar uma mensagem de erro.\n- Contagem - O(log n)\n  - Retorna o n\u00famero de ocorr\u00eancias do elemento na lista.\n  - Ap\u00f3s encontrar o elemento com a busca bin\u00e1ria, percorre a lista para contar as ocorr\u00eancias.\n- ContarDiferentes - O(n)\n  - Retorna o n\u00famero de elementos diferentes na lista.\n  - Percorre a lista uma \u00fanica vez e conta os elementos diferentes.\n  - Observe que podemos utilizar o fato de o vetor estar ordenado para contar os elementos diferentes.\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/multiset/cover.png)\n\nImplemente a classe do vetor din\u00e2mico.\n\n- Cada linguagem vai ter um arquivo `extra.md` com orienta\u00e7\u00f5es sobre a implementa\u00e7\u00e3o.\n- Voc\u00ea deve criar a classe e implementar os m\u00e9todos conforme as orienta\u00e7\u00f5es.\n- Depois de implementar um m\u00e9todo, descomente e ajuste a entrada do m\u00e9todo na fun\u00e7\u00e3o main.\n- Implemente apenas os m\u00e9todos necess\u00e1rios para passar no primeiro teste.\n- Depois de passar no primeiro teste, implemente os m\u00e9todos necess\u00e1rios para passar no segundo teste.\n- Continue assim at\u00e9 passar em todos os testes.\n\n- Os seguintes testes mostrar o comportamento esperado da classe para cada invoca\u00e7\u00e3o de m\u00e9todo.\n\n## Testes\n\n```bash\n#__case insert and show with repetitions\n$init 2\n$insert 3 1 2 2 3 4 3\n$show\n[1, 2, 2, 3, 3, 3, 4]\n$end\n```\n\n```bash\n#__case contains true and false\n$init 5\n$insert 5 1 5 3\n$show\n[1, 3, 5, 5]\n$contains 3\ntrue\n$contains 5\ntrue\n$contains 2\nfalse\n$end\n```\n\n```bash\n#__case erase one occurrence at a time\n$init 5\n$insert 2 2 2 3\n$show\n[2, 2, 2, 3]\n$erase 2\n$show\n[2, 2, 3]\n$erase 2\n$show\n[2, 3]\n$erase 2\n$show\n[3]\n$erase 2\nvalue not found\n$end\n```\n\n```bash\n#__case count\n$init 5\n$insert 1 2 2 2 3 3 4\n$count 2\n3\n$count 3\n2\n$count 4\n1\n$count 5\n0\n$end\n```\n\n```bash\n#__case unique\n$init 10\n$insert 5 5 5 1 2 2 3 3 3 3\n$show\n[1, 2, 2, 3, 3, 3, 3, 5, 5, 5]\n$unique\n4\n$insert 4\n$unique\n5\n$end\n```\n\n```bash\n#__case clear\n$init 3\n$insert 1 1 2 3\n$show\n[1, 1, 2, 3]\n$clear\n$show\n[]\n$count 1\n0\n$unique\n0\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT insert and show with repetitions\ninit 2\ninsert 3 1 2 2 3 4 3\nshow\nend\n======== EXPECT\n$init 2\n$insert 3 1 2 2 3 4 3\n$show\n[1, 2, 2, 3, 3, 3, 4]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT contains true and false\ninit 5\ninsert 5 1 5 3\nshow\ncontains 3\ncontains 5\ncontains 2\nend\n======== EXPECT\n$init 5\n$insert 5 1 5 3\n$show\n[1, 3, 5, 5]\n$contains 3\ntrue\n$contains 5\ntrue\n$contains 2\nfalse\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT erase one occurrence at a time\ninit 5\ninsert 2 2 2 3\nshow\nerase 2\nshow\nerase 2\nshow\nerase 2\nshow\nerase 2\nend\n======== EXPECT\n$init 5\n$insert 2 2 2 3\n$show\n[2, 2, 2, 3]\n$erase 2\n$show\n[2, 2, 3]\n$erase 2\n$show\n[2, 3]\n$erase 2\n$show\n[3]\n$erase 2\nvalue not found\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT count\ninit 5\ninsert 1 2 2 2 3 3 4\ncount 2\ncount 3\ncount 4\ncount 5\nend\n======== EXPECT\n$init 5\n$insert 1 2 2 2 3 3 4\n$count 2\n3\n$count 3\n2\n$count 4\n1\n$count 5\n0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT unique\ninit 10\ninsert 5 5 5 1 2 2 3 3 3 3\nshow\nunique\ninsert 4\nunique\nend\n======== EXPECT\n$init 10\n$insert 5 5 5 1 2 2 3 3 3 3\n$show\n[1, 2, 2, 3, 3, 3, 3, 5, 5, 5]\n$unique\n4\n$insert 4\n$unique\n5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT clear\ninit 3\ninsert 1 1 2 3\nshow\nclear\nshow\ncount 1\nunique\nend\n======== EXPECT\n$init 3\n$insert 1 1 2 3\n$show\n[1, 1, 2, 3]\n$clear\n$show\n[]\n$count 1\n0\n$unique\n0\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# Multiset\n\n```ts\nclass MultiSet {\n  - data: []int                             ' Guarda os elementos do multiconjunto (ordenados, com repeti\u00e7\u00f5es)\n  - size: int                               ' N\u00famero atual de elementos no multiconjunto\n  - capacity: int                           ' Capacidade alocada do vetor data\n  --\n  + NewMultiSet(capacity: int): *MultiSet   ' Cria um novo multiconjunto com a capacidade especificada\n  - expand(): void                          ' Aumenta a capacidade do vetor quando necess\u00e1rio (dobrando ou iniciando)\n  --\n  + search(value: int): (bool, int)         ' Se o elemento value estiver presente, retorna true e o \u00edndice da \u00faltima ocorr\u00eancia\n  --                                        ' Se n\u00e3o estiver, retorna false e o \u00edndice onde ele deve ser inserido\n  --\n  + Insert(value: int): void                ' Insere o valor na posi\u00e7\u00e3o correta, mantendo a ordem e permitindo repeti\u00e7\u00f5es\n  - insert(value: int, index: int): error   ' Insere value no \u00edndice indicado, deslocando os elementos \u00e0 direita\n  --\n  + Erase(value: int): error                ' Remove uma ocorr\u00eancia do valor, se existir; retorna erro caso n\u00e3o exista\n  - erase(index: int): error                ' Remove o elemento na posi\u00e7\u00e3o index, deslocando os demais\n  --\n  + Contains(value: int): bool              ' Retorna true se o valor estiver presente no multiconjunto\n  + Count(value: int): int                  ' Retorna o n\u00famero de ocorr\u00eancias do valor no multiconjunto\n  + Unique(): int                           ' Retorna o n\u00famero de valores distintos no multiconjunto\n  + Clear(): void                           ' Remove todos os elementos do multiconjunto\n  + String(): string                        ' Retorna uma representa\u00e7\u00e3o textual dos elementos do multiconjunto\n}\n```\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc Join(slice []int, sep string) string {\n\tif len(slice) == 0 {\n\t\treturn \"\"\n\t}\n\tresult := fmt.Sprintf(\"%d\", slice[0])\n\tfor _, value := range slice[1:] {\n\t\tresult += sep + fmt.Sprintf(\"%d\", value)\n\t}\n\treturn result\n}\n\nfunc main() {\n\tvar line, cmd string\n\tscanner := bufio.NewScanner(os.Stdin)\n\t// ms := NewMultiSet(0)\n\n\tfor scanner.Scan() {\n\t\tfmt.Print(\"$\")\n\t\tline = scanner.Text()\n\t\targs := strings.Fields(line)\n\t\tfmt.Println(line)\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcmd = args[0]\n\n\t\tswitch cmd {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"init\":\n\t\t\t// value, _ := strconv.Atoi(args[1])\n\t\t\t// ms = NewMultiSet(value)\n\t\tcase \"insert\":\n\t\t\t// for _, part := range args[1:] {\n\t\t\t// \tvalue, _ := strconv.Atoi(part)\n\t\t\t// }\n\t\tcase \"show\":\n\t\tcase \"erase\":\n\t\t\t// value, _ := strconv.Atoi(args[1])\n\t\tcase \"contains\":\n\t\t\t// value, _ := strconv.Atoi(args[1])\n\t\tcase \"count\":\n\t\t\t// value, _ := strconv.Atoi(args[1])\n\t\tcase \"unique\":\n\t\tcase \"clear\":\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
