{
    "title": "@multiset: MultiSet usando vetor din\u00e2mico",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@multiset: MultiSet usando vetor din\u00e2mico</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>MultiSet usando vetor din\u00e2mico</h1>\n<ul>\n<li>Um MultiSet \u00e9 um conjunto que permite a repeti\u00e7\u00e3o de elementos.<ul>\n<li>Ele normalmente \u00e9 implementado com uma tabela hash ou \u00e1rvores.</li>\n<li>Mas vamos implementar um MultiSet usando uma lista sequencial ordenada.</li>\n<li>Um multiset \u00e9 equivalente a um mapa[chave, valor] onde a chave \u00e9 o elemento e o valor \u00e9 a contagem de ocorr\u00eancias do elemento.</li>\n</ul>\n</li>\n<li>Inser\u00e7\u00e3o - O(n)<ul>\n<li>A lista sequencial ordenada \u00e9 uma lista que mant\u00e9m os elementos em ordem crescente e permite repeti\u00e7\u00e3o de valores.</li>\n<li>Vamos ter um vetor din\u00e2mico que vai armazenar os elementos.</li>\n<li>O vetor din\u00e2mico vai ser redimensionado quando necess\u00e1rio.</li>\n<li>O vetor din\u00e2mico vai ter um tamanho inicial padr\u00e3o.</li>\n<li>Vamos ter um custo de O(n) para inser\u00e7\u00e3o pela necessidade de deslocar os elementos.</li>\n</ul>\n</li>\n<li>Busca - O(log n)<ul>\n<li>Como os dados est\u00e3o em um vetor ordenado, podemos fazer uma busca bin\u00e1ria para encontrar o elemento.</li>\n<li>A busca bin\u00e1ria tem um custo de O(log n).</li>\n</ul>\n</li>\n<li>Remo\u00e7\u00e3o - O(n)<ul>\n<li>A remo\u00e7\u00e3o de um elemento tamb\u00e9m tem um custo de O(n) pela necessidade de deslocar os elementos.</li>\n<li>Como existe possibilidade de repeti\u00e7\u00e3o, remover um elemento remove apenas uma ocorr\u00eancia do elemento.</li>\n<li>Se o elemento n\u00e3o existir, deve retornar uma mensagem de erro.</li>\n</ul>\n</li>\n<li>Contagem - O(log n)<ul>\n<li>Retorna o n\u00famero de ocorr\u00eancias do elemento na lista.</li>\n<li>Ap\u00f3s encontrar o elemento com a busca bin\u00e1ria, percorre a lista para contar as ocorr\u00eancias.</li>\n</ul>\n</li>\n<li>ContarDiferentes - O(n)<ul>\n<li>Retorna o n\u00famero de elementos diferentes na lista.</li>\n<li>Percorre a lista uma \u00fanica vez e conta os elementos diferentes.</li>\n<li>Observe que podemos utilizar o fato de o vetor estar ordenado para contar os elementos diferentes.</li>\n</ul>\n</li>\n</ul>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/multiset/cover.png\" /></p>\n<p>Implemente a classe do vetor din\u00e2mico.</p>\n<ul>\n<li>Cada linguagem vai ter um arquivo <code>extra.md</code> com orienta\u00e7\u00f5es sobre a implementa\u00e7\u00e3o.</li>\n<li>Voc\u00ea deve criar a classe e implementar os m\u00e9todos conforme as orienta\u00e7\u00f5es.</li>\n<li>Depois de implementar um m\u00e9todo, descomente e ajuste a entrada do m\u00e9todo na fun\u00e7\u00e3o main.</li>\n<li>Implemente apenas os m\u00e9todos necess\u00e1rios para passar no primeiro teste.</li>\n<li>Depois de passar no primeiro teste, implemente os m\u00e9todos necess\u00e1rios para passar no segundo teste.</li>\n<li>\n<p>Continue assim at\u00e9 passar em todos os testes.</p>\n</li>\n<li>\n<p>Os seguintes testes mostrar o comportamento esperado da classe para cada invoca\u00e7\u00e3o de m\u00e9todo.</p>\n</li>\n</ul>\n<h2>Testes</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#__case insert and show with repetitions</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#__case contains true and false</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$contains</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nb\">true</span>\n<span class=\"nv\">$contains</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nb\">true</span>\n<span class=\"nv\">$contains</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nb\">false</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#__case erase one occurrence at a time</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"nv\">$erase</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"nv\">$erase</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"nv\">$erase</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"nv\">$erase</span><span class=\"w\"> </span><span class=\"m\">2</span>\nvalue<span class=\"w\"> </span>not<span class=\"w\"> </span>found\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#__case count</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$count</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"m\">3</span>\n<span class=\"nv\">$count</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"m\">2</span>\n<span class=\"nv\">$count</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"m\">1</span>\n<span class=\"nv\">$count</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"m\">0</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#__case unique</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">10</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$unique</span>\n<span class=\"m\">4</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$unique</span>\n<span class=\"m\">5</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#__case clear</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$insert</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"nv\">$clear</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$count</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"m\">0</span>\n<span class=\"nv\">$unique</span>\n<span class=\"m\">0</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT insert and show with repetitions\ninit 2\ninsert 3 1 2 2 3 4 3\nshow\nend\n======== EXPECT\n$init 2\n$insert 3 1 2 2 3 4 3\n$show\n[1, 2, 2, 3, 3, 3, 4]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT contains true and false\ninit 5\ninsert 5 1 5 3\nshow\ncontains 3\ncontains 5\ncontains 2\nend\n======== EXPECT\n$init 5\n$insert 5 1 5 3\n$show\n[1, 3, 5, 5]\n$contains 3\ntrue\n$contains 5\ntrue\n$contains 2\nfalse\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT erase one occurrence at a time\ninit 5\ninsert 2 2 2 3\nshow\nerase 2\nshow\nerase 2\nshow\nerase 2\nshow\nerase 2\nend\n======== EXPECT\n$init 5\n$insert 2 2 2 3\n$show\n[2, 2, 2, 3]\n$erase 2\n$show\n[2, 2, 3]\n$erase 2\n$show\n[2, 3]\n$erase 2\n$show\n[3]\n$erase 2\nvalue not found\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT count\ninit 5\ninsert 1 2 2 2 3 3 4\ncount 2\ncount 3\ncount 4\ncount 5\nend\n======== EXPECT\n$init 5\n$insert 1 2 2 2 3 3 4\n$count 2\n3\n$count 3\n2\n$count 4\n1\n$count 5\n0\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT unique\ninit 10\ninsert 5 5 5 1 2 2 3 3 3 3\nshow\nunique\ninsert 4\nunique\nend\n======== EXPECT\n$init 10\n$insert 5 5 5 1 2 2 3 3 3 3\n$show\n[1, 2, 2, 3, 3, 3, 3, 5, 5, 5]\n$unique\n4\n$insert 4\n$unique\n5\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT clear\ninit 3\ninsert 1 1 2 3\nshow\nclear\nshow\ncount 1\nunique\nend\n======== EXPECT\n$init 3\n$insert 1 1 2 3\n$show\n[1, 1, 2, 3]\n$clear\n$show\n[]\n$count 1\n0\n$unique\n0\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# Multiset\n\n```ts\nclass MultiSet {\n  - data: []int                             ' Guarda os elementos do multiconjunto (ordenados, com repeti\u00e7\u00f5es)\n  - size: int                               ' N\u00famero atual de elementos no multiconjunto\n  - capacity: int                           ' Capacidade alocada do vetor data\n  --\n  + NewMultiSet(capacity: int): *MultiSet   ' Cria um novo multiconjunto com a capacidade especificada\n  - expand(): void                          ' Aumenta a capacidade do vetor quando necess\u00e1rio (dobrando ou iniciando)\n  --\n  + search(value: int): (bool, int)         ' Se o elemento value estiver presente, retorna true e o \u00edndice da \u00faltima ocorr\u00eancia\n  --                                        ' Se n\u00e3o estiver, retorna false e o \u00edndice onde ele deve ser inserido\n  --\n  + Insert(value: int): void                ' Insere o valor na posi\u00e7\u00e3o correta, mantendo a ordem e permitindo repeti\u00e7\u00f5es\n  - insert(value: int, index: int): error   ' Insere value no \u00edndice indicado, deslocando os elementos \u00e0 direita\n  --\n  + Erase(value: int): error                ' Remove uma ocorr\u00eancia do valor, se existir; retorna erro caso n\u00e3o exista\n  - erase(index: int): error                ' Remove o elemento na posi\u00e7\u00e3o index, deslocando os demais\n  --\n  + Contains(value: int): bool              ' Retorna true se o valor estiver presente no multiconjunto\n  + Count(value: int): int                  ' Retorna o n\u00famero de ocorr\u00eancias do valor no multiconjunto\n  + Unique(): int                           ' Retorna o n\u00famero de valores distintos no multiconjunto\n  + Clear(): void                           ' Remove todos os elementos do multiconjunto\n  + String(): string                        ' Retorna uma representa\u00e7\u00e3o textual dos elementos do multiconjunto\n}\n```\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc Join(slice []int, sep string) string {\n\tif len(slice) == 0 {\n\t\treturn \"\"\n\t}\n\tresult := fmt.Sprintf(\"%d\", slice[0])\n\tfor _, value := range slice[1:] {\n\t\tresult += sep + fmt.Sprintf(\"%d\", value)\n\t}\n\treturn result\n}\n\nfunc main() {\n\tvar line, cmd string\n\tscanner := bufio.NewScanner(os.Stdin)\n\t// ms := NewMultiSet(0)\n\n\tfor scanner.Scan() {\n\t\tfmt.Print(\"$\")\n\t\tline = scanner.Text()\n\t\targs := strings.Fields(line)\n\t\tfmt.Println(line)\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcmd = args[0]\n\n\t\tswitch cmd {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"init\":\n\t\t\t// value, _ := strconv.Atoi(args[1])\n\t\t\t// ms = NewMultiSet(value)\n\t\tcase \"insert\":\n\t\t\t// for _, part := range args[1:] {\n\t\t\t// \tvalue, _ := strconv.Atoi(part)\n\t\t\t// }\n\t\tcase \"show\":\n\t\tcase \"erase\":\n\t\t\t// value, _ := strconv.Atoi(args[1])\n\t\tcase \"contains\":\n\t\t\t// value, _ := strconv.Atoi(args[1])\n\t\tcase \"count\":\n\t\t\t// value, _ := strconv.Atoi(args[1])\n\t\tcase \"unique\":\n\t\tcase \"clear\":\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
