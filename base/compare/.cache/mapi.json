{
    "title": "@compare: Mostrando a \u00e1rvore formatada",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@compare: Mostrando a \u00e1rvore formatada</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Mostrando a \u00e1rvore formatada</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#descri\u00e7\u00e3o\">Descri\u00e7\u00e3o</a></th>\n<th><a href=\"#testes\">Testes</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/compare/cover.jpg\" /></p>\n<h2>Descri\u00e7\u00e3o</h2>\n<ul>\n<li>Compare duas \u00e1rvores bin\u00e1rias e retorne se a primeira \u00e9 menor, maior ou igual \u00e0 segunda.</li>\n<li>Utilize a seguinte estrat\u00e9gia:</li>\n<li>\n<p>Percorra simultaneamente ambas as \u00e1rvores (DFS):</p>\n<ul>\n<li>compare valor do n\u00f3 atual;</li>\n<li>se diferentes, retorna imediatamente (&lt; ou &gt;);</li>\n<li>se iguais, prossiga para a sub\u00e1rvore esquerda, depois direita;</li>\n<li>se nenhuma diferen\u00e7a e ambas terminam null ao mesmo tempo: s\u00e3o iguais.</li>\n</ul>\n</li>\n<li>\n<p>Sa\u00edda:</p>\n<ul>\n<li><code>menor</code> se a primeira \u00e1rvore for menor que a segunda;</li>\n<li><code>maior</code> se a primeira \u00e1rvore for maior que a segunda;</li>\n<li><code>iguais</code> se ambas forem iguais.</li>\n</ul>\n</li>\n</ul>\n<h2>Testes</h2>\n<p>```txt</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>INSERT um\n4 # # \n4 # # \n======== EXPECT\n4\n4\niguais\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH</p>\n<p>INSERT dois\n1 # 0 # # \n1 # 1 # # \n======== EXPECT\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25000\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25001\nmenor\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH</p>\n<p>INSERT dois\n1 # 2 # # \n1 # 1 # # \n======== EXPECT\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25002\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25001\nmaior\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH</p>\n<p>INSERT dois\n1 2 # # # \n1 # 2 # # \n======== EXPECT\n\u256d\u2500\u2500\u25002\n1\n\u2570\u2500\u2500\u2500#\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25002\nmaior\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH</p>\n<p>INSERT dois\n1 # 2 # # \n1 2 # # # \n======== EXPECT\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25002\n\u256d\u2500\u2500\u25002\n1\n\u2570\u2500\u2500\u2500#\nmenor\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH</p>\n<p>INSERT tres\n4 # 8 2 # # # \n4 # 8 2 # # # \n======== EXPECT\n\u256d\u2500\u2500\u2500#\n4\n\u2502   \u256d\u2500\u2500\u25002\n\u2570\u2500\u2500\u25008\n    \u2570\u2500\u2500\u2500#\n\u256d\u2500\u2500\u2500#\n4\n\u2502   \u256d\u2500\u2500\u25002\n\u2570\u2500\u2500\u25008\n    \u2570\u2500\u2500\u2500#\niguais\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH</p>\n<p>INSERT tres\n4 # 8 2 # # # \n4 8 2 # # # #\n======== EXPECT\n\u256d\u2500\u2500\u2500#\n4\n\u2502   \u256d\u2500\u2500\u25002\n\u2570\u2500\u2500\u25008\n    \u2570\u2500\u2500\u2500#\n    \u256d\u2500\u2500\u25002\n\u256d\u2500\u2500\u25008\n\u2502   \u2570\u2500\u2500\u2500#\n4\n\u2570\u2500\u2500\u2500#\nmenor\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH</p>\n<p>INSERT quatro\n0 9 4 # # # 5 # # \n0 8 4 # # # 5 # # \n======== EXPECT\n    \u256d\u2500\u2500\u25004\n\u256d\u2500\u2500\u25009\n\u2502   \u2570\u2500\u2500\u2500#\n0\n\u2570\u2500\u2500\u25005\n    \u256d\u2500\u2500\u25004\n\u256d\u2500\u2500\u25008\n\u2502   \u2570\u2500\u2500\u2500#\n0\n\u2570\u2500\u2500\u25005\nmaior\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FINISH</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT um\n4 # # \n4 # # \n======== EXPECT\n4\n4\niguais\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dois\n1 # 0 # # \n1 # 1 # # \n======== EXPECT\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25000\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25001\nmenor\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dois\n1 # 2 # # \n1 # 1 # # \n======== EXPECT\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25002\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25001\nmaior\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dois\n1 2 # # # \n1 # 2 # # \n======== EXPECT\n\u256d\u2500\u2500\u25002\n1\n\u2570\u2500\u2500\u2500#\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25002\nmaior\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT dois\n1 # 2 # # \n1 2 # # # \n======== EXPECT\n\u256d\u2500\u2500\u2500#\n1\n\u2570\u2500\u2500\u25002\n\u256d\u2500\u2500\u25002\n1\n\u2570\u2500\u2500\u2500#\nmenor\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT tres\n4 # 8 2 # # # \n4 # 8 2 # # # \n======== EXPECT\n\u256d\u2500\u2500\u2500#\n4\n\u2502   \u256d\u2500\u2500\u25002\n\u2570\u2500\u2500\u25008\n    \u2570\u2500\u2500\u2500#\n\u256d\u2500\u2500\u2500#\n4\n\u2502   \u256d\u2500\u2500\u25002\n\u2570\u2500\u2500\u25008\n    \u2570\u2500\u2500\u2500#\niguais\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT tres\n4 # 8 2 # # # \n4 8 2 # # # #\n======== EXPECT\n\u256d\u2500\u2500\u2500#\n4\n\u2502   \u256d\u2500\u2500\u25002\n\u2570\u2500\u2500\u25008\n    \u2570\u2500\u2500\u2500#\n    \u256d\u2500\u2500\u25002\n\u256d\u2500\u2500\u25008\n\u2502   \u2570\u2500\u2500\u2500#\n4\n\u2570\u2500\u2500\u2500#\nmenor\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT quatro\n0 9 4 # # # 5 # # \n0 8 4 # # # 5 # # \n======== EXPECT\n    \u256d\u2500\u2500\u25004\n\u256d\u2500\u2500\u25009\n\u2502   \u2570\u2500\u2500\u2500#\n0\n\u2570\u2500\u2500\u25005\n    \u256d\u2500\u2500\u25004\n\u256d\u2500\u2500\u25008\n\u2502   \u2570\u2500\u2500\u2500#\n0\n\u2570\u2500\u2500\u25005\nmaior\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Node struct {\n\tValue int\n\tLeft  *Node\n\tRight *Node\n}\n\nfunc compare(a, b *Node) int {\n\tif a == nil && b == nil {\n\t\treturn 0\n\t}\n\tif a == nil {\n\t\treturn -1\n\t}\n\tif b == nil {\n\t\treturn 1\n\t}\n\tif a.Value < b.Value {\n\t\treturn -1\n\t}\n\tif a.Value > b.Value {\n\t\treturn 1\n\t}\n\tleft := compare(a.Left, b.Left)\n\tif left != 0 {\n\t\treturn left\n\t}\n\treturn compare(a.Right, b.Right)\n}\n\n// ----------------------------------------------------------------------\nfunc BShow(node *Node, history string) {\n\tif node != nil && (node.Left != nil || node.Right != nil) {\n\t\tBShow(node.Left, history+\"l\")\n\t}\n\tfor i := 0; i < len(history)-1; i++ {\n\t\tif history[i] != history[i+1] {\n\t\t\tfmt.Print(\"\u2502   \")\n\t\t} else {\n\t\t\tfmt.Print(\"    \")\n\t\t}\n\t}\n\tif history != \"\" {\n\t\tif history[len(history)-1] == 'l' {\n\t\t\tfmt.Print(\"\u256d\u2500\u2500\u2500\")\n\t\t} else {\n\t\t\tfmt.Print(\"\u2570\u2500\u2500\u2500\")\n\t\t}\n\t}\n\tif node == nil {\n\t\tfmt.Println(\"#\")\n\t\treturn\n\t}\n\tfmt.Println(node.Value)\n\tif node.Left != nil || node.Right != nil {\n\t\tBShow(node.Right, history+\"r\")\n\t}\n}\n\nfunc create(parts *[]string) *Node {\n\telem := (*parts)[0]\n\t*parts = (*parts)[1:]\n\tif elem == \"#\" {\n\t\treturn nil\n\t}\n\tvalue, _ := strconv.Atoi(elem)\n\tnode := &Node{Value: value}\n\tnode.Left = create(parts)\n\tnode.Right = create(parts)\n\treturn node\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tscanner.Scan()\n\tparts := strings.Split(scanner.Text(), \" \")\n\ta := create(&parts)\n\tBShow(a, \"\")\n\tscanner.Scan()\n\tparts = strings.Split(scanner.Text(), \" \")\n\tb := create(&parts)\n\tBShow(b, \"\")\n\tresult := compare(a, b)\n\tif result == 0 {\n\t\tfmt.Println(\"iguais\")\n\t} else if result < 0 {\n\t\tfmt.Println(\"menor\")\n\t} else {\n\t\tfmt.Println(\"maior\")\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
