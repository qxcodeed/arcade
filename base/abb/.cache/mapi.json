{
    "title": "@abb: \u00c1rvore Bin\u00e1ria de Busca",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@abb: \u00c1rvore Bin\u00e1ria de Busca</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@abb: \u00c1rvore Bin\u00e1ria de Busca</h1>\n            <h1 id=\"arvore-binaria-de-busca\">\u00c1rvore Bin\u00e1ria de Busca</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<h2 id=\"intro\">Intro</h2>\n<p>Neste exerc\u00edcio, voc\u00ea ir\u00e1 trabalhar com a implementa\u00e7\u00e3o de uma \u00c1rvore Bin\u00e1ria de Busca (ABB), uma varia\u00e7\u00e3o da \u00e1rvore bin\u00e1ria com regras espec\u00edficas de ordena\u00e7\u00e3o. A \u00e1rvore bin\u00e1ria de busca \u00e9 uma estrutura de dados eficiente para opera\u00e7\u00f5es de busca, inser\u00e7\u00e3o e remo\u00e7\u00e3o, sendo amplamente utilizada em algoritmos e sistemas que precisam de organiza\u00e7\u00e3o de dados estruturados.</p>\n<p>Em uma \u00c1rvore Bin\u00e1ria de Busca, cada n\u00f3 tem no m\u00e1ximo dois filhos: um filho esquerdo e um filho direito. A regra de ordena\u00e7\u00e3o \u00e9 a seguinte:</p>\n<ul>\n<li>Todos os valores dos n\u00f3s na sub\u00e1rvore esquerda de um n\u00f3 s\u00e3o menores que o valor do pr\u00f3prio n\u00f3.</li>\n<li>Todos os valores dos n\u00f3s na sub\u00e1rvore direita de um n\u00f3 s\u00e3o maiores que o valor do pr\u00f3prio n\u00f3.</li>\n</ul>\n<p>No arquivo <code>lib.cpp</code>, voc\u00ea encontrar\u00e1 a classe <code>BSTree</code> que representa a \u00c1rvore Bin\u00e1ria de Busca, com alguns m\u00e9todos j\u00e1 implementados (riscados) e outros que voc\u00ea precisa desenvolver.</p>\n<ul>\n<li>~~<code>BSTree()</code>~~</li>\n<li>~~<code>~BSTree()</code>~~</li>\n<li><code>Node* search(int info)</code></li>\n<li><code>void insert(Node *current, int info)</code></li>\n<li><code>int size()</code></li>\n<li><code>int min()</code></li>\n<li><code>int max()</code></li>\n<li>~~<code>void clear()</code>~~</li>\n<li>~~<code>bool empty()</code>~~</li>\n<li>~~<code>void print()</code>~~</li>\n</ul>\n<h2 id=\"draft\">Draft</h2>\n<ul>\n<li>Voc\u00ea deve implementar os m\u00e9todos faltantes no arquivo <code>lib.cpp</code></li>\n</ul>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp</li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/abb/.cache/draft/cpp/lib.cpp\">lib.cpp</a></li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/abb/.cache/draft/cpp/main.cpp\">main.cpp</a></li>\n</ul>\n<!-- links -->\n\n<ul>\n<li><strong>Importante</strong>: N\u00e3o altere os m\u00e9todos que j\u00e1 est\u00e3o implementados no arquivo <code>lib.cpp</code>. Foque apenas em completar as funcionalidades que est\u00e3o faltando. O arquivo <code>main()</code> j\u00e1 est\u00e1 dispon\u00edvel, ent\u00e3o voc\u00ea n\u00e3o precisa se preocupar com a entrada ou sa\u00edda padr\u00e3o.</li>\n</ul>\n<h2 id=\"tests\">Tests</h2>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A entrada para este exerc\u00edcio \u00e9 gerada automaticamente no sistema do Moodle. Voc\u00ea n\u00e3o precisa se preocupar em lidar diretamente com a entrada ou sa\u00edda, pois a \u00e1rvore ser\u00e1 manipulada internamente pelos m\u00e9todos que voc\u00ea implementar.</li>\n</ul>\n<h3 id=\"saida\">Sa\u00edda</h3>\n<ul>\n<li>O sistema ir\u00e1 verificar se a sua implementa\u00e7\u00e3o est\u00e1 correta, passando casos de teste autom\u00e1ticos. Seu c\u00f3digo deve garantir que as opera\u00e7\u00f5es de busca, inser\u00e7\u00e3o e c\u00e1lculo de tamanho, m\u00ednimo e m\u00e1ximo funcionem corretamente.</li>\n</ul>\n<h3 id=\"dicas-para-implementacao\">Dicas para Implementa\u00e7\u00e3o</h3>\n<ol>\n<li><strong>Busca</strong>: Comece da raiz e percorra a \u00e1rvore seguindo as regras da ABB at\u00e9 encontrar o valor ou atingir um n\u00f3 nulo.</li>\n<li><strong>Inser\u00e7\u00e3o</strong>: Compare o valor a ser inserido com o n\u00f3 atual. Se for menor, v\u00e1 para o filho esquerdo; se for maior, v\u00e1 para o filho direito, inserindo na posi\u00e7\u00e3o correta.</li>\n<li><strong>Tamanho</strong>: Percorra toda a \u00e1rvore e conte o n\u00famero de n\u00f3s.</li>\n<li><strong>M\u00ednimo e M\u00e1ximo</strong>: V\u00e1 para o n\u00f3 mais \u00e0 esquerda para encontrar o m\u00ednimo e para o mais \u00e0 direita para o m\u00e1ximo.</li>\n</ol>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT test_insert\ntest_insert\n======== EXPECT\nTESTE insert\ninsert 40\ninsert 20\ninsert 10\ninsert 30\ninsert 70\nBSTree: Node-40{(Node-20{(Node-10{(, )}, Node-30{(, )})}, Node-70{(, )})}\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT test_insert_2\ntest_insert_2\n======== EXPECT\nTESTE insert\ninsert 40\ninsert 45\ninsert 20\ninsert 15\ninsert 10\ninsert 30\ninsert 35\ninsert 75\ninsert 70\ninsert 80\ninsert 90\ninsert 5\ninsert 1\ninsert 7\ninsert 2\ninsert 8\ninsert 0\ninsert -10\nBSTree: Node-40{(Node-20{(Node-15{(Node-10{(Node-5{(Node-1{(Node-0{(Node--10{(, )}, )}, Node-2{(, )})}, Node-7{(, Node-8{(, )})})}, )}, )}, Node-30{(, Node-35{(, )})})}, Node-45{(, Node-75{(Node-70{(, )}, Node-80{(, Node-90{(, )})})})})}\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT test_min_max\ntest_min_max\n======== EXPECT\nTESTE min max\nmin -1\nmax -1\ninsert 40\nmin 40\nmax 40\ninsert 45\nmin 40\nmax 45\ninsert 20\nmin 20\nmax 45\ninsert 10\nmin 10\nmax 45\ninsert 30\nmin 10\nmax 45\ninsert 75\nmin 10\nmax 75\ninsert 70\nmin 10\nmax 75\ninsert 90\nmin 10\nmax 90\ninsert 5\nmin 5\nmax 90\ninsert 1\nmin 1\nmax 90\ninsert 7\nmin 1\nmax 90\ninsert -10\nBSTree: Node-40{(Node-20{(Node-10{(Node-5{(Node-1{(Node--10{(, )}, )}, Node-7{(, )})}, )}, Node-30{(, )})}, Node-45{(, Node-75{(Node-70{(, )}, Node-90{(, )})})})}\nmin -10\nmax 90\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT test_size\ntest_size\n======== EXPECT\nTESTE size\nsize 0\ninsert 40\nsize 1\ninsert 45\nsize 2\ninsert 20\nsize 3\ninsert 10\nsize 4\ninsert 30\nsize 5\ninsert 75\nsize 6\ninsert 70\nsize 7\ninsert 90\nsize 8\ninsert 5\nsize 9\ninsert 1\nsize 10\ninsert 7\nsize 11\ninsert -10\nBSTree: Node-40{(Node-20{(Node-10{(Node-5{(Node-1{(Node--10{(, )}, )}, Node-7{(, )})}, )}, Node-30{(, )})}, Node-45{(, Node-75{(Node-70{(, )}, Node-90{(, )})})})}\nsize 12\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "lib.cpp",
                "contents": "#include <iostream>\n\n// Node: classe utilizada para representar um No\n// Nao altere essa classe\nstruct Node {\n    int info; // Informacao salva pelo usuario na arvore\n    Node *left; // Ponteiro para o No filho a esquerda\n    Node *right; // Ponteiro para o No filho a direita\n\n    // Construtores\n    Node(); \n    Node(int info, Node *left=NULL, Node *right=NULL);\n    \n    // Destrutor\n    ~Node();\n};\n\n// Binary Search Tree ou\n// Arvore de busca binaria\n// Altere somente os campos marcados com TODO\nstruct BSTree {\n    Node *root;   // Ponteiro para o No raiz da arvore\n\n    BSTree() {\n        root = NULL;\n    }\n\n    ~BSTree() { // Destrutor\n        clear();\n    }\n\n    // Retorna o No da arvore que possui sua informacao igual a 'info',\n    // ou retorna um No vazio (NULL) caso a arvore nao possua tal 'info'.\n    Node* search(int info) {\n        // TODO: Complexidade O(h), onde h = altura da arvore\n        //DEL!\n        Node* current = this->root;\n\n        while(current != nullptr) {\n            if(current->info == info) {\n                return current;\n            } else if(current->info > info) {\n                current = current->left;\n            } else {\n                current = current->right;\n            }\n        }\n\n        return nullptr;\n        //ACT!\n        // (void) info;\n        // return nullptr;\n        //ADD!\n    }\n\n    // Adiciona um elemento na arvore.\n    // Esse novo elemento deve ser inserido no lugar\n    // de um No vazio e ao mesmo tempo respeitar as propriedades\n    // de uma arvore binaria de busca. \n    // info: informacao do elemento a ser inserido\n    void insert(int info) {\n        // TODO: Complexidade O(h), onde h = altura da arvore\n        //DEL!\n        if(this->empty()) {\n            this->root = new Node(info);\n        }\n\n        Node* current = this->root;\n        Node* parent = nullptr;\n\n        while(current != nullptr) {\n            parent = current;\n            if(current->info > info) {\n                current = current->left;\n            } else if(current->info < info) {\n                current = current->right;\n            } else {\n                return;\n            }\n        }\n\n        if(parent->info > info) {\n            parent->left = new Node(info);\n        } else {\n            parent->right = new Node(info);\n        }\n        //ACT!\n        // (void) info;\n        // return;\n        //ADD!\n    }\n    /*\n        Exemplo:\n\n           T =   40\n                /  \\\n               20  70\n              /  \\\n             10  30\n\n        T.insert(90)\n\n           T =   40\n                /  \\\n               20  70\n              /  \\   \\\n             10  30  90\n    */\n\n\n    // Retorna a quantidade de elementos da arvore.\n    int size() {\n        // TODO: Complexidade O(n)\n        //DEL!\n        if (this->empty()) return 0;\n        return _size(this->root);\n        //ACT!\n        // return 0;\n        //ADD!\n    }\n    //DEL!\n    int _size(Node* current) {\n        if(current == nullptr) return 0;\n        return _size(current->left) + _size(current->right) + 1;\n    }\n    //ADD!\n    // Retorna o menor elemento da arvore, ou -1 caso nao exista\n    int min() {\n        // TODO: Complexidade O(h), onde h = altura da arvore\n        //DEL!\n        if(this->empty()) return -1;\n\n        Node* current = this->root;\n\n        while (current->left != nullptr) {\n            current = current->left;\n        }\n\n        return current->info;\n        //ACT!\n        // return -1;\n        //ADD!\n    }\n\n\n    // Retorna o maior elemento da arvore, ou -1 caso nao exista\n    int max() {\n        // TODO: Complexidade O(h), onde h = altura da arvore\n        //DEL!\n        if(this->empty()) return -1;\n\n        Node* current = this->root;\n\n        while(current->right != nullptr) {\n            current = current->right;\n        }\n\n        return current->info;\n        //ACT!\n        // return -1;\n        //ADD!\n    }\n\n    // Deixa a lista vazia, com zero elementos\n    void clear() {\n        _clear(root);\n        root = nullptr;\n    }\n\n    void _clear(Node* current) {\n        if(current == nullptr) return;\n        _clear(current->left);\n        _clear(current->right);\n        delete current;\n    }\n\n    // Devolve true se vazia e false caso contrario\n    bool empty() {\n        return root == nullptr;\n    }\n\n    // Printa as informacoes da lista\n    void print() {\n        std::cout << \"BSTree: \";\n        _print(root);\n        std::cout << std::endl;\n    }\n\n    void _print(Node *current) {\n        if(current != nullptr) {\n            std::cout << \"Node-\" << current->info << \"{(\";\n            _print(current->left);\n            std::cout << \", \";\n            _print(current->right);\n            std::cout << \")}\";\n        }\n    }\n};\n\n",
                "encoding": 0
            },
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao\n#include <iostream>\n#include <map>\n//#include \"solution_lib.cpp\"\n#include \"lib.cpp\"\n\nusing std::cout;\nusing std::endl;\n\nbool LOG_ALLOCATED = false;\nstd::map<void*, int> allocated_nodes_status = {};\nstd::map<int, int> mapa = {};\nconst int ALLOCATED = 1;\nconst int DELETED = 2;\n\n// Salvar Nos alocados\nNode::Node() {\n    allocated_nodes_status[this] = ALLOCATED;\n}\n\nNode::Node(int info, Node* left, Node* right){\n    allocated_nodes_status[this] = ALLOCATED;\n    this->info = info;\n    this->left = left;\n    this->right = right;\n}\nNode::~Node() {\n    allocated_nodes_status[this] = DELETED;\n}\n\ntemplate <typename K, typename V>\nvoid printMap(const std::map<K, V>& m) {\n    for (const auto& pair : m) {\n        std::cout << \"Key: \" << pair.first << \", Value: \" << pair.second << std::endl;\n    }\n}\n\n/////////////// TESTES AUXILIARES /////////////\n\nvoid print_node(Node *node){\n    if(node == NULL){\n        cout << \"Node(empty)\" << endl;\n    }else{\n        cout << \"Node(\" << node->info << \")\" << endl;\n    }\n}\n\n/*\n    Exemplo:\n    \n       T =   40\n            /  \\\n           20  70\n          /  \\\n         10  30\n*/\n\n/////////////// TESTE SEARCH ///////////////\n\nvoid test_insert(){\n    cout << \"TESTE insert\" << endl;\n    BSTree tree;\n\n    cout << \"insert 40\" << endl; tree.insert(40);\n    cout << \"insert 20\" << endl; tree.insert(20);\n    cout << \"insert 10\" << endl; tree.insert(10);\n    cout << \"insert 30\" << endl; tree.insert(30);\n    cout << \"insert 70\" << endl; tree.insert(70);\n    tree.print();\n}\n\nvoid test_insert2(){\n    cout << \"TESTE insert\" << endl;\n    BSTree tree;\n\n    cout << \"insert 40\" << endl; tree.insert(40);\n    cout << \"insert 45\" << endl; tree.insert(45);\n    cout << \"insert 20\" << endl; tree.insert(20);\n    cout << \"insert 15\" << endl; tree.insert(15);\n    cout << \"insert 10\" << endl; tree.insert(10);\n    cout << \"insert 30\" << endl; tree.insert(30);\n    cout << \"insert 35\" << endl; tree.insert(35);\n    cout << \"insert 75\" << endl; tree.insert(75);\n    cout << \"insert 70\" << endl; tree.insert(70);\n    cout << \"insert 80\" << endl; tree.insert(80);\n    cout << \"insert 90\" << endl; tree.insert(90);\n    cout << \"insert 5\" << endl; tree.insert(5);\n    cout << \"insert 1\" << endl; tree.insert(1);\n    cout << \"insert 7\" << endl; tree.insert(7);\n    cout << \"insert 2\" << endl; tree.insert(2);\n    cout << \"insert 8\" << endl; tree.insert(8);\n    cout << \"insert 0\" << endl; tree.insert(0);\n    cout << \"insert -10\" << endl; tree.insert(-10);\n    tree.print();\n}\n\n/////////////// TESTE SEARCH ///////////////\n\n/*\n    Exemplo:\n\n       T =   40\n            /  \\\n           20  70\n          /  \\\n         10  30\n*/\n\nvoid test_search(){\n    cout << \"TESTE push_front\" << endl;\n    cout << \"TESTE insert\" << endl;\n    BSTree tree;\n\n    cout << \"insert 40\" << endl; tree.insert(40);\n    cout << \"insert 20\" << endl; tree.insert(20);\n    cout << \"insert 10\" << endl; tree.insert(10);\n    cout << \"insert 30\" << endl; tree.insert(30);\n    cout << \"insert 70\" << endl; tree.insert(70);\n    tree.print();\n\n    cout << \"search 40: \"; print_node(tree.search(40));\n    cout << \"search 20: \"; print_node(tree.search(20));\n    cout << \"search 10: \"; print_node(tree.search(10));\n    cout << \"search 30: \"; print_node(tree.search(30));\n    cout << \"search 70: \"; print_node(tree.search(70));\n\n    cout << \"search -20: \"; print_node(tree.search(-20));\n    cout << \"search 1000: \"; print_node(tree.search(1000));\n    cout << \"search 45: \"; print_node(tree.search(44));\n    cout << \"search 25: \"; print_node(tree.search(25));\n    cout << \"search 35: \"; print_node(tree.search(35));\n    cout << \"search 65: \"; print_node(tree.search(65));\n}\n\n/////////////// TESTE SIZE ///////////////\n\nvoid test_size(){\n    cout << \"TESTE size\" << endl;\n    BSTree tree;\n\n    cout << \"size \" << tree.size() << endl;\n    cout << \"insert 40\" << endl; tree.insert(40);\n    cout << \"size \" << tree.size() << endl;\n    cout << \"insert 45\" << endl; tree.insert(45);\n    cout << \"size \" << tree.size() << endl;\n    cout << \"insert 20\" << endl; tree.insert(20);\n    cout << \"size \" << tree.size() << endl;\n    cout << \"insert 10\" << endl; tree.insert(10);\n    cout << \"size \" << tree.size() << endl;\n    cout << \"insert 30\" << endl; tree.insert(30);\n    cout << \"size \" << tree.size() << endl;\n    cout << \"insert 75\" << endl; tree.insert(75);\n    cout << \"size \" << tree.size() << endl;\n    cout << \"insert 70\" << endl; tree.insert(70);\n    cout << \"size \" << tree.size() << endl;\n    cout << \"insert 90\" << endl; tree.insert(90);\n    cout << \"size \" << tree.size() << endl;\n    cout << \"insert 5\" << endl; tree.insert(5);\n    cout << \"size \" << tree.size() << endl;\n    cout << \"insert 1\" << endl; tree.insert(1);\n    cout << \"size \" << tree.size() << endl;\n    cout << \"insert 7\" << endl; tree.insert(7);\n    cout << \"size \" << tree.size() << endl;\n    cout << \"insert -10\" << endl; tree.insert(-10);\n    tree.print();\n    cout << \"size \" << tree.size() << endl;\n}\n\n/////////////// TESTE MIN MAX ///////////////\n\nvoid test_min_max(){\n    cout << \"TESTE min max\" << endl;\n    BSTree tree;\n\n    cout << \"min \" << tree.min() << endl; cout << \"max \" << tree.max() << endl;\n    cout << \"insert 40\" << endl; tree.insert(40);\n    cout << \"min \" << tree.min() << endl; cout << \"max \" << tree.max() << endl;\n    cout << \"insert 45\" << endl; tree.insert(45);\n    cout << \"min \" << tree.min() << endl; cout << \"max \" << tree.max() << endl;\n    cout << \"insert 20\" << endl; tree.insert(20);\n    cout << \"min \" << tree.min() << endl; cout << \"max \" << tree.max() << endl;\n    cout << \"insert 10\" << endl; tree.insert(10);\n    cout << \"min \" << tree.min() << endl; cout << \"max \" << tree.max() << endl;\n    cout << \"insert 30\" << endl; tree.insert(30);\n    cout << \"min \" << tree.min() << endl; cout << \"max \" << tree.max() << endl;\n    cout << \"insert 75\" << endl; tree.insert(75);\n    cout << \"min \" << tree.min() << endl; cout << \"max \" << tree.max() << endl;\n    cout << \"insert 70\" << endl; tree.insert(70);\n    cout << \"min \" << tree.min() << endl; cout << \"max \" << tree.max() << endl;\n    cout << \"insert 90\" << endl; tree.insert(90);\n    cout << \"min \" << tree.min() << endl; cout << \"max \" << tree.max() << endl;\n    cout << \"insert 5\" << endl; tree.insert(5);\n    cout << \"min \" << tree.min() << endl; cout << \"max \" << tree.max() << endl;\n    cout << \"insert 1\" << endl; tree.insert(1);\n    cout << \"min \" << tree.min() << endl; cout << \"max \" << tree.max() << endl;\n    cout << \"insert 7\" << endl; tree.insert(7);\n    cout << \"min \" << tree.min() << endl; cout << \"max \" << tree.max() << endl;\n    cout << \"insert -10\" << endl; tree.insert(-10);\n    tree.print();\n    cout << \"min \" << tree.min() << endl; cout << \"max \" << tree.max() << endl;\n}\n\n/////////////// FIM TESTES ///////////////\n\nint main(){\n    std::string input;\n    std::cin >> input;\n\n    if(input == \"test_insert\") test_insert();\n    if(input == \"test_insert_2\") test_insert2();\n    if(input == \"test_size\") test_size();\n    if(input == \"test_min_max\") test_min_max();\n}\n",
                "encoding": 0
            }
        ]
    }
}
