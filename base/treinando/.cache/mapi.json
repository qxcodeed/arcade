{
    "title": "@treinando: Treinando recurs\u00e3o com vetores",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@treinando: Treinando recurs\u00e3o com vetores</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Treinando recurs\u00e3o com vetores</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/treinando/cover.jpg\" /></p>\n<h2>Intro</h2>\n<ul>\n<li>Dado um vetor de inteiros, implemente fun\u00e7\u00f5es recursivas para todas as opera\u00e7\u00f5es solicitadas.</li>\n<li>Algumas fun\u00e7\u00f5es v\u00e3o precisar que voc\u00ea crie fun\u00e7\u00f5es recursivas auxiliares.</li>\n<li>Ao terminar de implentar uma fun\u00e7\u00e3o, execute os testes e s\u00f3 v\u00e1 para pr\u00f3xima ap\u00f3s passar nos testes.</li>\n<li>Na se\u00e7\u00e3o Shell, voc\u00ea pode ver os testes que ser\u00e3o executados.</li>\n<li>Na se\u00e7\u00e3o Draft, voc\u00ea pode baixar manualmente os arquivos. Mas \u00e9 mais pr\u00e1tico utilizar o <code>tko</code>.</li>\n</ul>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/treinando/.cache/draft/cpp/main.cpp\">main.cpp</a></li>\n</ul>\n</li>\n<li>go<ul>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/treinando/.cache/draft/go/main.go\">main.go</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<hr />\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#__case tostr</span>\n\n<span class=\"nv\">$read</span>\n<span class=\"nv\">$tostr</span>\n<span class=\"o\">[]</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$tostr</span>\n<span class=\"o\">[</span><span class=\"m\">4</span><span class=\"o\">]</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$tostr</span>\n<span class=\"o\">[</span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"nv\">$tostr</span>\n<span class=\"o\">[</span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">6</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#__case torev</span>\n\n<span class=\"nv\">$read</span>\n<span class=\"nv\">$torev</span>\n<span class=\"o\">[]</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$torev</span>\n<span class=\"o\">[</span><span class=\"m\">4</span><span class=\"o\">]</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$torev</span>\n<span class=\"o\">[</span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"nv\">$torev</span>\n<span class=\"o\">[</span><span class=\"m\">6</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#__case reverse</span>\n\n<span class=\"nv\">$read</span>\n<span class=\"nv\">$reverse</span>\n<span class=\"nv\">$tostr</span>\n<span class=\"o\">[]</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$reverse</span>\n<span class=\"nv\">$tostr</span>\n<span class=\"o\">[</span><span class=\"m\">4</span><span class=\"o\">]</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$reverse</span>\n<span class=\"nv\">$tostr</span>\n<span class=\"o\">[</span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"nv\">$reverse</span>\n<span class=\"nv\">$tostr</span>\n<span class=\"o\">[</span><span class=\"m\">6</span>,<span class=\"w\"> </span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#__case sum</span>\n<span class=\"nv\">$read</span>\n<span class=\"nv\">$sum</span>\n<span class=\"m\">0</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$sum</span>\n<span class=\"m\">4</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$sum</span>\n<span class=\"m\">9</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"nv\">$sum</span>\n<span class=\"m\">15</span>\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#__case mult</span>\n<span class=\"nv\">$read</span>\n<span class=\"nv\">$mult</span>\n<span class=\"m\">1</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$mult</span>\n<span class=\"m\">4</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$mult</span>\n<span class=\"m\">20</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"nv\">$mult</span>\n<span class=\"m\">120</span>\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#__case min</span>\n<span class=\"nv\">$read</span>\n<span class=\"nv\">$min</span>\n-1\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$min</span>\n<span class=\"m\">0</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$min</span>\n<span class=\"m\">0</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$min</span>\n<span class=\"m\">1</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"nv\">$min</span>\n<span class=\"m\">0</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"nv\">$min</span>\n<span class=\"m\">1</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">6</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$min</span>\n<span class=\"m\">2</span>\n\n<span class=\"nv\">$read</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">9</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$min</span>\n<span class=\"m\">3</span>\n\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT tostr\nread\ntostr\nread 4\ntostr\nread 4 5\ntostr\nread 4 5 6\ntostr\nend\n======== EXPECT\n$read\n$tostr\n[]\n$read 4\n$tostr\n[4]\n$read 4 5\n$tostr\n[4, 5]\n$read 4 5 6\n$tostr\n[4, 5, 6]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT torev\nread\ntorev\nread 4\ntorev\nread 4 5\ntorev\nread 4 5 6\ntorev\nend\n======== EXPECT\n$read\n$torev\n[]\n$read 4\n$torev\n[4]\n$read 4 5\n$torev\n[5, 4]\n$read 4 5 6\n$torev\n[6, 5, 4]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reverse\nread\nreverse\ntostr\nread 4\nreverse\ntostr\nread 4 5\nreverse\ntostr\nread 4 5 6\nreverse\ntostr\nend\n======== EXPECT\n$read\n$reverse\n$tostr\n[]\n$read 4\n$reverse\n$tostr\n[4]\n$read 4 5\n$reverse\n$tostr\n[5, 4]\n$read 4 5 6\n$reverse\n$tostr\n[6, 5, 4]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sum\nread\nsum\nread 4\nsum\nread 4 5\nsum\nread 4 5 6\nsum\nend\n======== EXPECT\n$read\n$sum\n0\n$read 4\n$sum\n4\n$read 4 5\n$sum\n9\n$read 4 5 6\n$sum\n15\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT mult\nread\nmult\nread 4\nmult\nread 4 5\nmult\nread 4 5 6\nmult\nend\n======== EXPECT\n$read\n$mult\n1\n$read 4\n$mult\n4\n$read 4 5\n$mult\n20\n$read 4 5 6\n$mult\n120\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT min\nread\nmin\nread 4\nmin\nread 4 5\nmin\nread 5 4\nmin\nread 4 5 6\nmin\nread 5 4 6\nmin\nread 5 6 4\nmin\nread 4 3 5 1 9 4 5\nmin\nend\n======== EXPECT\n$read\n$min\n-1\n$read 4\n$min\n0\n$read 4 5\n$min\n0\n$read 5 4\n$min\n1\n$read 4 5 6\n$min\n0\n$read 5 4 6\n$min\n1\n$read 5 6 4\n$min\n2\n$read 4 3 5 1 9 4 5\n$min\n3\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\n\n// init: aponta para o primeiro elemento do vetor\n// end: aponta para uma posi\u00e7\u00e3o depois do \u00faltimo elemento do vetor\n// converte o vetor para texto no formato [1, 2, 3, 4]\nstd::string tostr(int * init, int * end) {\n    (void) init;\n    (void) end;\n    return \"\";\n}\n\n// converte o vetor para texto, por\u00e9m ao contr\u00e1rio\nstd::string torev(int * init, int * end) {\n    (void) init;\n    (void) end;\n    return \"\";\n}\n// inverte os elementos do vetor inplace\nvoid reverse(int * init, int * end) {\n    (void) init;\n    (void) end;\n}\nint sum(int * init, int * end) {\n    (void) init;\n    (void) end;\n    return 0;\n};\n// multiplica os elementos do vetor\n// retorne 1, se o vetor estiver vazio\nint mult(int * init, int * end) {\n    if (init == end) {\n        return 1;\n    }\n    return *init * mult(init + 1, end);\n    (void) init;\n    (void) end;\n    return 0;\n};\n\n// DESAFIO\n// retorne a posi\u00e7\u00e3o do menor elemento do vetor\n// crie uma fun\u00e7\u00e3o auxiliar __min\n// que retorne a posi\u00e7\u00e3o e o valor do menor elemento\n// se o vetor estiver vazio, retorne -1\nint min(int * init, int * end) {\n    (void) init;\n    (void) end;\n    return -1;\n}\nint main() {\n    std::vector<int> vet;\n\n    while (true) {\n        std::string line;\n        std::getline(std::cin, line);\n        std::cout << \"$\" << line << std::endl;\n        std::istringstream iss(line);\n        std::vector<std::string> args;\n        std::string arg;\n        while (iss >> arg) {\n            args.push_back(arg);\n        }\n        if (args[0] == \"end\") {\n            break;\n        } else if (args[0] == \"read\") {\n            vet.clear();\n            for (size_t i = 1; i < args.size(); i++) {\n                vet.push_back(std::stoi(args[i]));\n            }\n        } else if (args[0] == \"tostr\") {\n            auto resp = tostr(vet.data(), vet.data() + vet.size());\n            std::cout << resp << std::endl;\n        } else if (args[0] == \"torev\") {\n            auto resp = torev(vet.data(), vet.data() + vet.size());\n            std::cout << resp << std::endl;\n        } else if (args[0] == \"reverse\") {\n            reverse(vet.data(), vet.data() + vet.size());\n        } else if (args[0] == \"sum\") {\n            auto resp = sum(vet.data(), vet.data() + vet.size());\n            std::cout << resp << std::endl;\n        } else if (args[0] == \"mult\") {\n            auto resp = mult(vet.data(), vet.data() + vet.size());\n            std::cout << resp << std::endl;\n        } else if (args[0] == \"min\") {\n            auto resp = min(vet.data(), vet.data() + vet.size());\n            std::cout << resp << std::endl;\n        } else {\n            std::cout << \"Comando inv\u00e1lido\" << std::endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc tostr(vet []int) string {\n\t_ = vet\n\treturn \"\"\n}\n\nfunc tostrrev(vet []int) string {\n\t_ = vet\n\treturn \"\"\n}\n\n// reverse: inverte os elementos do slice\nfunc reverse(vet []int) {\n\t_ = vet\n}\n\n// sum: soma dos elementos do slice\nfunc sum(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\n// mult: produto dos elementos do slice\nfunc mult(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\n// min: retorna o \u00edndice e valor do menor valor\n// crie uma fun\u00e7\u00e3o recursiva interna do modelo\n// var rec func(v []int) (int, int)\n// para fazer uma recurs\u00e3o que retorna valor e \u00edndice\nfunc min(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\nfunc main() {\n\tvar vet []int\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor {\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\targs := strings.Fields(line)\n\t\tfmt.Println(\"$\" + line)\n\n\t\tswitch args[0] {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"read\":\n\t\t\tvet = nil\n\t\t\tfor _, arg := range args[1:] {\n\t\t\t\tif val, err := strconv.Atoi(arg); err == nil {\n\t\t\t\t\tvet = append(vet, val)\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"tostr\":\n\t\t\tfmt.Println(tostr(vet))\n\t\tcase \"torev\":\n\t\t\tfmt.Println(tostrrev(vet))\n\t\tcase \"reverse\":\n\t\t\treverse(vet)\n\t\tcase \"sum\":\n\t\t\tfmt.Println(sum(vet))\n\t\tcase \"mult\":\n\t\t\tfmt.Println(mult(vet))\n\t\tcase \"min\":\n\t\t\tfmt.Println(min(vet))\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
