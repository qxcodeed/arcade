{
    "title": "L1 - @treinando recurs\u00e3o com vetores | student",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>L1 - @treinando recurs\u00e3o com vetores | student</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <link rel=\"stylesheet\" href=\"/tmp/tmpb68f_b3n.css\" />\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h1 id=\"l1---treinando-recurs\u00e3o-com-vetores-student\">L1 - <span\nclass=\"citation\" data-cites=\"treinando\">@treinando</span> recurs\u00e3o com\nvetores | student</h1>\n<ul>\n<li>Veja a vers\u00e3o online: <a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/treinando/Readme.md\">aqui.</a></li>\n<li>Para programar na sua m\u00e1quina (local/virtual) use:\n<ul>\n<li><code>tko down ed treinando</code></li>\n</ul></li>\n<li>Se n\u00e3o tem o <code>tko</code>, instale pelo <a\nhref=\"https://github.com/senapk/tko#tko\">LINK</a>.</li>\n</ul>\n<hr />\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/treinando/cover.jpg\"\nalt=\"_\" />\n<figcaption aria-hidden=\"true\">_</figcaption>\n</figure>\n<p>Leia um vetor de inteiros e implemente as fun\u00e7\u00f5es sem utilizar la\u00e7o\npara iterar sobre os elementos.</p>\n<hr />\n<ul>\n<li>Entrada\n<ul>\n<li>um vetor de inteiros. O vetor tem no m\u00ednimo 1 elemento.</li>\n</ul></li>\n<li>Sa\u00edda\n<ul>\n<li>vet: o vetor</li>\n<li>rvet: o vetor impresso ao contr\u00e1rio</li>\n<li>sum: a soma dos elementos</li>\n<li>mult: a multiplica\u00e7\u00e3o dos elementos</li>\n<li>min: o menor elemento</li>\n<li>inv: inverte o vetor, depois imprime ele invertido</li>\n</ul></li>\n</ul>\n<p>Todas as fun\u00e7\u00f5es devem ser recursivas e est\u00e3o escritas da seguinte\nforma:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// init: aponta para o primeiro elemento do vetor</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// end: aponta para uma posi\u00e7\u00e3o depois do \u00faltimo elemento do vetor</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">void</span> show<span class=\"op\">(</span><span class=\"dt\">int</span> <span class=\"op\">*</span> init<span class=\"op\">,</span> <span class=\"dt\">int</span> <span class=\"op\">*</span> end<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Exemplo de chamada</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">int</span> vet<span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">]</span> <span class=\"op\">=</span> <span class=\"op\">{</span><span class=\"dv\">5</span><span class=\"op\">,</span> <span class=\"dv\">6</span><span class=\"op\">,</span> <span class=\"dv\">7</span><span class=\"op\">,</span> <span class=\"dv\">2</span><span class=\"op\">};</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>show<span class=\"op\">(</span>vet<span class=\"op\">,</span> vet <span class=\"op\">+</span> <span class=\"dv\">4</span><span class=\"op\">);</span></span></code></pre></div>\n<h2 id=\"arquivos\">Arquivos</h2>\n<ul>\n<li>Voc\u00ea deve implementar:\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/treinando/student.cpp\">student.cpp</a>\n<ul>\n<li>As fun\u00e7\u00f5es a serem implementadas.</li>\n</ul></li>\n</ul></li>\n<li>J\u00e1 est\u00e1 implementado:\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/treinando/main.cpp\">main.cpp</a>\n<ul>\n<li>Faz a leitura do vetor inicial e chama as fun\u00e7\u00f5es.</li>\n</ul></li>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/treinando/lib.hpp\">lib.hpp</a>\n<ul>\n<li>Apenas os cabe\u00e7alhos.</li>\n</ul></li>\n</ul></li>\n</ul>\n<hr />\n<h2 id=\"testes\">Testes</h2>\n<div class=\"sourceCode\" id=\"cb2\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>4</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>vet : [ 4 ]</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>rvet: [ 4 ]</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>sum : 4</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>mult: 4</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>min : 4</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>inv : [ 4 ]</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02</span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>3 4 2</span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>vet : [ 3 4 2 ]</span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>rvet: [ 2 4 3 ]</span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>sum : 9</span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>mult: 24</span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>min : 2</span>\n<span id=\"cb2-20\"><a href=\"#cb2-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>inv : [ 2 4 3 ]</span>\n<span id=\"cb2-21\"><a href=\"#cb2-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb2-22\"><a href=\"#cb2-22\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-23\"><a href=\"#cb2-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03</span>\n<span id=\"cb2-24\"><a href=\"#cb2-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>1 2 3 4</span>\n<span id=\"cb2-25\"><a href=\"#cb2-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb2-26\"><a href=\"#cb2-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>vet : [ 1 2 3 4 ]</span>\n<span id=\"cb2-27\"><a href=\"#cb2-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>rvet: [ 4 3 2 1 ]</span>\n<span id=\"cb2-28\"><a href=\"#cb2-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>sum : 10</span>\n<span id=\"cb2-29\"><a href=\"#cb2-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>mult: 24</span>\n<span id=\"cb2-30\"><a href=\"#cb2-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>min : 1</span>\n<span id=\"cb2-31\"><a href=\"#cb2-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>inv : [ 4 3 2 1 ]</span>\n<span id=\"cb2-32\"><a href=\"#cb2-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb2-33\"><a href=\"#cb2-33\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-34\"><a href=\"#cb2-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 04</span>\n<span id=\"cb2-35\"><a href=\"#cb2-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>1 2 3 4 0</span>\n<span id=\"cb2-36\"><a href=\"#cb2-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb2-37\"><a href=\"#cb2-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>vet : [ 1 2 3 4 0 ]</span>\n<span id=\"cb2-38\"><a href=\"#cb2-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>rvet: [ 0 4 3 2 1 ]</span>\n<span id=\"cb2-39\"><a href=\"#cb2-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>sum : 10</span>\n<span id=\"cb2-40\"><a href=\"#cb2-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>mult: 0</span>\n<span id=\"cb2-41\"><a href=\"#cb2-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>min : 0</span>\n<span id=\"cb2-42\"><a href=\"#cb2-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>inv : [ 0 4 3 2 1 ]</span>\n<span id=\"cb2-43\"><a href=\"#cb2-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb2-44\"><a href=\"#cb2-44\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-45\"><a href=\"#cb2-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 05</span>\n<span id=\"cb2-46\"><a href=\"#cb2-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>1 2 3 4 2 3</span>\n<span id=\"cb2-47\"><a href=\"#cb2-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb2-48\"><a href=\"#cb2-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>vet : [ 1 2 3 4 2 3 ]</span>\n<span id=\"cb2-49\"><a href=\"#cb2-49\" aria-hidden=\"true\" tabindex=\"-1\"></a>rvet: [ 3 2 4 3 2 1 ]</span>\n<span id=\"cb2-50\"><a href=\"#cb2-50\" aria-hidden=\"true\" tabindex=\"-1\"></a>sum : 15</span>\n<span id=\"cb2-51\"><a href=\"#cb2-51\" aria-hidden=\"true\" tabindex=\"-1\"></a>mult: 144</span>\n<span id=\"cb2-52\"><a href=\"#cb2-52\" aria-hidden=\"true\" tabindex=\"-1\"></a>min : 1</span>\n<span id=\"cb2-53\"><a href=\"#cb2-53\" aria-hidden=\"true\" tabindex=\"-1\"></a>inv : [ 3 2 4 3 2 1 ]</span>\n<span id=\"cb2-54\"><a href=\"#cb2-54\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb2-55\"><a href=\"#cb2-55\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-56\"><a href=\"#cb2-56\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 06</span>\n<span id=\"cb2-57\"><a href=\"#cb2-57\" aria-hidden=\"true\" tabindex=\"-1\"></a>1 2 3 4 7 2 9</span>\n<span id=\"cb2-58\"><a href=\"#cb2-58\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb2-59\"><a href=\"#cb2-59\" aria-hidden=\"true\" tabindex=\"-1\"></a>vet : [ 1 2 3 4 7 2 9 ]</span>\n<span id=\"cb2-60\"><a href=\"#cb2-60\" aria-hidden=\"true\" tabindex=\"-1\"></a>rvet: [ 9 2 7 4 3 2 1 ]</span>\n<span id=\"cb2-61\"><a href=\"#cb2-61\" aria-hidden=\"true\" tabindex=\"-1\"></a>sum : 28</span>\n<span id=\"cb2-62\"><a href=\"#cb2-62\" aria-hidden=\"true\" tabindex=\"-1\"></a>mult: 3024</span>\n<span id=\"cb2-63\"><a href=\"#cb2-63\" aria-hidden=\"true\" tabindex=\"-1\"></a>min : 1</span>\n<span id=\"cb2-64\"><a href=\"#cb2-64\" aria-hidden=\"true\" tabindex=\"-1\"></a>inv : [ 9 2 7 4 3 2 1 ]</span>\n<span id=\"cb2-65\"><a href=\"#cb2-65\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb2-66\"><a href=\"#cb2-66\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-67\"><a href=\"#cb2-67\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 07</span>\n<span id=\"cb2-68\"><a href=\"#cb2-68\" aria-hidden=\"true\" tabindex=\"-1\"></a>0 1 2 3 -4 -7 -2</span>\n<span id=\"cb2-69\"><a href=\"#cb2-69\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb2-70\"><a href=\"#cb2-70\" aria-hidden=\"true\" tabindex=\"-1\"></a>vet : [ 0 1 2 3 -4 -7 -2 ]</span>\n<span id=\"cb2-71\"><a href=\"#cb2-71\" aria-hidden=\"true\" tabindex=\"-1\"></a>rvet: [ -2 -7 -4 3 2 1 0 ]</span>\n<span id=\"cb2-72\"><a href=\"#cb2-72\" aria-hidden=\"true\" tabindex=\"-1\"></a>sum : -7</span>\n<span id=\"cb2-73\"><a href=\"#cb2-73\" aria-hidden=\"true\" tabindex=\"-1\"></a>mult: 0</span>\n<span id=\"cb2-74\"><a href=\"#cb2-74\" aria-hidden=\"true\" tabindex=\"-1\"></a>min : -7</span>\n<span id=\"cb2-75\"><a href=\"#cb2-75\" aria-hidden=\"true\" tabindex=\"-1\"></a>inv : [ -2 -7 -4 3 2 1 0 ]</span>\n<span id=\"cb2-76\"><a href=\"#cb2-76\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> 01\n4\n========\nvet : [ 4 ]\nrvet: [ 4 ]\nsum : 4\nmult: 4\nmin : 4\ninv : [ 4 ]\n<<<<<<<<\n\n>>>>>>>> 02\n3 4 2\n========\nvet : [ 3 4 2 ]\nrvet: [ 2 4 3 ]\nsum : 9\nmult: 24\nmin : 2\ninv : [ 2 4 3 ]\n<<<<<<<<\n\n>>>>>>>> 03\n1 2 3 4\n========\nvet : [ 1 2 3 4 ]\nrvet: [ 4 3 2 1 ]\nsum : 10\nmult: 24\nmin : 1\ninv : [ 4 3 2 1 ]\n<<<<<<<<\n\n>>>>>>>> 04\n1 2 3 4 0\n========\nvet : [ 1 2 3 4 0 ]\nrvet: [ 0 4 3 2 1 ]\nsum : 10\nmult: 0\nmin : 0\ninv : [ 0 4 3 2 1 ]\n<<<<<<<<\n\n>>>>>>>> 05\n1 2 3 4 2 3\n========\nvet : [ 1 2 3 4 2 3 ]\nrvet: [ 3 2 4 3 2 1 ]\nsum : 15\nmult: 144\nmin : 1\ninv : [ 3 2 4 3 2 1 ]\n<<<<<<<<\n\n>>>>>>>> 06\n1 2 3 4 7 2 9\n========\nvet : [ 1 2 3 4 7 2 9 ]\nrvet: [ 9 2 7 4 3 2 1 ]\nsum : 28\nmult: 3024\nmin : 1\ninv : [ 9 2 7 4 3 2 1 ]\n<<<<<<<<\n\n>>>>>>>> 07\n0 1 2 3 -4 -7 -2\n========\nvet : [ 0 1 2 3 -4 -7 -2 ]\nrvet: [ -2 -7 -4 3 2 1 0 ]\nsum : -7\nmult: 0\nmin : -7\ninv : [ -2 -7 -4 3 2 1 0 ]\n<<<<<<<<\n",
            "encoding": 0
        }
    ],
    "keep": [
        {
            "name": "main.cpp",
            "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include \"lib.hpp\"\n\nint main() {\n\n    //lendo vetor\n    std::string line;\n    std::getline(std::cin, line);\n    std::stringstream ss(line);\n    std::vector<int> valores;\n    int value { };\n    while (ss >> value)\n        valores.push_back(value);\n\n    //pegando ponteiros para o vetor\n    int * init = valores.data();\n    int * end = init + valores.size();\n\n    std::cout << \"vet : \";\n    alu::show(init, end);\n    std::cout << \"\\n\";\n\n    std::cout << \"rvet: \";\n    alu::show_rev(init, end);\n    std::cout << \"\\n\";\n\n    std::cout << \"sum : \" << alu::sum(init, end) << \"\\n\";\n    std::cout << \"mult: \" << alu::mult(init, end) << \"\\n\";\n    std::cout << \"min : \" << alu::menor(init, end) << \"\\n\";\n    alu::reverse(init, end);\n\n    std::cout << \"inv : \";\n    alu::show(init, end);\n    std::cout << \"\\n\";\n\n}\n\n",
            "encoding": 0
        },
        {
            "name": "lib.hpp",
            "contents": "#pragma once\n\n#include <iostream>\n\nnamespace alu {\n    //imprime recursivamente os elementos de um vetor\n    void __show(int * init, int * end);\n    void show(int * init, int * end);\n\n    //imprime recursivamente os elementos de um vetor de tr\u00e1s pra frente\n    void __show_rev(int * init, int * end);\n\n    void show_rev(int * init, int * end);\n\n    void reverse(int * init, int * end);\n\n    int sum(int * init, int * end);\n\n    int mult(int * init, int * end);\n\n    int menor(int * init, int * end);\n    \n} // namespace alu",
            "encoding": 0
        }
    ],
    "required": [
        {
            "name": "student.cpp",
            "contents": "#include \"lib.hpp\"\nnamespace alu {\n\n    //imprime recursivamente os elementos de um vetor\n    void __show(int * init, int * end) {\n        (void) init;\n        (void) end;\n    }\n\n    void show(int * init, int * end) {\n        std::cout << \"[ \";\n        __show(init, end);\n        std::cout << \"]\";\n    }\n\n    //imprime recursivamente os elementos de um vetor de tr\u00e1s pra frente\n    void __show_rev(int * init, int * end) {\n        //todo: implement\n        (void) init;\n        (void) end;\n    }\n\n    void show_rev(int * init, int * end) {\n        std::cout << \"[ \";\n        __show_rev(init, end);\n        std::cout << \"]\";\n    }\n\n    void reverse(int * init, int * end) {\n        //todo: implement\n        (void) init;\n        (void) end;\n    }\n\n    int sum(int * init, int * end) {\n        //todo: implement\n        (void) init;\n        (void) end;\n        return 0;\n    };\n\n    int mult(int * init, int * end) {\n        //todo: implement\n        (void) init;\n        (void) end;\n        return 0;\n    };\n\n    int menor(int * init, int * end) {\n        //todo: implement\n        (void) init;\n        (void) end;\n        return 0;\n    };\n\n} // namespace alu",
            "encoding": 0
        }
    ]
}
