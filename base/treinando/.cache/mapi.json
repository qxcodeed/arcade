{
    "title": "@treinando: Treinando recurs\u00e3o com vetores",
    "description": "# Treinando recurs\u00e3o com vetores\n\n<!-- toch -->\n[Intro](#intro) | [Draft](#draft) | [Shell](#shell)\n-- | -- | --\n<!-- toch -->\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/treinando/cover.jpg)\n\n## Intro\n\n- Dado um vetor de inteiros, implemente fun\u00e7\u00f5es recursivas para todas as opera\u00e7\u00f5es solicitadas.\n- Algumas fun\u00e7\u00f5es v\u00e3o precisar que voc\u00ea crie fun\u00e7\u00f5es recursivas auxiliares.\n- Ao terminar de implentar uma fun\u00e7\u00e3o, execute os testes e s\u00f3 v\u00e1 para pr\u00f3xima ap\u00f3s passar nos testes.\n- Na se\u00e7\u00e3o Shell, voc\u00ea pode ver os testes que ser\u00e3o executados.\n- Na se\u00e7\u00e3o Draft, voc\u00ea pode baixar manualmente os arquivos. Mas \u00e9 mais pr\u00e1tico utilizar o `tko`.\n\n## Draft\n\n<!-- links .cache/draft -->\n- cpp\n  - [main.cpp](https://github.com/qxcodeed/arcade/blob/master/base/treinando/.cache/draft/cpp/main.cpp)\n- go\n  - [main.go](https://github.com/qxcodeed/arcade/blob/master/base/treinando/.cache/draft/go/main.go)\n<!-- links -->\n\n___\n\n## Shell\n  \n```bash\n#__case tostr\n\n$read\n$tostr\n[]\n\n$read 4\n$tostr\n[4]\n\n$read 4 5\n$tostr\n[4, 5]\n\n$read 4 5 6\n$tostr\n[4, 5, 6]\n$end\n```\n\n```bash\n#__case torev\n\n$read\n$torev\n[]\n\n$read 4\n$torev\n[4]\n\n$read 4 5\n$torev\n[5, 4]\n\n$read 4 5 6\n$torev\n[6, 5, 4]\n\n$end\n```\n\n```bash\n#__case reverse\n\n$read\n$reverse\n$tostr\n[]\n\n$read 4\n$reverse\n$tostr\n[4]\n\n$read 4 5\n$reverse\n$tostr\n[5, 4]\n\n$read 4 5 6\n$reverse\n$tostr\n[6, 5, 4]\n\n$end\n```\n\n```bash\n#__case sum\n$read\n$sum\n0\n\n$read 4\n$sum\n4\n\n$read 4 5\n$sum\n9\n\n$read 4 5 6\n$sum\n15\n\n$end\n```\n\n```bash\n#__case mult\n$read\n$mult\n1\n\n$read 4\n$mult\n4\n\n$read 4 5\n$mult\n20\n\n$read 4 5 6\n$mult\n120\n\n$end\n```\n\n```bash\n#__case min\n$read\n$min\n-1\n\n$read 4\n$min\n0\n\n$read 4 5\n$min\n0\n\n$read 5 4\n$min\n1\n\n$read 4 5 6\n$min\n0\n\n$read 5 4 6\n$min\n1\n\n$read 5 6 4\n$min\n2\n\n$read 4 3 5 1 9 4 5\n$min\n3\n\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT tostr\nread\ntostr\nread 4\ntostr\nread 4 5\ntostr\nread 4 5 6\ntostr\nend\n======== EXPECT\n$read\n$tostr\n[]\n$read 4\n$tostr\n[4]\n$read 4 5\n$tostr\n[4, 5]\n$read 4 5 6\n$tostr\n[4, 5, 6]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT torev\nread\ntorev\nread 4\ntorev\nread 4 5\ntorev\nread 4 5 6\ntorev\nend\n======== EXPECT\n$read\n$torev\n[]\n$read 4\n$torev\n[4]\n$read 4 5\n$torev\n[5, 4]\n$read 4 5 6\n$torev\n[6, 5, 4]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reverse\nread\nreverse\ntostr\nread 4\nreverse\ntostr\nread 4 5\nreverse\ntostr\nread 4 5 6\nreverse\ntostr\nend\n======== EXPECT\n$read\n$reverse\n$tostr\n[]\n$read 4\n$reverse\n$tostr\n[4]\n$read 4 5\n$reverse\n$tostr\n[5, 4]\n$read 4 5 6\n$reverse\n$tostr\n[6, 5, 4]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sum\nread\nsum\nread 4\nsum\nread 4 5\nsum\nread 4 5 6\nsum\nend\n======== EXPECT\n$read\n$sum\n0\n$read 4\n$sum\n4\n$read 4 5\n$sum\n9\n$read 4 5 6\n$sum\n15\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT mult\nread\nmult\nread 4\nmult\nread 4 5\nmult\nread 4 5 6\nmult\nend\n======== EXPECT\n$read\n$mult\n1\n$read 4\n$mult\n4\n$read 4 5\n$mult\n20\n$read 4 5 6\n$mult\n120\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT min\nread\nmin\nread 4\nmin\nread 4 5\nmin\nread 5 4\nmin\nread 4 5 6\nmin\nread 5 4 6\nmin\nread 5 6 4\nmin\nread 4 3 5 1 9 4 5\nmin\nend\n======== EXPECT\n$read\n$min\n-1\n$read 4\n$min\n0\n$read 4 5\n$min\n0\n$read 5 4\n$min\n1\n$read 4 5 6\n$min\n0\n$read 5 4 6\n$min\n1\n$read 5 6 4\n$min\n2\n$read 4 3 5 1 9 4 5\n$min\n3\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <sstream>\n\n// init: aponta para o primeiro elemento do vetor\n// end: aponta para uma posi\u00e7\u00e3o depois do \u00faltimo elemento do vetor\n// converte o vetor para texto no formato [1, 2, 3, 4]\nstd::string tostr(int * init, int * end) {\n    (void) init;\n    (void) end;\n    return \"\";\n}\n\n// converte o vetor para texto, por\u00e9m ao contr\u00e1rio\nstd::string torev(int * init, int * end) {\n    (void) init;\n    (void) end;\n    return \"\";\n}\n// inverte os elementos do vetor inplace\nvoid reverse(int * init, int * end) {\n    (void) init;\n    (void) end;\n}\nint sum(int * init, int * end) {\n    (void) init;\n    (void) end;\n    return 0;\n};\n// multiplica os elementos do vetor\n// retorne 1, se o vetor estiver vazio\nint mult(int * init, int * end) {\n    if (init == end) {\n        return 1;\n    }\n    return *init * mult(init + 1, end);\n    (void) init;\n    (void) end;\n    return 0;\n};\n\n// DESAFIO\n// retorne a posi\u00e7\u00e3o do menor elemento do vetor\n// crie uma fun\u00e7\u00e3o auxiliar __min\n// que retorne a posi\u00e7\u00e3o e o valor do menor elemento\n// se o vetor estiver vazio, retorne -1\nint min(int * init, int * end) {\n    (void) init;\n    (void) end;\n    return -1;\n}\nint main() {\n    std::vector<int> vet;\n\n    while (true) {\n        std::string line;\n        std::getline(std::cin, line);\n        std::cout << \"$\" << line << std::endl;\n        std::istringstream iss(line);\n        std::vector<std::string> args;\n        std::string arg;\n        while (iss >> arg) {\n            args.push_back(arg);\n        }\n        if (args[0] == \"end\") {\n            break;\n        } else if (args[0] == \"read\") {\n            vet.clear();\n            for (size_t i = 1; i < args.size(); i++) {\n                vet.push_back(std::stoi(args[i]));\n            }\n        } else if (args[0] == \"tostr\") {\n            auto resp = tostr(vet.data(), vet.data() + vet.size());\n            std::cout << resp << std::endl;\n        } else if (args[0] == \"torev\") {\n            auto resp = torev(vet.data(), vet.data() + vet.size());\n            std::cout << resp << std::endl;\n        } else if (args[0] == \"reverse\") {\n            reverse(vet.data(), vet.data() + vet.size());\n        } else if (args[0] == \"sum\") {\n            auto resp = sum(vet.data(), vet.data() + vet.size());\n            std::cout << resp << std::endl;\n        } else if (args[0] == \"mult\") {\n            auto resp = mult(vet.data(), vet.data() + vet.size());\n            std::cout << resp << std::endl;\n        } else if (args[0] == \"min\") {\n            auto resp = min(vet.data(), vet.data() + vet.size());\n            std::cout << resp << std::endl;\n        } else {\n            std::cout << \"Comando inv\u00e1lido\" << std::endl;\n        }\n    }\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc tostr(vet []int) string {\n\t_ = vet\n\treturn \"\"\n}\n\nfunc tostrrev(vet []int) string {\n\t_ = vet\n\treturn \"\"\n}\n\n// reverse: inverte os elementos do slice\nfunc reverse(vet []int) {\n\t_ = vet\n}\n\n// sum: soma dos elementos do slice\nfunc sum(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\n// mult: produto dos elementos do slice\nfunc mult(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\n// min: retorna o \u00edndice e valor do menor valor\n// crie uma fun\u00e7\u00e3o recursiva interna do modelo\n// var rec func(v []int) (int, int)\n// para fazer uma recurs\u00e3o que retorna valor e \u00edndice\nfunc min(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\nfunc main() {\n\tvar vet []int\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor {\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\targs := strings.Fields(line)\n\t\tfmt.Println(\"$\" + line)\n\n\t\tswitch args[0] {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"read\":\n\t\t\tvet = nil\n\t\t\tfor _, arg := range args[1:] {\n\t\t\t\tif val, err := strconv.Atoi(arg); err == nil {\n\t\t\t\t\tvet = append(vet, val)\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"tostr\":\n\t\t\tfmt.Println(tostr(vet))\n\t\tcase \"torev\":\n\t\t\tfmt.Println(tostrrev(vet))\n\t\tcase \"reverse\":\n\t\t\treverse(vet)\n\t\tcase \"sum\":\n\t\t\tfmt.Println(sum(vet))\n\t\tcase \"mult\":\n\t\t\tfmt.Println(mult(vet))\n\t\tcase \"min\":\n\t\t\tfmt.Println(min(vet))\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
