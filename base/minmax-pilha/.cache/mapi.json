{
    "title": "@minmax-pilha: MinMax Pilha CPP",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@minmax-pilha: MinMax Pilha CPP</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@minmax-pilha: MinMax Pilha CPP</h1>\n            <h1 id=\"minmax-pilha-cpp\">MinMax Pilha CPP</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<h2 id=\"intro\">Intro</h2>\n<p>Neste exerc\u00edcio, voc\u00ea dever\u00e1 encontrar o menor e o maior elemento em uma pilha de inteiros. A pilha ser\u00e1 fornecida com um conjunto de elementos, e sua tarefa ser\u00e1 identificar os valores m\u00ednimo e m\u00e1ximo presentes na estrutura.</p>\n<p>A pilha \u00e9 uma <strong>estrutura de dados linear</strong> que segue o princ\u00edpio <strong>LIFO (Last In, First Out)</strong>, ou seja, o \u00faltimo elemento inserido \u00e9 o primeiro a ser removido. Neste exerc\u00edcio, por\u00e9m, voc\u00ea n\u00e3o precisar\u00e1 modificar a pilha, apenas analisar seu conte\u00fado para extrair as informa\u00e7\u00f5es necess\u00e1rias.</p>\n<h2 id=\"draft\">Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp</li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/minmax-pilha/.cache/draft/cpp/main.cpp\">main.cpp</a></li>\n</ul>\n<!-- links -->\n\n<h2 id=\"tests\">Tests</h2>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A entrada consistir\u00e1 em um n\u00famero inteiro seguido de uma sequ\u00eancia de elementos da pilha.</li>\n</ul>\n<h3 id=\"saida\">Sa\u00edda</h3>\n<ul>\n<li>A sa\u00edda deve conter o menor e o maior valor da pilha, separados por um espa\u00e7o.</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n5\n3 9 1 6 4\n========\n1 9\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre></div>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n5\n3 9 1 6 4\n======== EXPECT\n1 9\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 1\n5\n1 2 3 4 5\n======== EXPECT\n1 5\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 2\n7\n-12 15 -20 44 12 13 23 \n======== EXPECT\n-20 44\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 3\n4\n42 42 42 42 \n======== EXPECT\n42 42\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste 3\n4\n42 42 42 42\n======== EXPECT\n42 42\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao\n#include <iostream>\n#include <stack>\nusing std::stack;\n\n// Altere essa funcao.\n// Retorne o menor elemento da pilha\n// Pode assumir que a pilha possui pelo menos um elemento\nint minStack(stack<int> pilha){\n    //TODO: Complexidade O(n), onde n = tamanho da pilha\n\n    // DICA: Voce deve usar a pilha nativa do C++:\n    // pilha.top();       // retorna o elemento do topo (equivalente ao nosso 'peek')\n    // pilha.push(info);  // adiciona info no topo da pilha\n    // pilha.pop();       // remove do topo da pilha\n    // pilha.empty();     // retorna se a pilha esta vazia\n    //DEL!\n    if(pilha.empty()) return -1;\n\n    int min = pilha.top();\n    while(!pilha.empty()) {\n        if(pilha.top() < min) {\n            min = pilha.top();\n        } \n\n        pilha.pop();\n    }\n\n    return min;\n    //ACT!\n    // ( void ) pilha;\n    // return -1;\n    //ADD!\n}\n\n\n// Altere essa funcao.\n// Retorne o maior elemento da pilha\n// Pode assumir que a pilha possui pelo menos um elemento\nint maxStack(stack<int> pilha) {\n    //TODO: Complexidade O(n), onde n = tamanho da pilha\n    //DEL!\n    if(pilha.empty()) return -1;\n    \n    int max = pilha.top();\n\n    while(!pilha.empty()) {\n        if(pilha.top() > max) {\n            max = pilha.top();\n        }\n\n        pilha.pop();\n    }\n\n    return max;\n    //ACT!\n    // ( void ) pilha;\n    // return -1;\n    //ADD!\n}\n\n\nint main() {\n    int n;\n    stack<int> pilha;\n\n    std::cin >> n;\n    for(int i = 0; i < n; i++){\n        int el;\n        std::cin >> el;\n        pilha.push(el);\n    }\n\n    int min = minStack(pilha);    \n    int max = maxStack(pilha);   \n\n    std::cout << min << \" \" << max << std::endl;\n}\n",
                "encoding": 0
            }
        ]
    }
}
