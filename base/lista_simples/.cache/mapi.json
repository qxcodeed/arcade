{
    "title": "@lista_simples: Lista simples 1",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@lista_simples: Lista simples 1</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"lista-simples-1\">Lista simples 1</h1>\n<!-- toch -->\n<table>\n<colgroup>\n<col style=\"width: 25%\" />\n<col style=\"width: 25%\" />\n<col style=\"width: 25%\" />\n<col style=\"width: 25%\" />\n</colgroup>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#diagrama-de-implementa\u00e7\u00e3o\">Diagrama de\nImplementa\u00e7\u00e3o</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/lista_simples/cover.jpg\"\nalt=\"_\" />\n<figcaption aria-hidden=\"true\">_</figcaption>\n</figure>\n<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>Vamos implementar uma lista duplamente encadeada com n\u00f3 sentinela\n(n\u00f3 de marca\u00e7\u00e3o). Esse modelo de implementa\u00e7\u00e3o \u00e9 o mais comum em\nlinguagens como C/C++, Java, Go, Rust, etc.</li>\n<li>A excess\u00e3o \u00e9 o python, que tem uma implementa\u00e7\u00e3o diferente, ao inv\u00e9s\nde usar n\u00f3s que unem elementos individuais, ele faz n\u00f3s que unem listas\ninteiras. Isso \u00e9 mais eficiente, mas n\u00e3o \u00e9 o que vamos fazer aqui.</li>\n</ul>\n<h2 id=\"guide\">Guide</h2>\n<p>Nessa lista, teremos um \u00fanico <code>Node</code> chamado\n<code>root</code> que marca tanto o in\u00edcio como o fim da lista. Esse n\u00f3\nn\u00e3o cont\u00e9m dados, apenas aponta para o primeiro e o \u00faltimo n\u00f3 da\nlista.</p>\n<ul>\n<li>root.next representa o primeiro n\u00f3 valido da lista.</li>\n<li>root.prev representa o \u00faltimo n\u00f3 da lista.</li>\n</ul>\n<p>Como queremos implementar algo que se aproxime do uso real, tamb\u00e9m\nvamos utilizar a classe <code>Node</code> como Iterador para a lista,\npermitindo percorrer a lista de forma mais simples. Seja o seguinte\nc\u00f3digo um exemplo de uso do resultado final da implementa\u00e7\u00e3o:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">var</span> llist LList <span class=\"op\">=</span> NewLList<span class=\"op\">()</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Adicionando valores na lista</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> i <span class=\"op\">:=</span> <span class=\"kw\">range</span> <span class=\"dv\">10</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    llist<span class=\"op\">.</span>PushBack<span class=\"op\">(</span>i<span class=\"op\">)</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Iterando sobre a lista</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> node <span class=\"op\">:=</span> llist<span class=\"op\">.</span>Front<span class=\"op\">();</span> node <span class=\"op\">!=</span> <span class=\"ot\">nil</span><span class=\"op\">;</span> node <span class=\"op\">=</span> node<span class=\"op\">.</span>Next<span class=\"op\">()</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    fmt<span class=\"op\">.</span>Println<span class=\"op\">(</span>node<span class=\"op\">.</span>Value<span class=\"op\">)</span></span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Iterando de tr\u00e1s pra frente</span></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> node <span class=\"op\">:=</span> llist<span class=\"op\">.</span>Back<span class=\"op\">();</span> node <span class=\"op\">!=</span> <span class=\"ot\">nil</span><span class=\"op\">;</span> node <span class=\"op\">=</span> node<span class=\"op\">.</span>Prev<span class=\"op\">()</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    fmt<span class=\"op\">.</span>Println<span class=\"op\">(</span>node<span class=\"op\">.</span>Value<span class=\"op\">)</span></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Busca de um n\u00f3</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>node <span class=\"op\">:=</span> llist<span class=\"op\">.</span>Search<span class=\"op\">(</span><span class=\"dv\">3</span><span class=\"op\">)</span></span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">if</span> node <span class=\"op\">!=</span> <span class=\"ot\">nil</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    fmt<span class=\"op\">.</span>Println<span class=\"op\">(</span><span class=\"st\">&quot;Encontrado:&quot;</span><span class=\"op\">,</span> node<span class=\"op\">.</span>Value<span class=\"op\">)</span></span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span> <span class=\"cf\">else</span> <span class=\"op\">{</span></span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    fmt<span class=\"op\">.</span>Println<span class=\"op\">(</span><span class=\"st\">&quot;N\u00e3o encontrado&quot;</span><span class=\"op\">)</span></span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// Removendo todos os n\u00f3s impares</span></span>\n<span id=\"cb1-27\"><a href=\"#cb1-27\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> node <span class=\"op\">:=</span> llist<span class=\"op\">.</span>Front<span class=\"op\">();</span> node <span class=\"op\">!=</span> <span class=\"ot\">nil</span><span class=\"op\">;</span> <span class=\"op\">{</span> <span class=\"co\">// come\u00e7a do primeiro n\u00f3</span></span>\n<span id=\"cb1-28\"><a href=\"#cb1-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> node<span class=\"op\">.</span>Value<span class=\"op\">%</span><span class=\"dv\">2</span> <span class=\"op\">==</span> <span class=\"dv\">1</span> <span class=\"op\">{</span>                <span class=\"co\">// se o valor for impar</span></span>\n<span id=\"cb1-29\"><a href=\"#cb1-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>        node <span class=\"op\">=</span> llist<span class=\"op\">.</span>remove<span class=\"op\">(</span>node<span class=\"op\">)</span>         <span class=\"co\">// remove o n\u00f3 e retorna o pr\u00f3ximo n\u00f3</span></span>\n<span id=\"cb1-30\"><a href=\"#cb1-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span> <span class=\"cf\">else</span> <span class=\"op\">{</span>                              <span class=\"co\">// se o valor for par</span></span>\n<span id=\"cb1-31\"><a href=\"#cb1-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>        node <span class=\"op\">=</span> node<span class=\"op\">.</span>Next<span class=\"op\">()</span>                <span class=\"co\">// apenas avan\u00e7a para o pr\u00f3ximo n\u00f3</span></span>\n<span id=\"cb1-32\"><a href=\"#cb1-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb1-33\"><a href=\"#cb1-33\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<h2 id=\"diagrama-de-implementa\u00e7\u00e3o\">Diagrama de Implementa\u00e7\u00e3o</h2>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>class Node <span class=\"op\">{</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Value <span class=\"dt\">int</span>    <span class=\"co\">// Valor \u00e9 p\u00fablico</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    next <span class=\"op\">*</span>Node   <span class=\"co\">// o pr\u00f3ximo n\u00f3 da lista</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    prev <span class=\"op\">*</span>Node   <span class=\"co\">// o n\u00f3 anterior</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    root <span class=\"op\">*</span>Node   <span class=\"co\">// aponta para o n\u00f3 sentinela da lista da qual ele faz parte</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Next<span class=\"op\">()</span> <span class=\"op\">*</span>Node <span class=\"co\">// retorna o pr\u00f3ximo n\u00f3 ou nulo, se o pr\u00f3ximo \u00e9 o root</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Prev<span class=\"op\">()</span> <span class=\"op\">*</span>Node <span class=\"co\">// retorna o n\u00f3 anterior ou nulo, se o anterior \u00e9 o root</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>class LList <span class=\"op\">{</span></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    root <span class=\"op\">*</span> Node                   <span class=\"co\">// N\u00f3 sentinela que marca o come\u00e7o e o fim da lista</span></span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    size <span class=\"dt\">int</span>                      <span class=\"co\">// tamanho da lista</span></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Size<span class=\"op\">()</span>                        <span class=\"co\">// retorna o tamanho da lista</span></span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Clear<span class=\"op\">()</span>                       <span class=\"co\">// apaga todos os n\u00f3s da lista</span></span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    PushFront<span class=\"op\">(</span>value <span class=\"dt\">int</span><span class=\"op\">)</span>          <span class=\"co\">// adiciona um novo n\u00f3 com esse valor no in\u00edcio da lista</span></span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    PushBack<span class=\"op\">(</span>value <span class=\"dt\">int</span><span class=\"op\">)</span>           <span class=\"co\">// adiciona um novo n\u00f3 com esse valor no fim da lista</span></span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    PopFront<span class=\"op\">()</span>                    <span class=\"co\">// remove o primeiro valor da lista se existir</span></span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    PopBack<span class=\"op\">()</span>                     <span class=\"co\">// remove o \u00faltimo valor da lista se existir</span></span>\n<span id=\"cb2-20\"><a href=\"#cb2-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Front<span class=\"op\">()</span> <span class=\"op\">*</span>Node                 <span class=\"co\">// retorna o primeiro n\u00f3 v\u00e1lido da lista ou nulo</span></span>\n<span id=\"cb2-21\"><a href=\"#cb2-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Back<span class=\"op\">()</span> <span class=\"op\">*</span>Node                  <span class=\"co\">// retorna o \u00faltimo n\u00f3 v\u00e1lido da lista ou nulo</span></span>\n<span id=\"cb2-22\"><a href=\"#cb2-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Search<span class=\"op\">(</span>value <span class=\"dt\">int</span><span class=\"op\">)</span> <span class=\"op\">*</span>Node       <span class=\"co\">// retorna o n\u00f3 que cont\u00e9m a primeira ocorr\u00eancia desse valor ou nulo</span></span>\n<span id=\"cb2-23\"><a href=\"#cb2-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Insert<span class=\"op\">(</span>node <span class=\"op\">*</span>Node<span class=\"op\">,</span> value <span class=\"dt\">int</span><span class=\"op\">)</span> <span class=\"co\">// insere um novo n\u00f3 antes do n\u00f3 passado por refer\u00eancia</span></span>\n<span id=\"cb2-24\"><a href=\"#cb2-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Remove<span class=\"op\">(</span>node <span class=\"op\">*</span>Node<span class=\"op\">)</span> <span class=\"op\">*</span>Node      <span class=\"co\">// remove o n\u00f3 passado por refer\u00eancia retornando o n\u00f3 que ficou no lugar dele</span></span>\n<span id=\"cb2-25\"><a href=\"#cb2-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<h3 id=\"fun\u00e7\u00f5es-a-implementar-na-ordem-dos-testes\">\ud83d\udccc <strong>Fun\u00e7\u00f5es a\nimplementar (na ordem dos testes):</strong></h3>\n<h4 id=\"b\u00e1sicas\">\u2705 B\u00e1sicas</h4>\n<ul>\n<li><strong><code>init</code></strong> \u2013 inicializa a lista\n(vazia).</li>\n<li><strong><code>size</code></strong> \u2013 retorna o tamanho da\nlista.</li>\n<li><strong><code>clear</code></strong> \u2013 esvazia a lista.</li>\n<li><strong><code>push_front &lt;valores&gt;</code></strong> \u2013 insere\nvalores no in\u00edcio da lista (\u00faltimo valor aparece primeiro).</li>\n<li><strong><code>push_back &lt;valores&gt;</code></strong> \u2013 insere\nvalores no final da lista.</li>\n</ul>\n<h4 id=\"remo\u00e7\u00e3o\">\u2705 Remo\u00e7\u00e3o</h4>\n<ul>\n<li><strong><code>pop_front</code></strong> \u2013 remove o primeiro elemento\nda lista (se existir).</li>\n<li><strong><code>pop_back</code></strong> \u2013 remove o \u00faltimo elemento da\nlista (se existir).</li>\n</ul>\n<h4 id=\"acesso\">\u2705 Acesso</h4>\n<ul>\n<li><strong><code>show</code></strong> \u2013 mostra a lista atual (no\nformato <code>[1, 2, 3]</code>).</li>\n<li><strong><code>front</code></strong> \u2013 retorna o primeiro n\u00f3 da lista\nou nulo.</li>\n<li><strong><code>back</code></strong> \u2013 retorna o \u00faltimo n\u00f3 da lista ou\nnulo.</li>\n</ul>\n<h4 id=\"opera\u00e7\u00f5es-com-node\">\u2705 Opera\u00e7\u00f5es com Node</h4>\n<ul>\n<li><strong><code>search</code></strong> - retorna o Node que cont\u00e9m o\nelemento ou Null.</li>\n<li><strong><code>insert</code></strong> - insere um novo Node com valor\nantes da posi\u00e7\u00e3o desse n\u00f3.</li>\n<li><strong><code>remove</code></strong> - remove o n\u00f3 e retorna o n\u00f3\nque ficou no lugar dele. Se era o \u00fatlimo, retorna Null.</li>\n</ul>\n<h2 id=\"shell\">Shell</h2>\n<div class=\"sourceCode\" id=\"cb3\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE init e empty show</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb4\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE push_front &lt;value ...&gt;</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_front</span> 1 2 3 4</span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[4,</span> 3, 2, 1]</span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_front</span> 9 6</span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[6,</span> 9, 4, 3, 2, 1]</span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb5\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE size</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$size</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">0</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_front</span> 4</span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[4]</span></span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$size</span></span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">1</span></span>\n<span id=\"cb5-9\"><a href=\"#cb5-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_front</span> 3 2 1</span>\n<span id=\"cb5-10\"><a href=\"#cb5-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb5-11\"><a href=\"#cb5-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4]</span>\n<span id=\"cb5-12\"><a href=\"#cb5-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$size</span></span>\n<span id=\"cb5-13\"><a href=\"#cb5-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">4</span></span>\n<span id=\"cb5-14\"><a href=\"#cb5-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb6\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE clear</span></span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_front</span> 1 2 3 4</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[4,</span> 3, 2, 1]</span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$clear</span></span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$clear</span></span>\n<span id=\"cb6-9\"><a href=\"#cb6-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb6-10\"><a href=\"#cb6-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb6-11\"><a href=\"#cb6-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_front</span> 1 2 3 4</span>\n<span id=\"cb6-12\"><a href=\"#cb6-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb6-13\"><a href=\"#cb6-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[4,</span> 3, 2, 1]</span>\n<span id=\"cb6-14\"><a href=\"#cb6-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb7\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE push_back &lt;value ...&gt;</span></span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4</span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4]</span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4</span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 1, 2, 3, 4]</span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_front</span> 0 3</span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb7-10\"><a href=\"#cb7-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[3,</span> 0, 1, 2, 3, 4, 1, 2, 3, 4]</span>\n<span id=\"cb7-11\"><a href=\"#cb7-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb8\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb8-1\"><a href=\"#cb8-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE pop_front</span></span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 3 4 5</span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 3, 4, 5]</span>\n<span id=\"cb8-5\"><a href=\"#cb8-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop_front</span></span>\n<span id=\"cb8-6\"><a href=\"#cb8-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb8-7\"><a href=\"#cb8-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[3,</span> 4, 5]</span>\n<span id=\"cb8-8\"><a href=\"#cb8-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop_front</span></span>\n<span id=\"cb8-9\"><a href=\"#cb8-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb8-10\"><a href=\"#cb8-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[4,</span> 5]</span>\n<span id=\"cb8-11\"><a href=\"#cb8-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop_front</span></span>\n<span id=\"cb8-12\"><a href=\"#cb8-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb8-13\"><a href=\"#cb8-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[5]</span></span>\n<span id=\"cb8-14\"><a href=\"#cb8-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop_front</span></span>\n<span id=\"cb8-15\"><a href=\"#cb8-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb8-16\"><a href=\"#cb8-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb8-17\"><a href=\"#cb8-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop_front</span></span>\n<span id=\"cb8-18\"><a href=\"#cb8-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb8-19\"><a href=\"#cb8-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb8-20\"><a href=\"#cb8-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb9\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE pop_back</span></span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 3 4 5</span>\n<span id=\"cb9-3\"><a href=\"#cb9-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb9-4\"><a href=\"#cb9-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 3, 4, 5]</span>\n<span id=\"cb9-5\"><a href=\"#cb9-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop_back</span></span>\n<span id=\"cb9-6\"><a href=\"#cb9-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb9-7\"><a href=\"#cb9-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 3, 4]</span>\n<span id=\"cb9-8\"><a href=\"#cb9-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop_back</span></span>\n<span id=\"cb9-9\"><a href=\"#cb9-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb9-10\"><a href=\"#cb9-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 3]</span>\n<span id=\"cb9-11\"><a href=\"#cb9-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop_back</span></span>\n<span id=\"cb9-12\"><a href=\"#cb9-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb9-13\"><a href=\"#cb9-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1]</span></span>\n<span id=\"cb9-14\"><a href=\"#cb9-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop_back</span></span>\n<span id=\"cb9-15\"><a href=\"#cb9-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb9-16\"><a href=\"#cb9-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb9-17\"><a href=\"#cb9-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$pop_back</span></span>\n<span id=\"cb9-18\"><a href=\"#cb9-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb9-19\"><a href=\"#cb9-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb9-20\"><a href=\"#cb9-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<p>Percorrendo a lista usando front e back</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb10-1\"><a href=\"#cb10-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE walking</span></span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4 5 6</span>\n<span id=\"cb10-3\"><a href=\"#cb10-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$walk</span></span>\n<span id=\"cb10-4\"><a href=\"#cb10-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 5, 6]</span>\n<span id=\"cb10-5\"><a href=\"#cb10-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[6,</span> 5, 4, 3, 2, 1]</span>\n<span id=\"cb10-6\"><a href=\"#cb10-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$clear</span></span>\n<span id=\"cb10-7\"><a href=\"#cb10-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$walk</span></span>\n<span id=\"cb10-8\"><a href=\"#cb10-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb10-9\"><a href=\"#cb10-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span></code></pre></div>\n<p>Para executar a inser\u00e7\u00e3o e remo\u00e7\u00e3o de n\u00f3s, vamos usar o comando\n<code>search</code> para encontrar o n\u00f3 que queremos manipular. E depois\nusar o comando <code>replace</code>, <code>insert</code> ou\n<code>remove</code> para fazer a opera\u00e7\u00e3o desejada.</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE search and replace</span></span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># replace &lt;value_to_search&gt; &lt;value_to_replace&gt;</span></span>\n<span id=\"cb11-3\"><a href=\"#cb11-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4 5</span>\n<span id=\"cb11-4\"><a href=\"#cb11-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$replace</span> 3 9</span>\n<span id=\"cb11-5\"><a href=\"#cb11-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb11-6\"><a href=\"#cb11-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 9, 4, 5]</span>\n<span id=\"cb11-7\"><a href=\"#cb11-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$replace</span> 1 8</span>\n<span id=\"cb11-8\"><a href=\"#cb11-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb11-9\"><a href=\"#cb11-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[8,</span> 2, 9, 4, 5]</span>\n<span id=\"cb11-10\"><a href=\"#cb11-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$replace</span> 5 7</span>\n<span id=\"cb11-11\"><a href=\"#cb11-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb11-12\"><a href=\"#cb11-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">fail:</span> not found</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb12\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb12-1\"><a href=\"#cb12-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE search and insert</span></span>\n<span id=\"cb12-2\"><a href=\"#cb12-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># insert &lt;value_to_search&gt; &lt;value_to_insert_before&gt;</span></span>\n<span id=\"cb12-3\"><a href=\"#cb12-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4 5</span>\n<span id=\"cb12-4\"><a href=\"#cb12-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb12-5\"><a href=\"#cb12-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 5]</span>\n<span id=\"cb12-6\"><a href=\"#cb12-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 3 9</span>\n<span id=\"cb12-7\"><a href=\"#cb12-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb12-8\"><a href=\"#cb12-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 9, 3, 4, 5]</span>\n<span id=\"cb12-9\"><a href=\"#cb12-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 1 8</span>\n<span id=\"cb12-10\"><a href=\"#cb12-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb12-11\"><a href=\"#cb12-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[8,</span> 1, 2, 9, 3, 4, 5]</span>\n<span id=\"cb12-12\"><a href=\"#cb12-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 5 7</span>\n<span id=\"cb12-13\"><a href=\"#cb12-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb12-14\"><a href=\"#cb12-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[8,</span> 1, 2, 9, 3, 4, 7, 5]</span>\n<span id=\"cb12-15\"><a href=\"#cb12-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 6 7</span>\n<span id=\"cb12-16\"><a href=\"#cb12-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb12-17\"><a href=\"#cb12-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[8,</span> 1, 2, 9, 3, 4, 7, 6, 5]</span>\n<span id=\"cb12-18\"><a href=\"#cb12-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 1 7</span>\n<span id=\"cb12-19\"><a href=\"#cb12-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb12-20\"><a href=\"#cb12-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[8,</span> 7, 1, 2, 9, 3, 4, 7, 6, 5]</span>\n<span id=\"cb12-21\"><a href=\"#cb12-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$insert</span> 10 7</span>\n<span id=\"cb12-22\"><a href=\"#cb12-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">fail:</span> not found</span>\n<span id=\"cb12-23\"><a href=\"#cb12-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb12-24\"><a href=\"#cb12-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[8,</span> 7, 1, 2, 9, 3, 4, 7, 6, 5]</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb13\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb13-1\"><a href=\"#cb13-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE search and remove</span></span>\n<span id=\"cb13-2\"><a href=\"#cb13-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># remove &lt;value_to_search&gt;</span></span>\n<span id=\"cb13-3\"><a href=\"#cb13-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4 5</span>\n<span id=\"cb13-4\"><a href=\"#cb13-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb13-5\"><a href=\"#cb13-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 5]</span>\n<span id=\"cb13-6\"><a href=\"#cb13-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$remove</span> 3</span>\n<span id=\"cb13-7\"><a href=\"#cb13-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb13-8\"><a href=\"#cb13-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 4, 5]</span>\n<span id=\"cb13-9\"><a href=\"#cb13-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$remove</span> 1</span>\n<span id=\"cb13-10\"><a href=\"#cb13-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb13-11\"><a href=\"#cb13-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[2,</span> 4, 5]</span>\n<span id=\"cb13-12\"><a href=\"#cb13-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$remove</span> 7</span>\n<span id=\"cb13-13\"><a href=\"#cb13-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">fail:</span> not found</span>\n<span id=\"cb13-14\"><a href=\"#cb13-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb13-15\"><a href=\"#cb13-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[2,</span> 4, 5]</span>\n<span id=\"cb13-16\"><a href=\"#cb13-16\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb13-17\"><a href=\"#cb13-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">------------------------------------------</span>   LISTA DUPLA 2 <span class=\"at\">----------------------------------------------------------</span></span>\n<span id=\"cb13-18\"><a href=\"#cb13-18\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb13-19\"><a href=\"#cb13-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">```</span><span class=\"fu\">bash</span></span>\n<span id=\"cb13-20\"><a href=\"#cb13-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE erase &lt;value&gt;</span></span>\n<span id=\"cb13-21\"><a href=\"#cb13-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4 7 6 8 5</span>\n<span id=\"cb13-22\"><a href=\"#cb13-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb13-23\"><a href=\"#cb13-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 7, 6, 8, 5]</span>\n<span id=\"cb13-24\"><a href=\"#cb13-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase</span> 4</span>\n<span id=\"cb13-25\"><a href=\"#cb13-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb13-26\"><a href=\"#cb13-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 7, 6, 8, 5]</span>\n<span id=\"cb13-27\"><a href=\"#cb13-27\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase</span> 5</span>\n<span id=\"cb13-28\"><a href=\"#cb13-28\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb13-29\"><a href=\"#cb13-29\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 7, 6, 8]</span>\n<span id=\"cb13-30\"><a href=\"#cb13-30\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase</span> 1</span>\n<span id=\"cb13-31\"><a href=\"#cb13-31\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb13-32\"><a href=\"#cb13-32\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[2,</span> 3, 7, 6, 8]</span>\n<span id=\"cb13-33\"><a href=\"#cb13-33\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase</span> 5</span>\n<span id=\"cb13-34\"><a href=\"#cb13-34\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb13-35\"><a href=\"#cb13-35\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[2,</span> 3, 7, 6]</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb14\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb14-1\"><a href=\"#cb14-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE erase_all</span></span>\n<span id=\"cb14-2\"><a href=\"#cb14-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 4 4 1 2 3 4 4 4 7 6 8 5 4 4</span>\n<span id=\"cb14-3\"><a href=\"#cb14-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb14-4\"><a href=\"#cb14-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[4,</span> 4, 1, 2, 3, 4, 4, 4, 7, 6, 8, 5, 4, 4]</span>\n<span id=\"cb14-5\"><a href=\"#cb14-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase_all</span> 4</span>\n<span id=\"cb14-6\"><a href=\"#cb14-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb14-7\"><a href=\"#cb14-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 7, 6, 8, 5]</span>\n<span id=\"cb14-8\"><a href=\"#cb14-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase_all</span> 1</span>\n<span id=\"cb14-9\"><a href=\"#cb14-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb14-10\"><a href=\"#cb14-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[2,</span> 3, 7, 6, 8, 5]</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb15\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb15-1\"><a href=\"#cb15-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE index_of the first occurrence</span></span>\n<span id=\"cb15-2\"><a href=\"#cb15-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4 5 9 8 7 6 5</span>\n<span id=\"cb15-3\"><a href=\"#cb15-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$show</span></span>\n<span id=\"cb15-4\"><a href=\"#cb15-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 3, 4, 5, 9, 8, 7, 6, 5]</span>\n<span id=\"cb15-5\"><a href=\"#cb15-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$index_of</span> 5</span>\n<span id=\"cb15-6\"><a href=\"#cb15-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">4</span></span>\n<span id=\"cb15-7\"><a href=\"#cb15-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$index_of</span> 1</span>\n<span id=\"cb15-8\"><a href=\"#cb15-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">0</span></span>\n<span id=\"cb15-9\"><a href=\"#cb15-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$index_of</span> 9</span>\n<span id=\"cb15-10\"><a href=\"#cb15-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">5</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb16\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb16-1\"><a href=\"#cb16-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE equals_i </span></span>\n<span id=\"cb16-2\"><a href=\"#cb16-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span></span>\n<span id=\"cb16-3\"><a href=\"#cb16-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$equals</span> [ ]</span>\n<span id=\"cb16-4\"><a href=\"#cb16-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">true</span></span>\n<span id=\"cb16-5\"><a href=\"#cb16-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1</span>\n<span id=\"cb16-6\"><a href=\"#cb16-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$equals</span> [ 1 ]</span>\n<span id=\"cb16-7\"><a href=\"#cb16-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">true</span></span>\n<span id=\"cb16-8\"><a href=\"#cb16-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$clear</span></span>\n<span id=\"cb16-9\"><a href=\"#cb16-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4 5</span>\n<span id=\"cb16-10\"><a href=\"#cb16-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$equals</span> [ 1 2 3 4 5 ]</span>\n<span id=\"cb16-11\"><a href=\"#cb16-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">true</span></span>\n<span id=\"cb16-12\"><a href=\"#cb16-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$clear</span></span>\n<span id=\"cb16-13\"><a href=\"#cb16-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1</span>\n<span id=\"cb16-14\"><a href=\"#cb16-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$equals</span> [ 1 2 ]</span>\n<span id=\"cb16-15\"><a href=\"#cb16-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">false</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb17\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb17-1\"><a href=\"#cb17-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE equals_ii</span></span>\n<span id=\"cb17-2\"><a href=\"#cb17-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1</span>\n<span id=\"cb17-3\"><a href=\"#cb17-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$equals</span> [ 1 2 ]</span>\n<span id=\"cb17-4\"><a href=\"#cb17-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">false</span></span>\n<span id=\"cb17-5\"><a href=\"#cb17-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$clear</span></span>\n<span id=\"cb17-6\"><a href=\"#cb17-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3</span>\n<span id=\"cb17-7\"><a href=\"#cb17-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$equals</span> [ 1 2 ]</span>\n<span id=\"cb17-8\"><a href=\"#cb17-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">false</span></span>\n<span id=\"cb17-9\"><a href=\"#cb17-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$clear</span></span>\n<span id=\"cb17-10\"><a href=\"#cb17-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3</span>\n<span id=\"cb17-11\"><a href=\"#cb17-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$equals</span> [ 1 3 2 ]</span>\n<span id=\"cb17-12\"><a href=\"#cb17-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">false</span></span>\n<span id=\"cb17-13\"><a href=\"#cb17-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$clear</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb18\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb18-1\"><a href=\"#cb18-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE clone</span></span>\n<span id=\"cb18-2\"><a href=\"#cb18-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4 5</span>\n<span id=\"cb18-3\"><a href=\"#cb18-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$clone</span></span>\n<span id=\"cb18-4\"><a href=\"#cb18-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">this</span>  <span class=\"at\">-</span><span class=\"op\">&gt;</span> [1, 2, 3, 4, 5]</span>\n<span id=\"cb18-5\"><a href=\"#cb18-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">clone</span> <span class=\"at\">-</span><span class=\"op\">&gt;</span> [1, 2, 3, 4, 5]</span>\n<span id=\"cb18-6\"><a href=\"#cb18-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">clone</span> sucess</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb19\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb19-1\"><a href=\"#cb19-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE iterator</span></span>\n<span id=\"cb19-2\"><a href=\"#cb19-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$push_back</span> 1 2 3 4 5</span>\n<span id=\"cb19-3\"><a href=\"#cb19-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$iter</span></span>\n<span id=\"cb19-4\"><a href=\"#cb19-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">[</span> 1 2 3 <span class=\"er\">4</span> <span class=\"ex\">5</span> ]</span>\n<span id=\"cb19-5\"><a href=\"#cb19-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$rev_iter</span></span>\n<span id=\"cb19-6\"><a href=\"#cb19-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">[</span> 5 4 3 <span class=\"er\">2</span> <span class=\"ex\">1</span> ]</span>\n<span id=\"cb19-7\"><a href=\"#cb19-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$cyclic</span> 14</span>\n<span id=\"cb19-8\"><a href=\"#cb19-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">[</span> 1 2 3 <span class=\"er\">4</span> <span class=\"ex\">5</span> 1 2 3 4 5 1 2 3 5 ]</span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT init e empty show\nshow\nend\n======== EXPECT\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT push_front <value ...>\npush_front 1 2 3 4\nshow\npush_front 9 6\nshow\nend\n======== EXPECT\n$push_front 1 2 3 4\n$show\n[4, 3, 2, 1]\n$push_front 9 6\n$show\n[6, 9, 4, 3, 2, 1]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT size\nsize\npush_front 4\nshow\nsize\npush_front 3 2 1\nshow\nsize\nend\n======== EXPECT\n$size\n0\n$push_front 4\n$show\n[4]\n$size\n1\n$push_front 3 2 1\n$show\n[1, 2, 3, 4]\n$size\n4\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT clear\npush_front 1 2 3 4\nshow\nclear\nshow\nclear\nshow\npush_front 1 2 3 4\nshow\nend\n======== EXPECT\n$push_front 1 2 3 4\n$show\n[4, 3, 2, 1]\n$clear\n$show\n[]\n$clear\n$show\n[]\n$push_front 1 2 3 4\n$show\n[4, 3, 2, 1]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT push_back <value ...>\npush_back 1 2 3 4\nshow\npush_back 1 2 3 4\nshow\npush_front 0 3\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4]\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4, 1, 2, 3, 4]\n$push_front 0 3\n$show\n[3, 0, 1, 2, 3, 4, 1, 2, 3, 4]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT pop_front\npush_back 1 3 4 5\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\nend\n======== EXPECT\n$push_back 1 3 4 5\n$show\n[1, 3, 4, 5]\n$pop_front\n$show\n[3, 4, 5]\n$pop_front\n$show\n[4, 5]\n$pop_front\n$show\n[5]\n$pop_front\n$show\n[]\n$pop_front\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT pop_back\npush_back 1 3 4 5\nshow\npop_back\nshow\npop_back\nshow\npop_back\nshow\npop_back\nshow\npop_back\nshow\nend\n======== EXPECT\n$push_back 1 3 4 5\n$show\n[1, 3, 4, 5]\n$pop_back\n$show\n[1, 3, 4]\n$pop_back\n$show\n[1, 3]\n$pop_back\n$show\n[1]\n$pop_back\n$show\n[]\n$pop_back\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT walking\npush_back 1 2 3 4 5 6\nwalk\nclear\nwalk\nend\n======== EXPECT\n$push_back 1 2 3 4 5 6\n$walk\n[1, 2, 3, 4, 5, 6]\n[6, 5, 4, 3, 2, 1]\n$clear\n$walk\n[]\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT search and replace\npush_back 1 2 3 4 5 6\nwalk\nclear\nwalk\npush_back 1 2 3 4 5\nreplace 3 9\nshow\nreplace 1 8\nshow\nreplace 5 7\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4 5 6\n$walk\n[1, 2, 3, 4, 5, 6]\n[6, 5, 4, 3, 2, 1]\n$clear\n$walk\n[]\n[]\n$push_back 1 2 3 4 5\n$replace 3 9\n$show\n[1, 2, 9, 4, 5]\n$replace 1 8\n$show\n[8, 2, 9, 4, 5]\n$replace 5 7\n$show\nfail: not found\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT search and insert\npush_back 1 2 3 4 5 6\nwalk\nclear\nwalk\npush_back 1 2 3 4 5\nreplace 3 9\nshow\nreplace 1 8\nshow\nreplace 5 7\nshow\npush_back 1 2 3 4 5\nshow\ninsert 3 9\nshow\ninsert 1 8\nshow\ninsert 5 7\nshow\ninsert 6 7\nshow\ninsert 1 7\nshow\ninsert 10 7\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4 5 6\n$walk\n[1, 2, 3, 4, 5, 6]\n[6, 5, 4, 3, 2, 1]\n$clear\n$walk\n[]\n[]\n$push_back 1 2 3 4 5\n$replace 3 9\n$show\n[1, 2, 9, 4, 5]\n$replace 1 8\n$show\n[8, 2, 9, 4, 5]\n$replace 5 7\n$show\nfail: not found\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$insert 3 9\n$show\n[1, 2, 9, 3, 4, 5]\n$insert 1 8\n$show\n[8, 1, 2, 9, 3, 4, 5]\n$insert 5 7\n$show\n[8, 1, 2, 9, 3, 4, 7, 5]\n$insert 6 7\n$show\n[8, 1, 2, 9, 3, 4, 7, 6, 5]\n$insert 1 7\n$show\n[8, 7, 1, 2, 9, 3, 4, 7, 6, 5]\n$insert 10 7\nfail: not found\n$show\n[8, 7, 1, 2, 9, 3, 4, 7, 6, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT search and remove\npush_back 1 2 3 4 5 6\nwalk\nclear\nwalk\npush_back 1 2 3 4 5\nreplace 3 9\nshow\nreplace 1 8\nshow\nreplace 5 7\nshow\npush_back 1 2 3 4 5\nshow\ninsert 3 9\nshow\ninsert 1 8\nshow\ninsert 5 7\nshow\ninsert 6 7\nshow\ninsert 1 7\nshow\ninsert 10 7\nshow\npush_back 1 2 3 4 5\nshow\nremove 3\nshow\nremove 1\nshow\nremove 7\nshow\n======== EXPECT\n$push_back 1 2 3 4 5 6\n$walk\n[1, 2, 3, 4, 5, 6]\n[6, 5, 4, 3, 2, 1]\n$clear\n$walk\n[]\n[]\n$push_back 1 2 3 4 5\n$replace 3 9\n$show\n[1, 2, 9, 4, 5]\n$replace 1 8\n$show\n[8, 2, 9, 4, 5]\n$replace 5 7\n$show\nfail: not found\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$insert 3 9\n$show\n[1, 2, 9, 3, 4, 5]\n$insert 1 8\n$show\n[8, 1, 2, 9, 3, 4, 5]\n$insert 5 7\n$show\n[8, 1, 2, 9, 3, 4, 7, 5]\n$insert 6 7\n$show\n[8, 1, 2, 9, 3, 4, 7, 6, 5]\n$insert 1 7\n$show\n[8, 7, 1, 2, 9, 3, 4, 7, 6, 5]\n$insert 10 7\nfail: not found\n$show\n[8, 7, 1, 2, 9, 3, 4, 7, 6, 5]\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$remove 3\n$show\n[1, 2, 4, 5]\n$remove 1\n$show\n[2, 4, 5]\n$remove 7\nfail: not found\n$show\n[2, 4, 5]\n------------------------------------------   LISTA DUPLA 2 ----------------------------------------------------------\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do Construtor\ntest_constructor\n======== EXPECT\nTESTE Construtor\nOk\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do has_info\ntest_has_info\n======== EXPECT\nTESTE has_info\n[30 -> 20 -> 15 -> 10]\nhas_info -1 == 0\nhas_info 0 == 0\nhas_info 5 == 0\nhas_info 10 == 1\nhas_info 15 == 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do get\ntest_get\n======== EXPECT\nTESTE get\n[30 -> 20 -> 15 -> 10]\nget 0 == 30\nget 1 == 20\nget 2 == 15\nget 3 == 10\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do push_front\ntest_push_front\n======== EXPECT\nTESTE push_front\npush_front 10\npush_front 15\npush_front 20\npush_front 30\nEsperado: [30 -> 20 -> 15 -> 10]\n[30 -> 20 -> 15 -> 10]\n4 Nos alocados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do push_back\ntest_push_back\n======== EXPECT\nTESTE push_back\npush_back 10\npush_back 15\npush_back 20\npush_back 30\nExpected: [10 -> 15 -> 20 -> 30]\n[10 -> 15 -> 20 -> 30]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do pop_front\ntest_pop_front\n======== EXPECT\nTESTE pop_front\nEsperado: [30 -> 20 -> 15 -> 10]\n[30 -> 20 -> 15 -> 10]\npop_front\nEsperado: [20 -> 15 -> 10]\n[20 -> 15 -> 10]\npop_front\nEsperado: [15 -> 10]\n[15 -> 10]\npop_front\nEsperado: [10]\n[10]\npop_front\nEsperado: []\n[]\npop_front\nEsperado: []\n[]\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do pop_back\ntest_pop_back\n======== EXPECT\nTESTE pop_back\nEsperado: [30 -> 20 -> 15 -> 10]\n[30 -> 20 -> 15 -> 10]\npop_back\nEsperado: [30 -> 20 -> 15]\n[30 -> 20 -> 15]\npop_back\nEsperado: [30 -> 20]\n[30 -> 20]\npop_back\nEsperado: [30]\n[30]\npop_back\nEsperado: []\n[]\npop_back\nEsperado: []\n[]\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do clear\ntest_clear\n======== EXPECT\nTESTE clear\nEsperado: [30 -> 20 -> 15 -> 10]\n[30 -> 20 -> 15 -> 10]\nclear\nEsperado: []\n[]\nclear\nEsperado: []\n[]\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do length\ntest_length\n======== EXPECT\nTESTE length\n[]\nlength  == 0\n[42]\nlength  == 1\n[42 -> 42]\nlength  == 2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do empty\ntest_empty\n======== EXPECT\nTESTE empty\n[]\nempty  == 1\n[42]\nempty  == 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do destrutor\ntest_destructor\n======== EXPECT\nTESTE destructor\nExistem Nos nao foram liberados na memoria\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "lib.cpp",
                "contents": "/*       QUESTIONARIO (RESPONDA COM HONESTIDADE)\n\nQ1 - Voce resolveu esse problema em grupo? Se sim, indique com quem fez.\n\n\n\nQ2 - Quanto tempo voc\u00ea demorou para resolve-lo?\n\n\n\nQ3 - Voce considera o problema facil, medio ou dificil? Qual maior dificuldade encontrada?\n\n\n\n*/\n\n/*       ATIVIDADE        */\n#include <iostream>\n\n// Node: classe utilizada para representar um No\n// Nao altere essa classe\nstruct Node {\n    int info; // Informacao salva pelo usuario na lista\n    Node *next; // Ponteiro para o proximo elemento da lista\n\n    Node(); // Construtor\n    Node(int info, Node *next=nullptr); // Construtor\n    ~Node(); // Destrutor\n};\n\n// Singly Linked List ou\n// Lista Simplesmente Encadeada\n// Altere somente os campos marcados com TODO\nstruct SLinkedList {\n    Node *head;   // Ponteiro para a cabeca da lista (primeiro No)\n\n    SLinkedList(){\n        // --\n        this->head = nullptr;\n    }\n\n    ~SLinkedList(){ // Destrutor\n        // TODO\n        // dica: implemente o metodo clear e apenas o chame\n        // --\n        this->clear();\n    }\n\n    // Retorna true se uma informacao pertence a lista, false caso contrario\n    // index: posicao do elemento\n    bool hasInfo(int info){\n        // TODO: Complexidade O(n)\n        // --\n        for(Node* node = head; node != nullptr; node = node->next){\n            if(node->info == info){\n                return true;\n            }\n        }\n        return false;\n        (void) info;\n        return false;\n\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.hasInfo(20) == true\n    // L.hasInfo(100) == false\n\n    // Retorna a informacao dada uma posicao\n    // index: posicao do elemento\n    int get(int index){\n        // TODO: Complexidade O(n)\n        \n        // --\n        int i = 0;\n        for(Node* node = head; node != nullptr; node = node->next){\n            if(i == index){\n                return node->info;\n            }\n            i++;\n        }\n        return -1;\n        (void) index;\n        return 0;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.get(0) == 10\n    // L.get(1) == 20\n    // L.get(2) == 15\n\n\n    // operador[] sobrecarregado. Retorna a \n    // informacao do elemento na posicao 'index'\n    int operator[](int index){\n        return get(index);\n    }\n\n\n    // Adiciona um elemento no inicio da lista\n    // info: informacao do elemento a ser inserido\n    void push_front(int info){\n        Node* newNode = new Node(info, nullptr);\n        newNode->next = head;\n        head = newNode;\n        // Ou simplesmente\n        // head = new Node(info, head);\n        // --\n        newNode->info = info;\n        (void) info;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.push_front(30)\n    // L == 30 -> 10 -> 20 -> 15 -> 50\n\n\n    // Adiciona um elemento ao final da lista\n    // info: informacao do elemento a ser inserido\n    void push_back(int info){\n        // TODO: Complexidade O(n)\n        \n        // --\n        Node* newNode = new Node(info, nullptr);\n        if(head == nullptr){\n            head = newNode;\n            return;\n        }\n        Node* last = head;\n        while(last->next != nullptr){\n            last = last->next;\n        }\n        last->next = newNode;\n\n        (void) info;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.push_front(30)\n    // L == 10 -> 20 -> 15 -> 50 -> 30\n\n\n    // Remove o primeiro elemento da lista.\n    // Nao faz nada se a lista esta vazia\n    void pop_front(){\n        // TODO: Complexidade O(1)\n        // --\n        if(head == nullptr){\n            return;\n        }\n        Node* node = head;\n        head = head->next;\n        delete node;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.pop_front()\n    // L == 20 -> 15 -> 50\n\n\n    // Remove o ultimo elemento da lista.\n    // Nao faz nada se a lista esta vazia\n    void pop_back(){\n        // TODO: Complexidade O(n)\n        // --\n        if(head == nullptr){\n            return;\n        }\n        if(head->next == nullptr){\n            delete head;\n            head = nullptr;\n            return;\n        }\n        Node* last = head;\n        while(last->next->next != nullptr){\n            last = last->next;\n        }\n        delete last->next;\n        last->next = nullptr;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.pop_back()\n    // L == 10 -> 20 -> 15\n\n\n    // Deixa a lista vazia, com zero elementos\n    void clear(){\n        // TODO: Complexidade O(n)\n        // dica: voce pode usar os metodos pop_front e empty\n        // --\n        while(!empty()){\n            pop_front();\n        }\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.clear()\n    // L == []\n\n\n    // Retorna o numero de elementos da lista\n    int length(){\n        // TODO: Complexidade O(n)\n\n        // --\n        int len = 0;\n        for(Node* node = head; node != nullptr; node = node->next){\n            len++;\n        }\n        return len;\n        return 0;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.length() == 4\n\n\n    // Devolve true se cheia e false caso contrario\n    bool empty(){\n        // TODO\n        // --\n        return head == nullptr;\n\n        return false;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.empty() == false\n    // L == ''\n    // L.empty() == true\n\n\n    // Dado um no, retorna o proximo no da lista\n    // Retorna NULL caso nao exista\n    Node* successor(Node* node){\n        return node->next;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.successor(No 20) == No 15\n    // L.successor(No 50) == NULL\n\n\n    // Dado um No, retorna o proximo No da lista\n    // Retorna NULL caso nao exista\n    Node* predecessor(Node* node){\n        // TODO: complexidade O(n)\n        //--\n        if(node == head){\n            return nullptr;\n        }\n        for(Node* n = head; n != nullptr; n = n->next){\n            if(n->next == node){\n                return n;\n            }\n        }\n        return nullptr;\n        (void) node;\n        return nullptr;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.predecessor([20]) == [10]\n    // L.predecessor([10]) == NULL\n\n    // Printa as informacoes da lista\n    void print(){\n        std::cout << \"[\";\n        for(Node* node = head; node != nullptr; node = node->next){\n            std::cout << node->info;\n            if(node->next != nullptr)\n                std::cout << \" -> \";\n        }\n        std::cout << \"]\" << std::endl;\n    }    \n};\n",
                "encoding": 0
            },
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao\n#include <iostream>\n#include <map>\n#include \"lib.cpp\"\n//#include \"solution_lib.cpp\"\n\nusing std::cout;\nusing std::endl;\n\nbool LOG_ALLOCATED = false;\nstd::map<void*, int> allocated_nodes_status = {};\nstd::map<int, int> mapa = {};\nconst int ALLOCATED = 1;\nconst int DELETED = 2;\n\n// Salvar Nos alocados\nNode::Node() {\n    allocated_nodes_status[this] = ALLOCATED;\n}\n\nNode::Node(int info, Node* next){\n    allocated_nodes_status[this] = ALLOCATED;\n    this->info = info;\n    this->next = next;\n}\nNode::~Node() {\n    allocated_nodes_status[this] = DELETED;\n}\n\ntemplate <typename K, typename V>\nvoid printMap(const std::map<K, V>& m) {\n    for (const auto& pair : m) {\n        std::cout << \"Key: \" << pair.first << \", Value: \" << pair.second << std::endl;\n    }\n}\n\n/////////////// TESTE CONSTRUCT ///////////////\n\nvoid test_constructor(){\n    cout << \"TESTE Construtor\" << endl;\n    SLinkedList* list = new SLinkedList(); \n\n    if(list->head == nullptr){\n        cout << \"Ok\" << endl;\n    }else{\n        cout << \"Atributos incorretos\";\n    }\n}\n\n\n/////////////// TESTE HAS_INFO ///////////////\n\nvoid test_has_info(){\n    cout << \"TESTE has_info\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    list.print();\n    cout << \"has_info \" << -1  << \" == \" << list.hasInfo(-1) << endl;\n    cout << \"has_info \" << 0  << \" == \" << list.hasInfo(0) << endl;\n    cout << \"has_info \" << 5  << \" == \" << list.hasInfo(5) << endl;\n    cout << \"has_info \" << 10 << \" == \" << list.hasInfo(10) << endl;\n    cout << \"has_info \" << 15 << \" == \" << list.hasInfo(15) << endl;\n}\n\n/////////////// TESTE GET ///////////////\n\nvoid test_get(){\n    cout << \"TESTE get\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n    // 30 20 15 10\n\n    list.print();\n    cout << \"get \" << 0 << \" == \" << list.get(0) << endl;\n    cout << \"get \" << 1 << \" == \" << list.get(1) << endl;\n    cout << \"get \" << 2 << \" == \" << list.get(2) << endl;\n    cout << \"get \" << 3 << \" == \" << list.get(3) << endl;\n}\n\n\n/////////////// TESTE PUSH_FRONT ///////////////\n\nvoid test_push_front(){\n    cout << \"TESTE push_front\" << endl;\n    SLinkedList list;\n\n    cout << \"push_front \" << 10 << endl;\n    cout << \"push_front \" << 15 << endl;\n    cout << \"push_front \" << 20 << endl;\n    cout << \"push_front \" << 30 << endl;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n    cout << allocated_nodes_status.size() << \" Nos alocados\" << endl;\n}\n\n/////////////// TESTE PUSH_BACK ///////////////\n\nvoid test_push_back(){\n    cout << \"TESTE push_back\" << endl;\n    SLinkedList list;\n\n    cout << \"push_back \" << 10 << endl;\n    cout << \"push_back \" << 15 << endl;\n    cout << \"push_back \" << 20 << endl;\n    cout << \"push_back \" << 30 << endl;\n\n    list.push_back(10);\n    list.push_back(15);\n    list.push_back(20);\n    list.push_back(30);\n\n    cout << \"Expected: [10 -> 15 -> 20 -> 30]\" << endl;\n    list.print();\n}\n\n\n\n/////////////// TESTE POP_FRONT ///////////////\n\nvoid test_pop_front(){\n    cout << \"TESTE pop_front\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    Node* node0 = list.head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: [20 -> 15 -> 10]\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: [15 -> 10]\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: [10]\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE POP_BACK ///////////////\n\nvoid test_pop_back(){\n    cout << \"TESTE pop_back\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    Node* node0 = list.head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: [30 -> 20 -> 15]\" << endl;\n    list.print();\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: [30 -> 20]\" << endl;\n    list.print();\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: [30]\" << endl;\n    list.print();\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE CLEAR ///////////////\n\nvoid test_clear(){\n    cout << \"TESTE clear\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    Node* node0 = list.head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n\n    cout << \"clear\" << endl; list.clear();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    cout << \"clear\" << endl; list.clear();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE LENGTH ///////////////\n\nvoid test_length(){\n    cout << \"TESTE length\" << endl;\n    SLinkedList list;\n\n    list.print();\n    cout << \"length \" << \" == \" << list.length() << endl;    \n    list.push_front(42);\n\n    list.print();\n    cout << \"length \" << \" == \" << list.length() << endl;    \n    list.push_front(42);\n\n    list.print();\n    cout << \"length \" << \" == \" << list.length() << endl;\n}\n\n\n/////////////// TESTE EMPTY ///////////////\n\nvoid test_empty(){\n    cout << \"TESTE empty\" << endl;\n    SLinkedList list;\n\n    list.print();\n    cout << \"empty \" << \" == \" << list.empty() << endl;    \n    list.push_front(42);\n\n    list.print();\n    cout << \"empty \" << \" == \" << list.empty() << endl;    \n}\n\n/////////////// TESTE DESTRUCTOR ///////////////\n\nvoid test_destructor(){\n    cout << \"TESTE destructor\" << endl;\n    SLinkedList* list = new SLinkedList;\n\n    list->push_front(10);\n    list->push_front(15);\n    list->push_front(20);\n    list->push_front(30);\n\n    Node* node0 = list->head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    delete list;\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// FIM TESTES ///////////////\n\nint main(){\n    std::string input;\n    std::cin >> input;\n\n    if(input == \"test_constructor\") test_constructor();\n    if(input == \"test_has_info\") test_has_info();\n    if(input == \"test_get\") test_get();\n    if(input == \"test_push_front\") test_push_front();\n    if(input == \"test_push_back\") test_push_back();\n    if(input == \"test_pop_front\") test_pop_front();\n    if(input == \"test_pop_back\") test_pop_back();\n    if(input == \"test_clear\") test_clear();\n    if(input == \"test_length\") test_length();\n    if(input == \"test_empty\") test_empty();\n    if(input == \"test_destructor\") test_destructor();\n}\n",
                "encoding": 0
            }
        ]
    }
}
