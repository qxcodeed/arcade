{
    "title": "@lista_simples: Lista Simplesmente Encadeada - CPP",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@lista_simples: Lista Simplesmente Encadeada - CPP</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@lista_simples: Lista Simplesmente Encadeada - CPP</h1>\n            <h1 id=\"lista-simplesmente-encadeada-cpp\">Lista Simplesmente Encadeada - CPP</h1>\n<p>Nesse exerc\u00edcio, implementaremos nossa primeira estrutura encadeada: Lista Simplesmente Encadeada.</p>\n<p>Uma lista simplesmente encadeada \u00e9 uma estrutura de dados que consiste em uma sequ\u00eancia de elementos, onde cada elemento (chamado de N\u00f3) cont\u00e9m dois componentes: uma informa\u00e7\u00e3o do elemento e um ponteiro para o pr\u00f3ximo N\u00f3 na sequ\u00eancia.</p>\n<p>Por simplicidade, implementaremos as informa\u00e7\u00f5es como apenas um inteiro.</p>\n<p>No arquivo lib.cpp, se encontra a classe SLinkedList que possui os seguintes m\u00e9todos:</p>\n<ul>\n<li>SLinkedList();</li>\n<li>~SLinkedList();</li>\n<li>bool hasInfo(int info);</li>\n<li>int get(int index);</li>\n<li>int operator<a href=\"int index\"></a>;</li>\n<li>void push_front(int info);</li>\n<li>void push_back(int info);</li>\n<li>~~void pop_front();~~</li>\n<li>void pop_back();</li>\n<li>void clear();</li>\n<li>int length();</li>\n<li>bool empty();</li>\n<li>~~Node* sucessor(Node* node);~~</li>\n<li>Node* predecessor(Node* node);</li>\n<li>~~void print();~~</li>\n</ul>\n<p>M\u00e9todos riscados j\u00e1 est\u00e3o implementados, voc\u00ea precisa implementar os demais.\nA funcionalidade de cada m\u00e9todo est\u00e1 descrita em coment\u00e1rios no pr\u00f3prio arquivo lib.cpp. Sua tarefa \u00e9 alterar o arquivo lib.cpp, implementando as funcionalidades faltantes citadas. Seu c\u00f3digo deve passar no caso de teste para ser considerado correto.</p>\n<p>OBS.: N\u00e3o altere os m\u00e9todos j\u00e1 implementados.</p>\n<p>OBS.2: N\u00e3o precisa escrever a main() nem alterar o arquivo main.cpp.</p>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp</li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/lista_simples/.cache/draft/cpp/lib.cpp\">lib.cpp</a></li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/lista_simples/.cache/draft/cpp/main.cpp\">main.cpp</a></li>\n</ul>\n<!-- links -->\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste do Construtor\ntest_constructor\n======== EXPECT\nTESTE Construtor\nOk\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do has_info\ntest_has_info\n======== EXPECT\nTESTE has_info\n[30 -> 20 -> 15 -> 10]\nhas_info -1 == 0\nhas_info 0 == 0\nhas_info 5 == 0\nhas_info 10 == 1\nhas_info 15 == 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do get\ntest_get\n======== EXPECT\nTESTE get\n[30 -> 20 -> 15 -> 10]\nget 0 == 30\nget 1 == 20\nget 2 == 15\nget 3 == 10\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do push_front\ntest_push_front\n======== EXPECT\nTESTE push_front\npush_front 10\npush_front 15\npush_front 20\npush_front 30\nEsperado: [30 -> 20 -> 15 -> 10]\n[30 -> 20 -> 15 -> 10]\n4 Nos alocados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do push_back\ntest_push_back\n======== EXPECT\nTESTE push_back\npush_back 10\npush_back 15\npush_back 20\npush_back 30\nExpected: [10 -> 15 -> 20 -> 30]\n[10 -> 15 -> 20 -> 30]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do pop_front\ntest_pop_front\n======== EXPECT\nTESTE pop_front\nEsperado: [30 -> 20 -> 15 -> 10]\n[30 -> 20 -> 15 -> 10]\npop_front\nEsperado: [20 -> 15 -> 10]\n[20 -> 15 -> 10]\npop_front\nEsperado: [15 -> 10]\n[15 -> 10]\npop_front\nEsperado: [10]\n[10]\npop_front\nEsperado: []\n[]\npop_front\nEsperado: []\n[]\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do pop_back\ntest_pop_back\n======== EXPECT\nTESTE pop_back\nEsperado: [30 -> 20 -> 15 -> 10]\n[30 -> 20 -> 15 -> 10]\npop_back\nEsperado: [30 -> 20 -> 15]\n[30 -> 20 -> 15]\npop_back\nEsperado: [30 -> 20]\n[30 -> 20]\npop_back\nEsperado: [30]\n[30]\npop_back\nEsperado: []\n[]\npop_back\nEsperado: []\n[]\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do clear\ntest_clear\n======== EXPECT\nTESTE clear\nEsperado: [30 -> 20 -> 15 -> 10]\n[30 -> 20 -> 15 -> 10]\nclear\nEsperado: []\n[]\nclear\nEsperado: []\n[]\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do length\ntest_length\n======== EXPECT\nTESTE length\n[]\nlength  == 0\n[42]\nlength  == 1\n[42 -> 42]\nlength  == 2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do empty\ntest_empty\n======== EXPECT\nTESTE empty\n[]\nempty  == 1\n[42]\nempty  == 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do destrutor\ntest_destructor\n======== EXPECT\nTESTE destructor\nExistem Nos nao foram liberados na memoria\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "lib.cpp",
                "contents": "/*       QUESTIONARIO (RESPONDA COM HONESTIDADE)\n\nQ1 - Voce resolveu esse problema em grupo? Se sim, indique com quem fez.\n\n\n\nQ2 - Quanto tempo voc\u00ea demorou para resolve-lo?\n\n\n\nQ3 - Voce considera o problema facil, medio ou dificil? Qual maior dificuldade encontrada?\n\n\n\n*/\n\n/*       ATIVIDADE        */\n#include <iostream>\n\n// Node: classe utilizada para representar um No\n// Nao altere essa classe\nstruct Node {\n    int info; // Informacao salva pelo usuario na lista\n    Node *next; // Ponteiro para o proximo elemento da lista\n\n    Node(); // Construtor\n    Node(int info, Node *next=nullptr); // Construtor\n    ~Node(); // Destrutor\n};\n\n// Singly Linked List ou\n// Lista Simplesmente Encadeada\n// Altere somente os campos marcados com TODO\nstruct SLinkedList {\n    Node *head;   // Ponteiro para a cabeca da lista (primeiro No)\n\n    SLinkedList(){\n        // --\n        this->head = nullptr;\n    }\n\n    ~SLinkedList(){ // Destrutor\n        // TODO\n        // dica: implemente o metodo clear e apenas o chame\n        // --\n        this->clear();\n    }\n\n    // Retorna true se uma informacao pertence a lista, false caso contrario\n    // index: posicao do elemento\n    bool hasInfo(int info){\n        // TODO: Complexidade O(n)\n        // --\n        for(Node* node = head; node != nullptr; node = node->next){\n            if(node->info == info){\n                return true;\n            }\n        }\n        return false;\n        (void) info;\n        return false;\n\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.hasInfo(20) == true\n    // L.hasInfo(100) == false\n\n    // Retorna a informacao dada uma posicao\n    // index: posicao do elemento\n    int get(int index){\n        // TODO: Complexidade O(n)\n        \n        // --\n        int i = 0;\n        for(Node* node = head; node != nullptr; node = node->next){\n            if(i == index){\n                return node->info;\n            }\n            i++;\n        }\n        return -1;\n        (void) index;\n        return 0;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.get(0) == 10\n    // L.get(1) == 20\n    // L.get(2) == 15\n\n\n    // operador[] sobrecarregado. Retorna a \n    // informacao do elemento na posicao 'index'\n    int operator[](int index){\n        return get(index);\n    }\n\n\n    // Adiciona um elemento no inicio da lista\n    // info: informacao do elemento a ser inserido\n    void push_front(int info){\n        Node* newNode = new Node(info, nullptr);\n        newNode->next = head;\n        head = newNode;\n        // Ou simplesmente\n        // head = new Node(info, head);\n        // --\n        newNode->info = info;\n        (void) info;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.push_front(30)\n    // L == 30 -> 10 -> 20 -> 15 -> 50\n\n\n    // Adiciona um elemento ao final da lista\n    // info: informacao do elemento a ser inserido\n    void push_back(int info){\n        // TODO: Complexidade O(n)\n        \n        // --\n        Node* newNode = new Node(info, nullptr);\n        if(head == nullptr){\n            head = newNode;\n            return;\n        }\n        Node* last = head;\n        while(last->next != nullptr){\n            last = last->next;\n        }\n        last->next = newNode;\n\n        (void) info;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.push_front(30)\n    // L == 10 -> 20 -> 15 -> 50 -> 30\n\n\n    // Remove o primeiro elemento da lista.\n    // Nao faz nada se a lista esta vazia\n    void pop_front(){\n        // TODO: Complexidade O(1)\n        // --\n        if(head == nullptr){\n            return;\n        }\n        Node* node = head;\n        head = head->next;\n        delete node;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.pop_front()\n    // L == 20 -> 15 -> 50\n\n\n    // Remove o ultimo elemento da lista.\n    // Nao faz nada se a lista esta vazia\n    void pop_back(){\n        // TODO: Complexidade O(n)\n        // --\n        if(head == nullptr){\n            return;\n        }\n        if(head->next == nullptr){\n            delete head;\n            head = nullptr;\n            return;\n        }\n        Node* last = head;\n        while(last->next->next != nullptr){\n            last = last->next;\n        }\n        delete last->next;\n        last->next = nullptr;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.pop_back()\n    // L == 10 -> 20 -> 15\n\n\n    // Deixa a lista vazia, com zero elementos\n    void clear(){\n        // TODO: Complexidade O(n)\n        // dica: voce pode usar os metodos pop_front e empty\n        // --\n        while(!empty()){\n            pop_front();\n        }\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.clear()\n    // L == []\n\n\n    // Retorna o numero de elementos da lista\n    int length(){\n        // TODO: Complexidade O(n)\n\n        // --\n        int len = 0;\n        for(Node* node = head; node != nullptr; node = node->next){\n            len++;\n        }\n        return len;\n        return 0;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.length() == 4\n\n\n    // Devolve true se cheia e false caso contrario\n    bool empty(){\n        // TODO\n        // --\n        return head == nullptr;\n\n        return false;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.empty() == false\n    // L == ''\n    // L.empty() == true\n\n\n    // Dado um no, retorna o proximo no da lista\n    // Retorna NULL caso nao exista\n    Node* successor(Node* node){\n        return node->next;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.successor(No 20) == No 15\n    // L.successor(No 50) == NULL\n\n\n    // Dado um No, retorna o proximo No da lista\n    // Retorna NULL caso nao exista\n    Node* predecessor(Node* node){\n        // TODO: complexidade O(n)\n        //--\n        if(node == head){\n            return nullptr;\n        }\n        for(Node* n = head; n != nullptr; n = n->next){\n            if(n->next == node){\n                return n;\n            }\n        }\n        return nullptr;\n        (void) node;\n        return nullptr;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.predecessor([20]) == [10]\n    // L.predecessor([10]) == NULL\n\n    // Printa as informacoes da lista\n    void print(){\n        std::cout << \"[\";\n        for(Node* node = head; node != nullptr; node = node->next){\n            std::cout << node->info;\n            if(node->next != nullptr)\n                std::cout << \" -> \";\n        }\n        std::cout << \"]\" << std::endl;\n    }    \n};\n",
                "encoding": 0
            },
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao\n#include <iostream>\n#include <map>\n#include \"lib.cpp\"\n//#include \"solution_lib.cpp\"\n\nusing std::cout;\nusing std::endl;\n\nbool LOG_ALLOCATED = false;\nstd::map<void*, int> allocated_nodes_status = {};\nstd::map<int, int> mapa = {};\nconst int ALLOCATED = 1;\nconst int DELETED = 2;\n\n// Salvar Nos alocados\nNode::Node() {\n    allocated_nodes_status[this] = ALLOCATED;\n}\n\nNode::Node(int info, Node* next){\n    allocated_nodes_status[this] = ALLOCATED;\n    this->info = info;\n    this->next = next;\n}\nNode::~Node() {\n    allocated_nodes_status[this] = DELETED;\n}\n\ntemplate <typename K, typename V>\nvoid printMap(const std::map<K, V>& m) {\n    for (const auto& pair : m) {\n        std::cout << \"Key: \" << pair.first << \", Value: \" << pair.second << std::endl;\n    }\n}\n\n/////////////// TESTE CONSTRUCT ///////////////\n\nvoid test_constructor(){\n    cout << \"TESTE Construtor\" << endl;\n    SLinkedList* list = new SLinkedList(); \n\n    if(list->head == nullptr){\n        cout << \"Ok\" << endl;\n    }else{\n        cout << \"Atributos incorretos\";\n    }\n}\n\n\n/////////////// TESTE HAS_INFO ///////////////\n\nvoid test_has_info(){\n    cout << \"TESTE has_info\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    list.print();\n    cout << \"has_info \" << -1  << \" == \" << list.hasInfo(-1) << endl;\n    cout << \"has_info \" << 0  << \" == \" << list.hasInfo(0) << endl;\n    cout << \"has_info \" << 5  << \" == \" << list.hasInfo(5) << endl;\n    cout << \"has_info \" << 10 << \" == \" << list.hasInfo(10) << endl;\n    cout << \"has_info \" << 15 << \" == \" << list.hasInfo(15) << endl;\n}\n\n/////////////// TESTE GET ///////////////\n\nvoid test_get(){\n    cout << \"TESTE get\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n    // 30 20 15 10\n\n    list.print();\n    cout << \"get \" << 0 << \" == \" << list.get(0) << endl;\n    cout << \"get \" << 1 << \" == \" << list.get(1) << endl;\n    cout << \"get \" << 2 << \" == \" << list.get(2) << endl;\n    cout << \"get \" << 3 << \" == \" << list.get(3) << endl;\n}\n\n\n/////////////// TESTE PUSH_FRONT ///////////////\n\nvoid test_push_front(){\n    cout << \"TESTE push_front\" << endl;\n    SLinkedList list;\n\n    cout << \"push_front \" << 10 << endl;\n    cout << \"push_front \" << 15 << endl;\n    cout << \"push_front \" << 20 << endl;\n    cout << \"push_front \" << 30 << endl;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n    cout << allocated_nodes_status.size() << \" Nos alocados\" << endl;\n}\n\n/////////////// TESTE PUSH_BACK ///////////////\n\nvoid test_push_back(){\n    cout << \"TESTE push_back\" << endl;\n    SLinkedList list;\n\n    cout << \"push_back \" << 10 << endl;\n    cout << \"push_back \" << 15 << endl;\n    cout << \"push_back \" << 20 << endl;\n    cout << \"push_back \" << 30 << endl;\n\n    list.push_back(10);\n    list.push_back(15);\n    list.push_back(20);\n    list.push_back(30);\n\n    cout << \"Expected: [10 -> 15 -> 20 -> 30]\" << endl;\n    list.print();\n}\n\n\n\n/////////////// TESTE POP_FRONT ///////////////\n\nvoid test_pop_front(){\n    cout << \"TESTE pop_front\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    Node* node0 = list.head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: [20 -> 15 -> 10]\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: [15 -> 10]\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: [10]\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE POP_BACK ///////////////\n\nvoid test_pop_back(){\n    cout << \"TESTE pop_back\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    Node* node0 = list.head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: [30 -> 20 -> 15]\" << endl;\n    list.print();\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: [30 -> 20]\" << endl;\n    list.print();\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: [30]\" << endl;\n    list.print();\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE CLEAR ///////////////\n\nvoid test_clear(){\n    cout << \"TESTE clear\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    Node* node0 = list.head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n\n    cout << \"clear\" << endl; list.clear();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    cout << \"clear\" << endl; list.clear();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE LENGTH ///////////////\n\nvoid test_length(){\n    cout << \"TESTE length\" << endl;\n    SLinkedList list;\n\n    list.print();\n    cout << \"length \" << \" == \" << list.length() << endl;    \n    list.push_front(42);\n\n    list.print();\n    cout << \"length \" << \" == \" << list.length() << endl;    \n    list.push_front(42);\n\n    list.print();\n    cout << \"length \" << \" == \" << list.length() << endl;\n}\n\n\n/////////////// TESTE EMPTY ///////////////\n\nvoid test_empty(){\n    cout << \"TESTE empty\" << endl;\n    SLinkedList list;\n\n    list.print();\n    cout << \"empty \" << \" == \" << list.empty() << endl;    \n    list.push_front(42);\n\n    list.print();\n    cout << \"empty \" << \" == \" << list.empty() << endl;    \n}\n\n/////////////// TESTE DESTRUCTOR ///////////////\n\nvoid test_destructor(){\n    cout << \"TESTE destructor\" << endl;\n    SLinkedList* list = new SLinkedList;\n\n    list->push_front(10);\n    list->push_front(15);\n    list->push_front(20);\n    list->push_front(30);\n\n    Node* node0 = list->head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    delete list;\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// FIM TESTES ///////////////\n\nint main(){\n    std::string input;\n    std::cin >> input;\n\n    if(input == \"test_constructor\") test_constructor();\n    if(input == \"test_has_info\") test_has_info();\n    if(input == \"test_get\") test_get();\n    if(input == \"test_push_front\") test_push_front();\n    if(input == \"test_push_back\") test_push_back();\n    if(input == \"test_pop_front\") test_pop_front();\n    if(input == \"test_pop_back\") test_pop_back();\n    if(input == \"test_clear\") test_clear();\n    if(input == \"test_length\") test_length();\n    if(input == \"test_empty\") test_empty();\n    if(input == \"test_destructor\") test_destructor();\n}\n",
                "encoding": 0
            }
        ]
    }
}
