{
    "title": "@lista_simples: Lista simples 1",
    "description": "# Lista simples 1\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Diagrama de Implementa\u00e7\u00e3o](#diagrama-de-implementa\u00e7\u00e3o) | [Shell](#shell)\n-- | -- | -- | --\n<!-- toch -->\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/lista_simples/cover.jpg)\n\n## Intro\n\n- Vamos implementar uma lista duplamente encadeada com n\u00f3 sentinela (n\u00f3 de marca\u00e7\u00e3o). Esse modelo de implementa\u00e7\u00e3o \u00e9 o mais comum em linguagens como C/C++, Java, Go, Rust, etc.\n- A excess\u00e3o \u00e9 o python, que tem uma implementa\u00e7\u00e3o diferente, ao inv\u00e9s de usar n\u00f3s que unem elementos individuais, ele faz n\u00f3s que unem listas inteiras. Isso \u00e9 mais eficiente, mas n\u00e3o \u00e9 o que vamos fazer aqui.\n\n## Guide\n\nNessa lista, teremos um \u00fanico `Node` chamado `root` que marca tanto o in\u00edcio como o fim da lista. Esse n\u00f3 n\u00e3o cont\u00e9m dados, apenas aponta para o primeiro e o \u00faltimo n\u00f3 da lista.\n\n- root.next representa o primeiro n\u00f3 valido da lista.\n- root.prev representa o \u00faltimo n\u00f3 da lista.\n\nComo queremos implementar algo que se aproxime do uso real, tamb\u00e9m vamos utilizar a classe `Node` como Iterador para a lista, permitindo percorrer a lista de forma mais simples. Seja o seguinte c\u00f3digo um exemplo de uso do resultado final da implementa\u00e7\u00e3o:\n\n```go\nvar llist LList = NewLList()\n\n// Adicionando valores na lista\nfor i := range 10 {\n    llist.PushBack(i)\n}\n\n// Iterando sobre a lista\nfor node := llist.Front(); node != nil; node = node.Next() {\n    fmt.Println(node.Value)\n}\n\n// Iterando de tr\u00e1s pra frente\nfor node := llist.Back(); node != nil; node = node.Prev() {\n    fmt.Println(node.Value)\n}\n\n// Busca de um n\u00f3\nnode := llist.Search(3)\nif node != nil {\n    fmt.Println(\"Encontrado:\", node.Value)\n} else {\n    fmt.Println(\"N\u00e3o encontrado\")\n}\n\n// Removendo todos os n\u00f3s impares\nfor node := llist.Front(); node != nil; { // come\u00e7a do primeiro n\u00f3\n    if node.Value%2 == 1 {                // se o valor for impar\n        node = llist.remove(node)         // remove o n\u00f3 e retorna o pr\u00f3ximo n\u00f3\n    } else {                              // se o valor for par\n        node = node.Next()                // apenas avan\u00e7a para o pr\u00f3ximo n\u00f3\n    }\n}\n\n```\n\n## Diagrama de Implementa\u00e7\u00e3o\n\n```go\nclass Node {\n    Value int    // Valor \u00e9 p\u00fablico\n    next *Node   // o pr\u00f3ximo n\u00f3 da lista\n    prev *Node   // o n\u00f3 anterior\n\n    root *Node   // aponta para o n\u00f3 sentinela da lista da qual ele faz parte\n    Next() *Node // retorna o pr\u00f3ximo n\u00f3 ou nulo, se o pr\u00f3ximo \u00e9 o root\n    Prev() *Node // retorna o n\u00f3 anterior ou nulo, se o anterior \u00e9 o root\n}\n\nclass LList {\n    root * Node                   // N\u00f3 sentinela que marca o come\u00e7o e o fim da lista\n    size int                      // tamanho da lista\n    Size()                        // retorna o tamanho da lista\n    Clear()                       // apaga todos os n\u00f3s da lista\n    PushFront(value int)          // adiciona um novo n\u00f3 com esse valor no in\u00edcio da lista\n    PushBack(value int)           // adiciona um novo n\u00f3 com esse valor no fim da lista\n    PopFront()                    // remove o primeiro valor da lista se existir\n    PopBack()                     // remove o \u00faltimo valor da lista se existir\n    Front() *Node                 // retorna o primeiro n\u00f3 v\u00e1lido da lista ou nulo\n    Back() *Node                  // retorna o \u00faltimo n\u00f3 v\u00e1lido da lista ou nulo\n    Search(value int) *Node       // retorna o n\u00f3 que cont\u00e9m a primeira ocorr\u00eancia desse valor ou nulo\n    Insert(node *Node, value int) // insere um novo n\u00f3 antes do n\u00f3 passado por refer\u00eancia\n    Remove(node *Node) *Node      // remove o n\u00f3 passado por refer\u00eancia retornando o n\u00f3 que ficou no lugar dele\n}\n```\n\n### \ud83d\udccc **Fun\u00e7\u00f5es a implementar (na ordem dos testes):**\n\n#### \u2705 B\u00e1sicas\n\n- **`init`** \u2013 inicializa a lista (vazia).\n- **`size`** \u2013 retorna o tamanho da lista.\n- **`clear`** \u2013 esvazia a lista.\n- **`push_front <valores>`** \u2013 insere valores no in\u00edcio da lista (\u00faltimo valor aparece primeiro).\n- **`push_back <valores>`** \u2013 insere valores no final da lista.\n\n#### \u2705 Remo\u00e7\u00e3o\n\n- **`pop_front`** \u2013 remove o primeiro elemento da lista (se existir).\n- **`pop_back`** \u2013 remove o \u00faltimo elemento da lista (se existir).\n\n#### \u2705 Acesso\n\n- **`show`** \u2013 mostra a lista atual (no formato `[1, 2, 3]`).\n- **`front`** \u2013 retorna o primeiro n\u00f3 da lista ou nulo.\n- **`back`** \u2013 retorna o \u00faltimo n\u00f3 da lista ou nulo.\n\n#### \u2705 Opera\u00e7\u00f5es com Node\n\n- **`search`** - retorna o Node que cont\u00e9m o elemento ou Null.\n- **`insert`** - insere um novo Node com valor antes da posi\u00e7\u00e3o desse n\u00f3.\n- **`remove`** - remove o n\u00f3 e retorna o n\u00f3 que ficou no lugar dele. Se era o \u00fatlimo, retorna Null.\n\n## Shell\n\n```bash\n\n#TEST_CASE init e empty show\n$show\n[]\n$end\n\n```\n\n```bash\n#TEST_CASE push_front <value ...>\n$push_front 1 2 3 4\n$show\n[4, 3, 2, 1]\n$push_front 9 6\n$show\n[6, 9, 4, 3, 2, 1]\n$end\n```\n\n```bash\n#TEST_CASE size\n$size\n0\n$push_front 4\n$show\n[4]\n$size\n1\n$push_front 3 2 1\n$show\n[1, 2, 3, 4]\n$size\n4\n$end\n```\n\n```bash\n#TEST_CASE clear\n$push_front 1 2 3 4\n$show\n[4, 3, 2, 1]\n$clear\n$show\n[]\n$clear\n$show\n[]\n$push_front 1 2 3 4\n$show\n[4, 3, 2, 1]\n$end\n```\n\n```bash\n#TEST_CASE push_back <value ...>\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4]\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4, 1, 2, 3, 4]\n$push_front 0 3\n$show\n[3, 0, 1, 2, 3, 4, 1, 2, 3, 4]\n$end\n```\n\n```bash\n#TEST_CASE pop_front\n$push_back 1 3 4 5\n$show\n[1, 3, 4, 5]\n$pop_front\n$show\n[3, 4, 5]\n$pop_front\n$show\n[4, 5]\n$pop_front\n$show\n[5]\n$pop_front\n$show\n[]\n$pop_front\n$show\n[]\n$end\n```\n\n```bash\n#TEST_CASE pop_back\n$push_back 1 3 4 5\n$show\n[1, 3, 4, 5]\n$pop_back\n$show\n[1, 3, 4]\n$pop_back\n$show\n[1, 3]\n$pop_back\n$show\n[1]\n$pop_back\n$show\n[]\n$pop_back\n$show\n[]\n$end\n```\n\nPercorrendo a lista usando front e back\n\n```bash\n#TEST_CASE walking\n$push_back 1 2 3 4 5 6\n$walk\n[1, 2, 3, 4, 5, 6]\n[6, 5, 4, 3, 2, 1]\n$clear\n$walk\n[]\n[]\n```\n\nPara executar a inser\u00e7\u00e3o e remo\u00e7\u00e3o de n\u00f3s, vamos usar o comando `search` para encontrar o n\u00f3 que queremos manipular.\nE depois usar o comando `replace`, `insert` ou `remove` para fazer a opera\u00e7\u00e3o desejada.\n\n```bash\n#TEST_CASE search and replace\n# replace <value_to_search> <value_to_replace>\n$push_back 1 2 3 4 5\n$replace 3 9\n$show\n[1, 2, 9, 4, 5]\n$replace 1 8\n$show\n[8, 2, 9, 4, 5]\n$replace 5 7\n$show\nfail: not found\n```\n\n```bash\n#TEST_CASE search and insert\n# insert <value_to_search> <value_to_insert_before>\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$insert 3 9\n$show\n[1, 2, 9, 3, 4, 5]\n$insert 1 8\n$show\n[8, 1, 2, 9, 3, 4, 5]\n$insert 5 7\n$show\n[8, 1, 2, 9, 3, 4, 7, 5]\n$insert 6 7\n$show\n[8, 1, 2, 9, 3, 4, 7, 6, 5]\n$insert 1 7\n$show\n[8, 7, 1, 2, 9, 3, 4, 7, 6, 5]\n$insert 10 7\nfail: not found\n$show\n[8, 7, 1, 2, 9, 3, 4, 7, 6, 5]\n```\n\n```bash\n#TEST_CASE search and remove\n# remove <value_to_search>\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$remove 3\n$show\n[1, 2, 4, 5]\n$remove 1\n$show\n[2, 4, 5]\n$remove 7\nfail: not found\n$show\n[2, 4, 5]\n\n------------------------------------------   LISTA DUPLA 2 ----------------------------------------------------------\n\n```bash\n#TEST_CASE erase <value>\n$push_back 1 2 3 4 7 6 8 5\n$show\n[1, 2, 3, 4, 7, 6, 8, 5]\n$erase 4\n$show\n[1, 2, 3, 7, 6, 8, 5]\n$erase 5\n$show\n[1, 2, 3, 7, 6, 8]\n$erase 1\n$show\n[2, 3, 7, 6, 8]\n$erase 5\n$show\n[2, 3, 7, 6]\n```\n\n```bash\n#TEST_CASE erase_all\n$push_back 4 4 1 2 3 4 4 4 7 6 8 5 4 4\n$show\n[4, 4, 1, 2, 3, 4, 4, 4, 7, 6, 8, 5, 4, 4]\n$erase_all 4\n$show\n[1, 2, 3, 7, 6, 8, 5]\n$erase_all 1\n$show\n[2, 3, 7, 6, 8, 5]\n```\n\n```bash\n#TEST_CASE index_of the first occurrence\n$push_back 1 2 3 4 5 9 8 7 6 5\n$show\n[1, 2, 3, 4, 5, 9, 8, 7, 6, 5]\n$index_of 5\n4\n$index_of 1\n0\n$index_of 9\n5\n```\n\n```bash\n#TEST_CASE equals_i \n$push_back\n$equals [ ]\ntrue\n$push_back 1\n$equals [ 1 ]\ntrue\n$clear\n$push_back 1 2 3 4 5\n$equals [ 1 2 3 4 5 ]\ntrue\n$clear\n$push_back 1\n$equals [ 1 2 ]\nfalse\n```\n\n```bash\n#TEST_CASE equals_ii\n$push_back 1\n$equals [ 1 2 ]\nfalse\n$clear\n$push_back 1 2 3\n$equals [ 1 2 ]\nfalse\n$clear\n$push_back 1 2 3\n$equals [ 1 3 2 ]\nfalse\n$clear\n```\n\n```bash\n#TEST_CASE clone\n$push_back 1 2 3 4 5\n$clone\nthis  -> [1, 2, 3, 4, 5]\nclone -> [1, 2, 3, 4, 5]\nclone sucess\n```\n\n```bash\n#TEST_CASE iterator\n$push_back 1 2 3 4 5\n$iter\n[ 1 2 3 4 5 ]\n$rev_iter\n[ 5 4 3 2 1 ]\n$cyclic 14\n[ 1 2 3 4 5 1 2 3 4 5 1 2 3 5 ]\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT init e empty show\nshow\nend\n======== EXPECT\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT push_front <value ...>\npush_front 1 2 3 4\nshow\npush_front 9 6\nshow\nend\n======== EXPECT\n$push_front 1 2 3 4\n$show\n[4, 3, 2, 1]\n$push_front 9 6\n$show\n[6, 9, 4, 3, 2, 1]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT size\nsize\npush_front 4\nshow\nsize\npush_front 3 2 1\nshow\nsize\nend\n======== EXPECT\n$size\n0\n$push_front 4\n$show\n[4]\n$size\n1\n$push_front 3 2 1\n$show\n[1, 2, 3, 4]\n$size\n4\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT clear\npush_front 1 2 3 4\nshow\nclear\nshow\nclear\nshow\npush_front 1 2 3 4\nshow\nend\n======== EXPECT\n$push_front 1 2 3 4\n$show\n[4, 3, 2, 1]\n$clear\n$show\n[]\n$clear\n$show\n[]\n$push_front 1 2 3 4\n$show\n[4, 3, 2, 1]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT push_back <value ...>\npush_back 1 2 3 4\nshow\npush_back 1 2 3 4\nshow\npush_front 0 3\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4]\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4, 1, 2, 3, 4]\n$push_front 0 3\n$show\n[3, 0, 1, 2, 3, 4, 1, 2, 3, 4]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT pop_front\npush_back 1 3 4 5\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\nend\n======== EXPECT\n$push_back 1 3 4 5\n$show\n[1, 3, 4, 5]\n$pop_front\n$show\n[3, 4, 5]\n$pop_front\n$show\n[4, 5]\n$pop_front\n$show\n[5]\n$pop_front\n$show\n[]\n$pop_front\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT pop_back\npush_back 1 3 4 5\nshow\npop_back\nshow\npop_back\nshow\npop_back\nshow\npop_back\nshow\npop_back\nshow\nend\n======== EXPECT\n$push_back 1 3 4 5\n$show\n[1, 3, 4, 5]\n$pop_back\n$show\n[1, 3, 4]\n$pop_back\n$show\n[1, 3]\n$pop_back\n$show\n[1]\n$pop_back\n$show\n[]\n$pop_back\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT walking\npush_back 1 2 3 4 5 6\nwalk\nclear\nwalk\nend\n======== EXPECT\n$push_back 1 2 3 4 5 6\n$walk\n[1, 2, 3, 4, 5, 6]\n[6, 5, 4, 3, 2, 1]\n$clear\n$walk\n[]\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT search and replace\npush_back 1 2 3 4 5 6\nwalk\nclear\nwalk\npush_back 1 2 3 4 5\nreplace 3 9\nshow\nreplace 1 8\nshow\nreplace 5 7\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4 5 6\n$walk\n[1, 2, 3, 4, 5, 6]\n[6, 5, 4, 3, 2, 1]\n$clear\n$walk\n[]\n[]\n$push_back 1 2 3 4 5\n$replace 3 9\n$show\n[1, 2, 9, 4, 5]\n$replace 1 8\n$show\n[8, 2, 9, 4, 5]\n$replace 5 7\n$show\nfail: not found\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT search and insert\npush_back 1 2 3 4 5 6\nwalk\nclear\nwalk\npush_back 1 2 3 4 5\nreplace 3 9\nshow\nreplace 1 8\nshow\nreplace 5 7\nshow\npush_back 1 2 3 4 5\nshow\ninsert 3 9\nshow\ninsert 1 8\nshow\ninsert 5 7\nshow\ninsert 6 7\nshow\ninsert 1 7\nshow\ninsert 10 7\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4 5 6\n$walk\n[1, 2, 3, 4, 5, 6]\n[6, 5, 4, 3, 2, 1]\n$clear\n$walk\n[]\n[]\n$push_back 1 2 3 4 5\n$replace 3 9\n$show\n[1, 2, 9, 4, 5]\n$replace 1 8\n$show\n[8, 2, 9, 4, 5]\n$replace 5 7\n$show\nfail: not found\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$insert 3 9\n$show\n[1, 2, 9, 3, 4, 5]\n$insert 1 8\n$show\n[8, 1, 2, 9, 3, 4, 5]\n$insert 5 7\n$show\n[8, 1, 2, 9, 3, 4, 7, 5]\n$insert 6 7\n$show\n[8, 1, 2, 9, 3, 4, 7, 6, 5]\n$insert 1 7\n$show\n[8, 7, 1, 2, 9, 3, 4, 7, 6, 5]\n$insert 10 7\nfail: not found\n$show\n[8, 7, 1, 2, 9, 3, 4, 7, 6, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT search and remove\npush_back 1 2 3 4 5 6\nwalk\nclear\nwalk\npush_back 1 2 3 4 5\nreplace 3 9\nshow\nreplace 1 8\nshow\nreplace 5 7\nshow\npush_back 1 2 3 4 5\nshow\ninsert 3 9\nshow\ninsert 1 8\nshow\ninsert 5 7\nshow\ninsert 6 7\nshow\ninsert 1 7\nshow\ninsert 10 7\nshow\npush_back 1 2 3 4 5\nshow\nremove 3\nshow\nremove 1\nshow\nremove 7\nshow\n======== EXPECT\n$push_back 1 2 3 4 5 6\n$walk\n[1, 2, 3, 4, 5, 6]\n[6, 5, 4, 3, 2, 1]\n$clear\n$walk\n[]\n[]\n$push_back 1 2 3 4 5\n$replace 3 9\n$show\n[1, 2, 9, 4, 5]\n$replace 1 8\n$show\n[8, 2, 9, 4, 5]\n$replace 5 7\n$show\nfail: not found\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$insert 3 9\n$show\n[1, 2, 9, 3, 4, 5]\n$insert 1 8\n$show\n[8, 1, 2, 9, 3, 4, 5]\n$insert 5 7\n$show\n[8, 1, 2, 9, 3, 4, 7, 5]\n$insert 6 7\n$show\n[8, 1, 2, 9, 3, 4, 7, 6, 5]\n$insert 1 7\n$show\n[8, 7, 1, 2, 9, 3, 4, 7, 6, 5]\n$insert 10 7\nfail: not found\n$show\n[8, 7, 1, 2, 9, 3, 4, 7, 6, 5]\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$remove 3\n$show\n[1, 2, 4, 5]\n$remove 1\n$show\n[2, 4, 5]\n$remove 7\nfail: not found\n$show\n[2, 4, 5]\n------------------------------------------   LISTA DUPLA 2 ----------------------------------------------------------\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do Construtor\ntest_constructor\n======== EXPECT\nTESTE Construtor\nOk\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do has_info\ntest_has_info\n======== EXPECT\nTESTE has_info\n[30 -> 20 -> 15 -> 10]\nhas_info -1 == 0\nhas_info 0 == 0\nhas_info 5 == 0\nhas_info 10 == 1\nhas_info 15 == 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do get\ntest_get\n======== EXPECT\nTESTE get\n[30 -> 20 -> 15 -> 10]\nget 0 == 30\nget 1 == 20\nget 2 == 15\nget 3 == 10\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do push_front\ntest_push_front\n======== EXPECT\nTESTE push_front\npush_front 10\npush_front 15\npush_front 20\npush_front 30\nEsperado: [30 -> 20 -> 15 -> 10]\n[30 -> 20 -> 15 -> 10]\n4 Nos alocados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do push_back\ntest_push_back\n======== EXPECT\nTESTE push_back\npush_back 10\npush_back 15\npush_back 20\npush_back 30\nExpected: [10 -> 15 -> 20 -> 30]\n[10 -> 15 -> 20 -> 30]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do pop_front\ntest_pop_front\n======== EXPECT\nTESTE pop_front\nEsperado: [30 -> 20 -> 15 -> 10]\n[30 -> 20 -> 15 -> 10]\npop_front\nEsperado: [20 -> 15 -> 10]\n[20 -> 15 -> 10]\npop_front\nEsperado: [15 -> 10]\n[15 -> 10]\npop_front\nEsperado: [10]\n[10]\npop_front\nEsperado: []\n[]\npop_front\nEsperado: []\n[]\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do pop_back\ntest_pop_back\n======== EXPECT\nTESTE pop_back\nEsperado: [30 -> 20 -> 15 -> 10]\n[30 -> 20 -> 15 -> 10]\npop_back\nEsperado: [30 -> 20 -> 15]\n[30 -> 20 -> 15]\npop_back\nEsperado: [30 -> 20]\n[30 -> 20]\npop_back\nEsperado: [30]\n[30]\npop_back\nEsperado: []\n[]\npop_back\nEsperado: []\n[]\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do clear\ntest_clear\n======== EXPECT\nTESTE clear\nEsperado: [30 -> 20 -> 15 -> 10]\n[30 -> 20 -> 15 -> 10]\nclear\nEsperado: []\n[]\nclear\nEsperado: []\n[]\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do length\ntest_length\n======== EXPECT\nTESTE length\n[]\nlength  == 0\n[42]\nlength  == 1\n[42 -> 42]\nlength  == 2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do empty\ntest_empty\n======== EXPECT\nTESTE empty\n[]\nempty  == 1\n[42]\nempty  == 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste do destrutor\ntest_destructor\n======== EXPECT\nTESTE destructor\nExistem Nos nao foram liberados na memoria\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "lib.cpp",
                "contents": "/*       QUESTIONARIO (RESPONDA COM HONESTIDADE)\n\nQ1 - Voce resolveu esse problema em grupo? Se sim, indique com quem fez.\n\n\n\nQ2 - Quanto tempo voc\u00ea demorou para resolve-lo?\n\n\n\nQ3 - Voce considera o problema facil, medio ou dificil? Qual maior dificuldade encontrada?\n\n\n\n*/\n\n/*       ATIVIDADE        */\n#include <iostream>\n\n// Node: classe utilizada para representar um No\n// Nao altere essa classe\nstruct Node {\n    int info; // Informacao salva pelo usuario na lista\n    Node *next; // Ponteiro para o proximo elemento da lista\n\n    Node(); // Construtor\n    Node(int info, Node *next=nullptr); // Construtor\n    ~Node(); // Destrutor\n};\n\n// Singly Linked List ou\n// Lista Simplesmente Encadeada\n// Altere somente os campos marcados com TODO\nstruct SLinkedList {\n    Node *head;   // Ponteiro para a cabeca da lista (primeiro No)\n\n    SLinkedList(){\n        // --\n        this->head = nullptr;\n    }\n\n    ~SLinkedList(){ // Destrutor\n        // TODO\n        // dica: implemente o metodo clear e apenas o chame\n        // --\n        this->clear();\n    }\n\n    // Retorna true se uma informacao pertence a lista, false caso contrario\n    // index: posicao do elemento\n    bool hasInfo(int info){\n        // TODO: Complexidade O(n)\n        // --\n        for(Node* node = head; node != nullptr; node = node->next){\n            if(node->info == info){\n                return true;\n            }\n        }\n        return false;\n        (void) info;\n        return false;\n\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.hasInfo(20) == true\n    // L.hasInfo(100) == false\n\n    // Retorna a informacao dada uma posicao\n    // index: posicao do elemento\n    int get(int index){\n        // TODO: Complexidade O(n)\n        \n        // --\n        int i = 0;\n        for(Node* node = head; node != nullptr; node = node->next){\n            if(i == index){\n                return node->info;\n            }\n            i++;\n        }\n        return -1;\n        (void) index;\n        return 0;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.get(0) == 10\n    // L.get(1) == 20\n    // L.get(2) == 15\n\n\n    // operador[] sobrecarregado. Retorna a \n    // informacao do elemento na posicao 'index'\n    int operator[](int index){\n        return get(index);\n    }\n\n\n    // Adiciona um elemento no inicio da lista\n    // info: informacao do elemento a ser inserido\n    void push_front(int info){\n        Node* newNode = new Node(info, nullptr);\n        newNode->next = head;\n        head = newNode;\n        // Ou simplesmente\n        // head = new Node(info, head);\n        // --\n        newNode->info = info;\n        (void) info;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.push_front(30)\n    // L == 30 -> 10 -> 20 -> 15 -> 50\n\n\n    // Adiciona um elemento ao final da lista\n    // info: informacao do elemento a ser inserido\n    void push_back(int info){\n        // TODO: Complexidade O(n)\n        \n        // --\n        Node* newNode = new Node(info, nullptr);\n        if(head == nullptr){\n            head = newNode;\n            return;\n        }\n        Node* last = head;\n        while(last->next != nullptr){\n            last = last->next;\n        }\n        last->next = newNode;\n\n        (void) info;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.push_front(30)\n    // L == 10 -> 20 -> 15 -> 50 -> 30\n\n\n    // Remove o primeiro elemento da lista.\n    // Nao faz nada se a lista esta vazia\n    void pop_front(){\n        // TODO: Complexidade O(1)\n        // --\n        if(head == nullptr){\n            return;\n        }\n        Node* node = head;\n        head = head->next;\n        delete node;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.pop_front()\n    // L == 20 -> 15 -> 50\n\n\n    // Remove o ultimo elemento da lista.\n    // Nao faz nada se a lista esta vazia\n    void pop_back(){\n        // TODO: Complexidade O(n)\n        // --\n        if(head == nullptr){\n            return;\n        }\n        if(head->next == nullptr){\n            delete head;\n            head = nullptr;\n            return;\n        }\n        Node* last = head;\n        while(last->next->next != nullptr){\n            last = last->next;\n        }\n        delete last->next;\n        last->next = nullptr;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.pop_back()\n    // L == 10 -> 20 -> 15\n\n\n    // Deixa a lista vazia, com zero elementos\n    void clear(){\n        // TODO: Complexidade O(n)\n        // dica: voce pode usar os metodos pop_front e empty\n        // --\n        while(!empty()){\n            pop_front();\n        }\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.clear()\n    // L == []\n\n\n    // Retorna o numero de elementos da lista\n    int length(){\n        // TODO: Complexidade O(n)\n\n        // --\n        int len = 0;\n        for(Node* node = head; node != nullptr; node = node->next){\n            len++;\n        }\n        return len;\n        return 0;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.length() == 4\n\n\n    // Devolve true se cheia e false caso contrario\n    bool empty(){\n        // TODO\n        // --\n        return head == nullptr;\n\n        return false;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.empty() == false\n    // L == ''\n    // L.empty() == true\n\n\n    // Dado um no, retorna o proximo no da lista\n    // Retorna NULL caso nao exista\n    Node* successor(Node* node){\n        return node->next;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.successor(No 20) == No 15\n    // L.successor(No 50) == NULL\n\n\n    // Dado um No, retorna o proximo No da lista\n    // Retorna NULL caso nao exista\n    Node* predecessor(Node* node){\n        // TODO: complexidade O(n)\n        //--\n        if(node == head){\n            return nullptr;\n        }\n        for(Node* n = head; n != nullptr; n = n->next){\n            if(n->next == node){\n                return n;\n            }\n        }\n        return nullptr;\n        (void) node;\n        return nullptr;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.predecessor([20]) == [10]\n    // L.predecessor([10]) == NULL\n\n    // Printa as informacoes da lista\n    void print(){\n        std::cout << \"[\";\n        for(Node* node = head; node != nullptr; node = node->next){\n            std::cout << node->info;\n            if(node->next != nullptr)\n                std::cout << \" -> \";\n        }\n        std::cout << \"]\" << std::endl;\n    }    \n};\n",
                "type": "show"
            },
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao\n#include <iostream>\n#include <map>\n#include \"lib.cpp\"\n//#include \"solution_lib.cpp\"\n\nusing std::cout;\nusing std::endl;\n\nbool LOG_ALLOCATED = false;\nstd::map<void*, int> allocated_nodes_status = {};\nstd::map<int, int> mapa = {};\nconst int ALLOCATED = 1;\nconst int DELETED = 2;\n\n// Salvar Nos alocados\nNode::Node() {\n    allocated_nodes_status[this] = ALLOCATED;\n}\n\nNode::Node(int info, Node* next){\n    allocated_nodes_status[this] = ALLOCATED;\n    this->info = info;\n    this->next = next;\n}\nNode::~Node() {\n    allocated_nodes_status[this] = DELETED;\n}\n\ntemplate <typename K, typename V>\nvoid printMap(const std::map<K, V>& m) {\n    for (const auto& pair : m) {\n        std::cout << \"Key: \" << pair.first << \", Value: \" << pair.second << std::endl;\n    }\n}\n\n/////////////// TESTE CONSTRUCT ///////////////\n\nvoid test_constructor(){\n    cout << \"TESTE Construtor\" << endl;\n    SLinkedList* list = new SLinkedList(); \n\n    if(list->head == nullptr){\n        cout << \"Ok\" << endl;\n    }else{\n        cout << \"Atributos incorretos\";\n    }\n}\n\n\n/////////////// TESTE HAS_INFO ///////////////\n\nvoid test_has_info(){\n    cout << \"TESTE has_info\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    list.print();\n    cout << \"has_info \" << -1  << \" == \" << list.hasInfo(-1) << endl;\n    cout << \"has_info \" << 0  << \" == \" << list.hasInfo(0) << endl;\n    cout << \"has_info \" << 5  << \" == \" << list.hasInfo(5) << endl;\n    cout << \"has_info \" << 10 << \" == \" << list.hasInfo(10) << endl;\n    cout << \"has_info \" << 15 << \" == \" << list.hasInfo(15) << endl;\n}\n\n/////////////// TESTE GET ///////////////\n\nvoid test_get(){\n    cout << \"TESTE get\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n    // 30 20 15 10\n\n    list.print();\n    cout << \"get \" << 0 << \" == \" << list.get(0) << endl;\n    cout << \"get \" << 1 << \" == \" << list.get(1) << endl;\n    cout << \"get \" << 2 << \" == \" << list.get(2) << endl;\n    cout << \"get \" << 3 << \" == \" << list.get(3) << endl;\n}\n\n\n/////////////// TESTE PUSH_FRONT ///////////////\n\nvoid test_push_front(){\n    cout << \"TESTE push_front\" << endl;\n    SLinkedList list;\n\n    cout << \"push_front \" << 10 << endl;\n    cout << \"push_front \" << 15 << endl;\n    cout << \"push_front \" << 20 << endl;\n    cout << \"push_front \" << 30 << endl;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n    cout << allocated_nodes_status.size() << \" Nos alocados\" << endl;\n}\n\n/////////////// TESTE PUSH_BACK ///////////////\n\nvoid test_push_back(){\n    cout << \"TESTE push_back\" << endl;\n    SLinkedList list;\n\n    cout << \"push_back \" << 10 << endl;\n    cout << \"push_back \" << 15 << endl;\n    cout << \"push_back \" << 20 << endl;\n    cout << \"push_back \" << 30 << endl;\n\n    list.push_back(10);\n    list.push_back(15);\n    list.push_back(20);\n    list.push_back(30);\n\n    cout << \"Expected: [10 -> 15 -> 20 -> 30]\" << endl;\n    list.print();\n}\n\n\n\n/////////////// TESTE POP_FRONT ///////////////\n\nvoid test_pop_front(){\n    cout << \"TESTE pop_front\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    Node* node0 = list.head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: [20 -> 15 -> 10]\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: [15 -> 10]\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: [10]\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE POP_BACK ///////////////\n\nvoid test_pop_back(){\n    cout << \"TESTE pop_back\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    Node* node0 = list.head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: [30 -> 20 -> 15]\" << endl;\n    list.print();\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: [30 -> 20]\" << endl;\n    list.print();\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: [30]\" << endl;\n    list.print();\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE CLEAR ///////////////\n\nvoid test_clear(){\n    cout << \"TESTE clear\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    Node* node0 = list.head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n\n    cout << \"clear\" << endl; list.clear();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    cout << \"clear\" << endl; list.clear();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE LENGTH ///////////////\n\nvoid test_length(){\n    cout << \"TESTE length\" << endl;\n    SLinkedList list;\n\n    list.print();\n    cout << \"length \" << \" == \" << list.length() << endl;    \n    list.push_front(42);\n\n    list.print();\n    cout << \"length \" << \" == \" << list.length() << endl;    \n    list.push_front(42);\n\n    list.print();\n    cout << \"length \" << \" == \" << list.length() << endl;\n}\n\n\n/////////////// TESTE EMPTY ///////////////\n\nvoid test_empty(){\n    cout << \"TESTE empty\" << endl;\n    SLinkedList list;\n\n    list.print();\n    cout << \"empty \" << \" == \" << list.empty() << endl;    \n    list.push_front(42);\n\n    list.print();\n    cout << \"empty \" << \" == \" << list.empty() << endl;    \n}\n\n/////////////// TESTE DESTRUCTOR ///////////////\n\nvoid test_destructor(){\n    cout << \"TESTE destructor\" << endl;\n    SLinkedList* list = new SLinkedList;\n\n    list->push_front(10);\n    list->push_front(15);\n    list->push_front(20);\n    list->push_front(30);\n\n    Node* node0 = list->head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    delete list;\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// FIM TESTES ///////////////\n\nint main(){\n    std::string input;\n    std::cin >> input;\n\n    if(input == \"test_constructor\") test_constructor();\n    if(input == \"test_has_info\") test_has_info();\n    if(input == \"test_get\") test_get();\n    if(input == \"test_push_front\") test_push_front();\n    if(input == \"test_push_back\") test_push_back();\n    if(input == \"test_pop_front\") test_pop_front();\n    if(input == \"test_pop_back\") test_pop_back();\n    if(input == \"test_clear\") test_clear();\n    if(input == \"test_length\") test_length();\n    if(input == \"test_empty\") test_empty();\n    if(input == \"test_destructor\") test_destructor();\n}\n",
                "type": "show"
            }
        ]
    }
}
