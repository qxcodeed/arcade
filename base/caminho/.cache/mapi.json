{
    "title": "@caminho: Menor caminho entre dois pontos",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@caminho: Menor caminho entre dois pontos</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@caminho: Menor caminho entre dois pontos</h1>\n            <h1 id=\"menor-caminho-entre-dois-pontos\">Menor caminho entre dois pontos</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/caminho/cover.jpg\" /></p>\n<p>Dessa vez, o labirinto n\u00e3o \u00e9 perfeito e existem m\u00faltiplos caminhos que podem levar ao destino. Seu objetivo \u00e9 implementar o algoritmo de floodfill pathfinding.</p>\n<p>Leia uma matriz que representa um labirinto perfeito, os pontos de inicio e fim e imprima o labirinto mostrando o caminho entre os pontos.</p>\n<ul>\n<li>Entrada</li>\n<li>Linha 1: n\u00famero de linhas e das colunas da matriz</li>\n<li>\n<p>Linhas subsequentes: matriz composta por 4 caracteres</p>\n<ul>\n<li><code>#</code> representa uma parede</li>\n<li><code></code> representa um corredor por onde se pode andar</li>\n<li><code>I</code> representa o in\u00edcio</li>\n<li><code>F</code> representa o fim</li>\n</ul>\n</li>\n<li>\n<p>Sa\u00edda</p>\n</li>\n<li>Imprima a matriz utilizando o char <code>.</code> para mostrar o caminho entre in\u00edcio e fim</li>\n</ul>\n<h2 id=\"sugestao-do-algoritmo\">Sugest\u00e3o do algoritmo</h2>\n<pre class=\"codehilite\"><code class=\"language-c\">bool procurar_saida(vector&lt;string&gt; &amp;mat, Pos inicio, Pos fim){\n    iniciar uma matriz de dist\u00e2ncias\n    iniciar a fila\n    inserir a posicao inicial da fila e marc\u00e1-la com 0 na matriz de dist\u00e2ncias\n    enquanto a fila n\u00e3o estiver vazia\n        pegue a posi\u00e7\u00e3o da frente\n        para cada vizinho 'viz' de frente\n            se ele n\u00e3o eh parede a ser percorrido\n                marque esse vizinho na matriz\n                na matriz de dist\u00e2ncia, coloque 1 a mais que a posi\u00e7\u00e3o de 'frente'\n                se esse 'viz' for o destino\n                    return\n        fila.pop_front();\n    }\n    return false;\n}\n</code></pre>\n\n<p>Ap\u00f3s encontrar a sa\u00edda, refa\u00e7a o caminho usando a matriz de dist\u00e2ncia para chegar no elemento in\u00edcio.</p>\n<h2 id=\"dica\">Dica</h2>\n<ul>\n<li>inicializar a matriz de distancia</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-cpp\">    vector&lt;vector&lt;int&gt;&gt; mat(nl, vector&lt;int&gt;(nc, -1));\n</code></pre>\n\n<ul>\n<li>inicializar a fila</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-cpp\">    queue&lt;Pos&gt; fila;\n</code></pre>\n\n<ul>\n<li>algoritmo de retorno</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-cpp\">    ponto = destino\n    enquanto nao chegar na origem\n        pega os vizinho de ponto\n            se mat[viz] == mat[ponto] - 1\n                ponto = viz\n                break\n</code></pre>\n\n<h2 id=\"testes\">Testes</h2>\n<pre class=\"codehilite\"><code class=\"language-txt\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n10 20\n####################\n#   # # # #   # ## #\n###       ###      #\n##  ## ##     ### ##\n# I##   ### ###    #\n# ##### #   #   ## #\n# #     ## ### ##  #\n# ## ####   #  #  ##\n#   F     #   ## ###\n####################\n========\n####################\n#   # # # #   # ## #\n###       ###      #\n##  ## ##     ### ##\n#..##   ### ###    #\n#.##### #   #   ## #\n#.#     ## ### ##  #\n#.## ####   #  #  ##\n#....     #   ## ###\n####################\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n10 30\n##############################\n#           ## # # ##       ##\n## # ## ## ##    # #  ## ##  #\n## ###  #I    ##   ####   ## #\n#  ##  ##### ### #   #  #  # #\n# ##  ## F ###   ### ####### #\n# ## ### # #   #   # ##   #  #\n#  #   # #   ##### # #  # # ##\n##   #     #     #     ##    #\n##############################\n========\n##############################\n#           ## # # ##       ##\n## # ## ## ##....# #  ## ##  #\n## ###  #.....##.  ####   ## #\n#  ##  ##### ###.#   #  #  # #\n# ##  ## ..###...### ####### #\n# ## ### #.#...#   # ##   #  #\n#  #   # #...##### # #  # # ##\n##   #     #     #     ##    #\n##############################\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre>\n\n<h2 id=\"help\">Help</h2>\n<p>Voc\u00ea pode usar esse c\u00f3digo como ajuda. Ele carrega a matriz e mostra. O m\u00e9todo <code>get_vizinhos</code> \u00e9 bem \u00fatil para iterar nos vizinhos de um ponto.</p>\n<pre class=\"codehilite\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct Pos{\n    int l;\n    int c;\n};\n\n//retorna um vetor com todos os vizinhos da posi\u00e7\u00e3o p\nvector&lt;Pos&gt; get_vizinhos(Pos p){\n    return {{p.l, p.c - 1}, {p.l - 1, p.c}, {p.l, p.c + 1}, {p.l + 1, p.c}};\n}\n\n\nint main(){\n    int nl = 0, nc = 0;\n    cin &gt;&gt; nl &gt;&gt; nc;\n    vector&lt;string&gt; mat(nl, &quot;&quot;); //come\u00e7a com nl strings &quot;&quot;\n    getchar();//remove \\n after nc\n    Pos inicio, fim;\n\n    //carregando matriz\n    for(int i = 0; i &lt; nl; i++)\n        getline(cin, mat[i]);\n\n    //procurando inicio e fim e colocando ' ' nas posi\u00e7\u00f5es iniciais\n    for(int l = 0; l &lt; nl; l++){\n        for(int c = 0; c &lt; nc; c++){\n            if(mat[l][c] == 'I'){\n                mat[l][c] = ' ';\n                inicio = Pos {l, c};\n            }\n            if(mat[l][c] == 'F'){\n                mat[l][c] = ' ';\n                fim = Pos {l, c};\n            }\n        }\n    }\n\n    for(string line : mat)\n        cout &lt;&lt; line &lt;&lt; endl;\n    cout &lt;&lt; &quot;       nl=&quot; &lt;&lt; nl &lt;&lt; &quot; nc=&quot; &lt;&lt; nc &lt;&lt; &quot;\\n&quot;;\n    cout &lt;&lt; &quot;inicio: l=&quot; &lt;&lt; inicio.l &lt;&lt; &quot; , c=&quot; &lt;&lt; inicio.c &lt;&lt; endl;\n    cout &lt;&lt; &quot;   fim: l=&quot; &lt;&lt; fim.l &lt;&lt; &quot; , c=&quot; &lt;&lt; fim.c &lt;&lt; endl;\n}\n</code></pre>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n10 20\n####################\n#   # # # #   # ## #\n###       ###      #\n##  ## ##     ### ##\n# I##   ### ###    #\n# ##### #   #   ## #\n# #     ## ### ##  #\n# ## ####   #  #  ##\n#   F     #   ## ###\n####################\n======== EXPECT\n####################\n#   # # # #   # ## #\n###       ###      #\n##  ## ##     ### ##\n#..##   ### ###    #\n#.##### #   #   ## #\n#.#     ## ### ##  #\n#.## ####   #  #  ##\n#....     #   ## ###\n####################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10 30\n##############################\n#           ## # # ##       ##\n## # ## ## ##    # #  ## ##  #\n## ###  #I    ##   ####   ## #\n#  ##  ##### ### #   #  #  # #\n# ##  ## F ###   ### ####### #\n# ## ### # #   #   # ##   #  #\n#  #   # #   ##### # #  # # ##\n##   #     #     #     ##    #\n##############################\n======== EXPECT\n##############################\n#           ## # # ##       ##\n## # ## ## ##....# #  ## ##  #\n## ###  #.....##.  ####   ## #\n#  ##  ##### ###.#   #  #  # #\n# ##  ## ..###...### ####### #\n# ## ### #.#...#   # ##   #  #\n#  #   # #...##### # #  # # ##\n##   #     #     #     ##    #\n##############################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10 20\n####################\n#   # # #I#F  # ## #\n###       ###      #\n##  ## ##   # ### ##\n#  ##   ### ###    #\n# ##### #       ## #\n# #     ## ### ##  #\n# ## ####   #  #  ##\n#         #   ## ###\n####################\n======== EXPECT\n####################\n#   # # #.#...# ## #\n###      .###..... #\n##  ## ##...# ###.##\n#  ##   ###.###... #\n# ##### #  .....## #\n# #     ## ### ##  #\n# ## ####   #  #  ##\n#         #   ## ###\n####################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10 30\n##############################\n#I #        ## # # ##       ##\n##   ## ## ##    # #  ## ##  #\n## ###  #     ##   ####   ## #\n#  ##  ###########   #  #  # #\n# ##  ##   # #   ### ####### #\n# ## ### ###   #   # ##   #  #\n#  # # # #   ##### # #  # # ##\n##         #     #     ##   F#\n##############################\n======== EXPECT\n##############################\n#..#....... ## # # ##       ##\n##...## ##.##....# #  ## ##  #\n## ###  # ....##...####   ## #\n#  ##  ###########...#  #  # #\n# ##  ##   # #   ###.####### #\n# ## ### ###   #   #.##...#  #\n#  # # # #   ##### #.#..#.# ##\n##         #     #  ...##....#\n##############################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n25 70\n######################################################################\n# #   #        ##   ##   #   #   ##      ##            ##    ##   # F#\n# # #   ######    #I#  #   # # #  ## # ###  # ### # ####  # ##  #   ##\n# # #####    ###### # ######   ##  # #  #  ## #   #      ##    #######\n# #  # ### # #   ## # # ## #######   ## ####### # ### # ##### ##     #\n# ##   #   ### #    # # #    #   ## ##   ##   # # #   #     ###  ### #\n#  ### ## ##   ####     # ## ## ###  ###    # # # # #######  ## ##   #\n##  ##     # ####   ###           ##  ####### # ###  ##   ##    #  # #\n###  ##### # ## # ###   # # ## ##  ##            ### #  #  ###### ## #\n# ##     ###  #   #   #####  #####  #### ## ####  #  # ## ##    # #  #\n# ######   ## ##### # #   ##     ## #     #   ###   #####  # ##   # ##\n#     ####  #       ### #  #### ##    ### ###   # #  #    ## ######  #\n# ### # ### ## ### ##   ## #  # #  ## # #   ### #### ## #### #  # ## #\n# #     # #  ####     #### ##     ##    ### # #  #    # #    ##   ## #\n# # ### # ## #    #####     # ## ######  #  # ## ## #   # ###### ##  #\n# #  ##    #   #### #   ###    ###    #### ##  #  ####### #   ##    ##\n# ##  #### ###### #   ####  ##  ## ##  #   #  ###  #      ## ##  #####\n#  ##  #        # # #    ## ###    ### ## ###   ## ## #####  #  ## # #\n##  ## ## ### #   # ## # #   ##### #   #  #   #### #  #   ## # ##    #\n###  #  ###   #####  # ### ### #     ### ## #   #  # ## #    #  ## ###\n# ## ##   #####   ## #   #     # ### #   ## ###   ## #  ### ###  #  ##\n# ##  ### #     #  # ## ######   # #   ###  # #####  # ## #   ## ##  #\n#  # ## # # ###### # ## #    ##### #####   ##    ## ## ## ## ##   ## #\n##      #        #    #   ##             #    ##    #      #    #    #\n######################################################################\n======== EXPECT\n######################################################################\n# #   #        ##   ##   #   #   ##      ##      ...   ##... ##...#..#\n# # #   ######    #.#  #   # # #  ## # ###  # ###.#.####..#.##..#...##\n# # #####    ######.# ######   ##  # #  #  ## #...#......##....#######\n# #  # ### # #   ##.# # ## #######   ## #######.# ### # ##### ##     #\n# ##   #   ### #   .# # #    #   ## ##   ##   #.# #   #     ###  ### #\n#  ### ## ##   ####.....# ## ## ###  ###    # #.# # #######  ## ##   #\n##  ##     # ####   ###...........##  ####### #.###  ##   ##    #  # #\n###  ##### # ## # ###   # # ## ##..##   ........ ### #  #  ###### ## #\n# ##     ###  #   #   #####  #####..####.## ####  #  # ## ##    # #  #\n# ######   ## ##### # #   ##     ##.#.... #   ###   #####  # ##   # ##\n#     ####  #       ### #  #### ## ...### ###   # #  #    ## ######  #\n# ### # ### ## ### ##   ## #  # #  ## # #   ### #### ## #### #  # ## #\n# #     # #  ####     #### ##     ##    ### # #  #    # #    ##   ## #\n# # ### # ## #    #####     # ## ######  #  # ## ## #   # ###### ##  #\n# #  ##    #   #### #   ###    ###    #### ##  #  ####### #   ##    ##\n# ##  #### ###### #   ####  ##  ## ##  #   #  ###  #      ## ##  #####\n#  ##  #        # # #    ## ###    ### ## ###   ## ## #####  #  ## # #\n##  ## ## ### #   # ## # #   ##### #   #  #   #### #  #   ## # ##    #\n###  #  ###   #####  # ### ### #     ### ## #   #  # ## #    #  ## ###\n# ## ##   #####   ## #   #     # ### #   ## ###   ## #  ### ###  #  ##\n# ##  ### #     #  # ## ######   # #   ###  # #####  # ## #   ## ##  #\n#  # ## # # ###### # ## #    ##### #####   ##    ## ## ## ## ##   ## #\n##      #        #    #   ##             #    ##    #      #    #    #\n######################################################################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n27 90\n##########################################################################################\n#I                 #                 #              # #   #   ## # ##   ##             F##\n####### ## ### ###   ##### ## # ## #   ### ##### ##   # #   #    # #  #  ## #### ######  #\n#     #  ###   # ##### ##  #  #  # #####   #     #  # # ## ##### #   ###  # ## # #    ## #\n# ## ###  ### ##     #    ### ## ####    #### ##### ###  #    #    #  #####  # # # ####  #\n# ##   ##     #  ##### ####   #     # ####  # #   #     ## ## #########   ##   # #  ##  ##\n#  ## ##########       #    #######   ## # ## # #   # #  ###      ##    #  # ### ##    ###\n# ##    # ##   # ######## #  #    #####  #    ##########  ##### #    #####    ##  # # ## #\n#  ####   #  #   #    # # ## # ##   #   ## ####        ####   ### ##   # ####  ## ###  # #\n## #  ###   ###### ##      #    ### ## ##  #  ## #####   ## #   ###  ###   #####    ##   #\n#  ##   ##### #    ####### ######   #     ### ## #  ####    ###   ####   #    ## # ##### #\n# #### ## #   # ####    ####   ### ### ####   #  ##    ###### ###      ######  # #  #  # #\n#   ##      # #  ##  # ##    #     # #  # ###   #### # # #  #   #########   ## # ## ##   #\n## ##  # #### ##  ####  # ########## ##   ##  ###    #   # ## #      ##   # #  # ##  # ###\n#  #  ##  ##   ##    ## #     #  ##   ###    ## ### ####   ## ###### #  # # # ##  ## #   #\n## # #### #  ###### ##  ##### ##    ### ######   #  #    ###  ##       ###### ###  # ### #\n#  #    # # ##   #     ##   # ### # #          #   #######   ##  # #####   #   ### #  ## #\n# ##### # #### #   # #    ### #   # # ### #### #####    #  ###  ####   # #   ### ####  ###\n# #     #  ##  # # #########  ## ## #   # #     #    # ## ###  ###   #   #####      ##   #\n# ## #####  # ## ###       # ##  #  ## ## ### # # ####    # # ## # ####### #   ### ##  # #\n# #     ###    ###   #####   ### # ##   #   ##### #  ###### # #  #    ##     # #   #  ## #\n# # # #  ##### #   ####  #####   #### #####       ##     #  #   #### ##  ## #### ### ### #\n# ### ## #   # # # #  # ##  ## #  ##   # ###############   ####   #  #  ##  # #  #     # #\n#   #### # # ### ####      ##  ##  ### # # #       #   # #    ###   ####### # # ## # ### #\n# #    ### #     ##   ## ###  ####   # #   # #####   #   #### # #####   # # #    #####   #\n# ## #     # # # #  #  #     ##    #     #   #     # # # #            #     # ##       # #\n##########################################################################################\n======== EXPECT\n##########################################################################################\n#..................#.................#..............# #...#   ## # ##   ## .............##\n####### ## ### ###...##### ## # ## #...### ##### ##.  #.#.. #    # #  #  ##.#### ######  #\n#     #  ###   # ##### ##  #  #  # #####   #     # .# #.##.##### #   ###  #.## # #    ## #\n# ## ###  ### ##     #    ### ## ####    #### #####.###. #....#    #  #####..# # # ####  #\n# ##   ##     #  ##### ####   #     # ####  # #   #.....## ##.#########...##.  # #  ##  ##\n#  ## ##########       #    #######   ## # ## # #   # #  ### .....##....#..#.### ##    ###\n# ##    # ##   # ######## #  #    #####  #    ##########  ##### #....#####... ##  # # ## #\n#  ####   #  #   #    # # ## # ##   #   ## ####        ####   ### ##   # ####  ## ###  # #\n## #  ###   ###### ##      #    ### ## ##  #  ## #####   ## #   ###  ###   #####    ##   #\n#  ##   ##### #    ####### ######   #     ### ## #  ####    ###   ####   #    ## # ##### #\n# #### ## #   # ####    ####   ### ### ####   #  ##    ###### ###      ######  # #  #  # #\n#   ##      # #  ##  # ##    #     # #  # ###   #### # # #  #   #########   ## # ## ##   #\n## ##  # #### ##  ####  # ########## ##   ##  ###    #   # ## #      ##   # #  # ##  # ###\n#  #  ##  ##   ##    ## #     #  ##   ###    ## ### ####   ## ###### #  # # # ##  ## #   #\n## # #### #  ###### ##  ##### ##    ### ######   #  #    ###  ##       ###### ###  # ### #\n#  #    # # ##   #     ##   # ### # #          #   #######   ##  # #####   #   ### #  ## #\n# ##### # #### #   # #    ### #   # # ### #### #####    #  ###  ####   # #   ### ####  ###\n# #     #  ##  # # #########  ## ## #   # #     #    # ## ###  ###   #   #####      ##   #\n# ## #####  # ## ###       # ##  #  ## ## ### # # ####    # # ## # ####### #   ### ##  # #\n# #     ###    ###   #####   ### # ##   #   ##### #  ###### # #  #    ##     # #   #  ## #\n# # # #  ##### #   ####  #####   #### #####       ##     #  #   #### ##  ## #### ### ### #\n# ### ## #   # # # #  # ##  ## #  ##   # ###############   ####   #  #  ##  # #  #     # #\n#   #### # # ### ####      ##  ##  ### # # #       #   # #    ###   ####### # # ## # ### #\n# #    ### #     ##   ## ###  ####   # #   # #####   #   #### # #####   # # #    #####   #\n# ## #     # # # #  #  #     ##    #     #   #     # # # #            #     # ##       # #\n##########################################################################################\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
