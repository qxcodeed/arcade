{
    "title": "@caminho: Fila: Menor caminho entre dois pontos",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@caminho: Fila: Menor caminho entre dois pontos</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Fila: Menor caminho entre dois pontos</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/caminho/cover.jpg\" /></p>\n<p>Dessa vez, o labirinto n\u00e3o \u00e9 perfeito e existem m\u00faltiplos caminhos que podem levar ao destino. Seu objetivo \u00e9 implementar o algoritmo de floodfill pathfinding.</p>\n<p>Leia uma matriz que representa um labirinto perfeito, os pontos de inicio e fim e imprima o labirinto mostrando o caminho entre os pontos.</p>\n<ul>\n<li>\n<p>Entrada</p>\n<ul>\n<li>Linha 1: n\u00famero de linhas e das colunas da matriz</li>\n<li>Linhas subsequentes: matriz composta por 4 caracteres<ul>\n<li><code>#</code> representa uma parede</li>\n<li><code></code> representa um corredor por onde se pode andar</li>\n<li><code>I</code> representa o in\u00edcio</li>\n<li><code>F</code> representa o fim</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Sa\u00edda</p>\n<ul>\n<li>Imprima a matriz utilizando o char <code>.</code> para mostrar o caminho entre in\u00edcio e fim</li>\n</ul>\n</li>\n</ul>\n<h2>Explica\u00e7\u00e3o</h2>\n<ul>\n<li>Nos algor\u00edtmos de queimada e fuga, utilizamos uma busca em profundidade (Depth-First Search, DFS) para encontrar um caminho. No entanto, isso n\u00e3o garante que o caminho encontrado seja o mais curto. No DFS, a gente explora um caminho o mais longe poss\u00edvel antes de retroceder. \u00c9 bom para encontrar qualquer caminho, mas n\u00e3o necessariamente o mais curto. Usava uma pilha.</li>\n<li>Para garantir que encontramos o caminho mais curto, utilizamos uma busca em largura (Breadth-First Search, BFS). A BFS explora todos os vizinhos de um n\u00f3 antes de avan\u00e7ar para o pr\u00f3ximo n\u00edvel. Isso garante que encontraremos o menor caminho em termos de n\u00famero de passos em um grafo n\u00e3o ponderado (como um labirinto onde cada passo custa o mesmo). E por isso usamos uma fila.</li>\n<li>A BFS funciona da seguinte forma:<ul>\n<li>Come\u00e7amos na posi\u00e7\u00e3o inicial e marcamos essa posi\u00e7\u00e3o como visitada.</li>\n<li>Colocamos a posi\u00e7\u00e3o inicial em uma fila.</li>\n<li>Enquanto a fila n\u00e3o estiver vazia, fazemos o seguinte:<ul>\n<li>Pegamos a posi\u00e7\u00e3o da frente da fila.</li>\n<li>Verificamos todos os vizinhos dessa posi\u00e7\u00e3o (cima, baixo, esquerda, direita).</li>\n<li>Se um vizinho n\u00e3o for uma parede e ainda n\u00e3o tiver sido visitado, marcamos esse vizinho como visitado, adicionamos \u00e0 fila e atualizamos a matriz de dist\u00e2ncias.</li>\n<li>Se encontrarmos o destino, podemos parar.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Sugest\u00e3o do algoritmo</h2>\n<div class=\"language-go highlight\"><pre><span></span><code><span class=\"nx\">crie</span><span class=\"w\"> </span><span class=\"nx\">uma</span><span class=\"w\"> </span><span class=\"nx\">fila</span><span class=\"w\"> </span><span class=\"nx\">queue</span>\n<span class=\"nx\">empilhe</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">ponto</span><span class=\"w\"> </span><span class=\"nx\">inicial</span><span class=\"w\"> </span><span class=\"nx\">na</span><span class=\"w\"> </span><span class=\"nx\">fila</span>\n<span class=\"nx\">crie</span><span class=\"w\"> </span><span class=\"nx\">um</span><span class=\"w\"> </span><span class=\"nx\">mapa</span><span class=\"w\"> </span><span class=\"nx\">para</span><span class=\"w\"> </span><span class=\"nx\">marcar</span><span class=\"w\"> </span><span class=\"nx\">os</span><span class=\"w\"> </span><span class=\"nx\">n\u00f3s</span><span class=\"w\"> </span><span class=\"nx\">visitados</span>\n<span class=\"nx\">marque</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">ponto</span><span class=\"w\"> </span><span class=\"nx\">inicial</span><span class=\"w\"> </span><span class=\"nx\">como</span><span class=\"w\"> </span><span class=\"nx\">visitado</span>\n<span class=\"nx\">crie</span><span class=\"w\"> </span><span class=\"nx\">um</span><span class=\"w\"> </span><span class=\"nx\">mapa</span><span class=\"w\"> </span><span class=\"nx\">caminho</span><span class=\"p\">&lt;</span><span class=\"nx\">Pos</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Pos</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nx\">para</span><span class=\"w\"> </span><span class=\"nx\">guardar</span><span class=\"w\"> </span><span class=\"nx\">quem</span><span class=\"w\"> </span><span class=\"nx\">\u00e9</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">anterior</span><span class=\"w\"> </span><span class=\"nx\">de</span><span class=\"w\"> </span><span class=\"nx\">cada</span><span class=\"w\"> </span><span class=\"nx\">n\u00f3</span>\n<span class=\"nx\">enquanto</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">fila</span><span class=\"w\"> </span><span class=\"nx\">n\u00e3o</span><span class=\"w\"> </span><span class=\"nx\">estiver</span><span class=\"w\"> </span><span class=\"nx\">vazia</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nx\">desempilhe</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">n\u00f3</span><span class=\"w\"> </span><span class=\"nx\">atual</span><span class=\"w\"> </span><span class=\"nx\">da</span><span class=\"w\"> </span><span class=\"nx\">fila</span>\n<span class=\"w\">    </span><span class=\"nx\">se</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">n\u00f3</span><span class=\"w\"> </span><span class=\"nx\">atual</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">destino</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"nx\">pare</span>\n<span class=\"w\">    </span><span class=\"nx\">para</span><span class=\"w\"> </span><span class=\"nx\">cada</span><span class=\"w\"> </span><span class=\"nx\">vizinho</span><span class=\"w\"> </span><span class=\"nx\">do</span><span class=\"w\"> </span><span class=\"nx\">n\u00f3</span><span class=\"w\"> </span><span class=\"nx\">atual</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"nx\">se</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">vizinho</span><span class=\"w\"> </span><span class=\"nx\">n\u00e3o</span><span class=\"w\"> </span><span class=\"nx\">foi</span><span class=\"w\"> </span><span class=\"nx\">visitado</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"nx\">n\u00e3o</span><span class=\"w\"> </span><span class=\"nx\">\u00e9</span><span class=\"w\"> </span><span class=\"nx\">uma</span><span class=\"w\"> </span><span class=\"nx\">parede</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"nx\">marque</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">vizinho</span><span class=\"w\"> </span><span class=\"nx\">como</span><span class=\"w\"> </span><span class=\"nx\">visitado</span>\n<span class=\"w\">            </span><span class=\"nx\">adicione</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">vizinho</span><span class=\"w\"> </span><span class=\"nx\">na</span><span class=\"w\"> </span><span class=\"nx\">fila</span>\n<span class=\"w\">            </span><span class=\"nx\">registre</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">n\u00f3</span><span class=\"w\"> </span><span class=\"nx\">atual</span><span class=\"w\"> </span><span class=\"nx\">como</span><span class=\"w\"> </span><span class=\"nx\">anterior</span><span class=\"w\"> </span><span class=\"nx\">do</span><span class=\"w\"> </span><span class=\"nx\">vizinho</span><span class=\"w\"> </span><span class=\"nx\">no</span><span class=\"w\"> </span><span class=\"nx\">mapa</span><span class=\"w\"> </span><span class=\"nx\">caminho</span>\n<span class=\"nx\">utilize</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">mapa</span><span class=\"w\"> </span><span class=\"nx\">caminho</span><span class=\"w\"> </span><span class=\"nx\">para</span><span class=\"w\"> </span><span class=\"nx\">reconstruir</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">caminho</span>\n</code></pre></div>\n<h2>Testes</h2>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n10 20\n####################\n#   # # # #   # ## #\n###       ###      #\n##  ## ##     ### ##\n# I##   ### ###    #\n# ##### #   #   ## #\n# #     ## ### ##  #\n# ## ####   #  #  ##\n#   F     #   ## ###\n####################\n========\n####################\n#   # # # #   # ## #\n###       ###      #\n##  ## ##     ### ##\n#..##   ### ###    #\n#.##### #   #   ## #\n#.#     ## ### ##  #\n#.## ####   #  #  ##\n#....     #   ## ###\n####################\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n10 30\n##############################\n#           ## # # ##       ##\n## # ## ## ##    # #  ## ##  #\n## ###  #I    ##   ####   ## #\n#  ##  ##### ### #   #  #  # #\n# ##  ## F ###   ### ####### #\n# ## ### # #   #   # ##   #  #\n#  #   # #   ##### # #  # # ##\n##   #     #     #     ##    #\n##############################\n========\n##############################\n#           ## # # ##       ##\n## # ## ## ##....# #  ## ##  #\n## ###  #.....##.  ####   ## #\n#  ##  ##### ###.#   #  #  # #\n# ##  ## ..###...### ####### #\n# ## ### #.#...#   # ##   #  #\n#  #   # #...##### # #  # # ##\n##   #     #     #     ##    #\n##############################\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n10 20\n####################\n#   # # # #   # ## #\n###       ###      #\n##  ## ##     ### ##\n# I##   ### ###    #\n# ##### #   #   ## #\n# #     ## ### ##  #\n# ## ####   #  #  ##\n#   F     #   ## ###\n####################\n======== EXPECT\n####################\n#   # # # #   # ## #\n###       ###      #\n##  ## ##     ### ##\n#..##   ### ###    #\n#.##### #   #   ## #\n#.#     ## ### ##  #\n#.## ####   #  #  ##\n#....     #   ## ###\n####################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10 30\n##############################\n#           ## # # ##       ##\n## # ## ## ##    # #  ## ##  #\n## ###  #I    ##   ####   ## #\n#  ##  ##### ### #   #  #  # #\n# ##  ## F ###   ### ####### #\n# ## ### # #   #   # ##   #  #\n#  #   # #   ##### # #  # # ##\n##   #     #     #     ##    #\n##############################\n======== EXPECT\n##############################\n#           ## # # ##       ##\n## # ## ## ##....# #  ## ##  #\n## ###  #.....##.  ####   ## #\n#  ##  ##### ###.#   #  #  # #\n# ##  ## ..###...### ####### #\n# ## ### #.#...#   # ##   #  #\n#  #   # #...##### # #  # # ##\n##   #     #     #     ##    #\n##############################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10 20\n####################\n#   # # #I#F  # ## #\n###       ###      #\n##  ## ##   # ### ##\n#  ##   ### ###    #\n# ##### #       ## #\n# #     ## ### ##  #\n# ## ####   #  #  ##\n#         #   ## ###\n####################\n======== EXPECT\n####################\n#   # # #.#...# ## #\n###      .###..... #\n##  ## ##...# ###.##\n#  ##   ###.###... #\n# ##### #  .....## #\n# #     ## ### ##  #\n# ## ####   #  #  ##\n#         #   ## ###\n####################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10 30\n##############################\n#I #        ## # # ##       ##\n##   ## ## ##    # #  ## ##  #\n## ###  #     ##   ####   ## #\n#  ##  ###########   #  #  # #\n# ##  ##   # #   ### ####### #\n# ## ### ###   #   # ##   #  #\n#  # # # #   ##### # #  # # ##\n##         #     #     ##   F#\n##############################\n======== EXPECT\n##############################\n#..#....... ## # # ##       ##\n##...## ##.##....# #  ## ##  #\n## ###  # ....##...####   ## #\n#  ##  ###########...#  #  # #\n# ##  ##   # #   ###.####### #\n# ## ### ###   #   #.##...#  #\n#  # # # #   ##### #.#..#.# ##\n##         #     #  ...##....#\n##############################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n25 70\n######################################################################\n# #   #        ##   ##   #   #   ##      ##            ##    ##   # F#\n# # #   ######    #I#  #   # # #  ## # ###  # ### # ####  # ##  #   ##\n# # #####    ###### # ######   ##  # #  #  ## #   #      ##    #######\n# #  # ### # #   ## # # ## #######   ## ####### # ### # ##### ##     #\n# ##   #   ### #    # # #    #   ## ##   ##   # # #   #     ###  ### #\n#  ### ## ##   ####     # ## ## ###  ###    # # # # #######  ## ##   #\n##  ##     # ####   ###           ##  ####### # ###  ##   ##    #  # #\n###  ##### # ## # ###   # # ## ##  ##            ### #  #  ###### ## #\n# ##     ###  #   #   #####  #####  #### ## ####  #  # ## ##    # #  #\n# ######   ## ##### # #   ##     ## #     #   ###   #####  # ##   # ##\n#     ####  #       ### #  #### ##    ### ###   # #  #    ## ######  #\n# ### # ### ## ### ##   ## #  # #  ## # #   ### #### ## #### #  # ## #\n# #     # #  ####     #### ##     ##    ### # #  #    # #    ##   ## #\n# # ### # ## #    #####     # ## ######  #  # ## ## #   # ###### ##  #\n# #  ##    #   #### #   ###    ###    #### ##  #  ####### #   ##    ##\n# ##  #### ###### #   ####  ##  ## ##  #   #  ###  #      ## ##  #####\n#  ##  #        # # #    ## ###    ### ## ###   ## ## #####  #  ## # #\n##  ## ## ### #   # ## # #   ##### #   #  #   #### #  #   ## # ##    #\n###  #  ###   #####  # ### ### #     ### ## #   #  # ## #    #  ## ###\n# ## ##   #####   ## #   #     # ### #   ## ###   ## #  ### ###  #  ##\n# ##  ### #     #  # ## ######   # #   ###  # #####  # ## #   ## ##  #\n#  # ## # # ###### # ## #    ##### #####   ##    ## ## ## ## ##   ## #\n##      #        #    #   ##             #    ##    #      #    #    #\n######################################################################\n======== EXPECT\n######################################################################\n# #   #        ##   ##   #   #   ##      ##      ...   ##... ##...#..#\n# # #   ######    #.#  #   # # #  ## # ###  # ###.#.####..#.##..#...##\n# # #####    ######.# ######   ##  # #  #  ## #...#......##....#######\n# #  # ### # #   ##.# # ## #######   ## #######.# ### # ##### ##     #\n# ##   #   ### #   .# # #    #   ## ##   ##   #.# #   #     ###  ### #\n#  ### ## ##   ####.....# ## ## ###  ###    # #.# # #######  ## ##   #\n##  ##     # ####   ###...........##  ####### #.###  ##   ##    #  # #\n###  ##### # ## # ###   # # ## ##..##   ........ ### #  #  ###### ## #\n# ##     ###  #   #   #####  #####..####.## ####  #  # ## ##    # #  #\n# ######   ## ##### # #   ##     ##.#.... #   ###   #####  # ##   # ##\n#     ####  #       ### #  #### ## ...### ###   # #  #    ## ######  #\n# ### # ### ## ### ##   ## #  # #  ## # #   ### #### ## #### #  # ## #\n# #     # #  ####     #### ##     ##    ### # #  #    # #    ##   ## #\n# # ### # ## #    #####     # ## ######  #  # ## ## #   # ###### ##  #\n# #  ##    #   #### #   ###    ###    #### ##  #  ####### #   ##    ##\n# ##  #### ###### #   ####  ##  ## ##  #   #  ###  #      ## ##  #####\n#  ##  #        # # #    ## ###    ### ## ###   ## ## #####  #  ## # #\n##  ## ## ### #   # ## # #   ##### #   #  #   #### #  #   ## # ##    #\n###  #  ###   #####  # ### ### #     ### ## #   #  # ## #    #  ## ###\n# ## ##   #####   ## #   #     # ### #   ## ###   ## #  ### ###  #  ##\n# ##  ### #     #  # ## ######   # #   ###  # #####  # ## #   ## ##  #\n#  # ## # # ###### # ## #    ##### #####   ##    ## ## ## ## ##   ## #\n##      #        #    #   ##             #    ##    #      #    #    #\n######################################################################\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n27 90\n##########################################################################################\n#I                 #                 #              # #   #   ## # ##   ##             F##\n####### ## ### ###   ##### ## # ## #   ### ##### ##   # #   #    # #  #  ## #### ######  #\n#     #  ###   # ##### ##  #  #  # #####   #     #  # # ## ##### #   ###  # ## # #    ## #\n# ## ###  ### ##     #    ### ## ####    #### ##### ###  #    #    #  #####  # # # ####  #\n# ##   ##     #  ##### ####   #     # ####  # #   #     ## ## #########   ##   # #  ##  ##\n#  ## ##########       #    #######   ## # ## # #   # #  ###      ##    #  # ### ##    ###\n# ##    # ##   # ######## #  #    #####  #    ##########  ##### #    #####    ##  # # ## #\n#  ####   #  #   #    # # ## # ##   #   ## ####        ####   ### ##   # ####  ## ###  # #\n## #  ###   ###### ##      #    ### ## ##  #  ## #####   ## #   ###  ###   #####    ##   #\n#  ##   ##### #    ####### ######   #     ### ## #  ####    ###   ####   #    ## # ##### #\n# #### ## #   # ####    ####   ### ### ####   #  ##    ###### ###      ######  # #  #  # #\n#   ##      # #  ##  # ##    #     # #  # ###   #### # # #  #   #########   ## # ## ##   #\n## ##  # #### ##  ####  # ########## ##   ##  ###    #   # ## #      ##   # #  # ##  # ###\n#  #  ##  ##   ##    ## #     #  ##   ###    ## ### ####   ## ###### #  # # # ##  ## #   #\n## # #### #  ###### ##  ##### ##    ### ######   #  #    ###  ##       ###### ###  # ### #\n#  #    # # ##   #     ##   # ### # #          #   #######   ##  # #####   #   ### #  ## #\n# ##### # #### #   # #    ### #   # # ### #### #####    #  ###  ####   # #   ### ####  ###\n# #     #  ##  # # #########  ## ## #   # #     #    # ## ###  ###   #   #####      ##   #\n# ## #####  # ## ###       # ##  #  ## ## ### # # ####    # # ## # ####### #   ### ##  # #\n# #     ###    ###   #####   ### # ##   #   ##### #  ###### # #  #    ##     # #   #  ## #\n# # # #  ##### #   ####  #####   #### #####       ##     #  #   #### ##  ## #### ### ### #\n# ### ## #   # # # #  # ##  ## #  ##   # ###############   ####   #  #  ##  # #  #     # #\n#   #### # # ### ####      ##  ##  ### # # #       #   # #    ###   ####### # # ## # ### #\n# #    ### #     ##   ## ###  ####   # #   # #####   #   #### # #####   # # #    #####   #\n# ## #     # # # #  #  #     ##    #     #   #     # # # #            #     # ##       # #\n##########################################################################################\n======== EXPECT\n##########################################################################################\n#..................#.................#..............# #...#   ## # ##   ## .............##\n####### ## ### ###...##### ## # ## #...### ##### ##.  #.#.. #    # #  #  ##.#### ######  #\n#     #  ###   # ##### ##  #  #  # #####   #     # .# #.##.##### #   ###  #.## # #    ## #\n# ## ###  ### ##     #    ### ## ####    #### #####.###. #....#    #  #####..# # # ####  #\n# ##   ##     #  ##### ####   #     # ####  # #   #.....## ##.#########...##.  # #  ##  ##\n#  ## ##########       #    #######   ## # ## # #   # #  ### .....##....#..#.### ##    ###\n# ##    # ##   # ######## #  #    #####  #    ##########  ##### #....#####... ##  # # ## #\n#  ####   #  #   #    # # ## # ##   #   ## ####        ####   ### ##   # ####  ## ###  # #\n## #  ###   ###### ##      #    ### ## ##  #  ## #####   ## #   ###  ###   #####    ##   #\n#  ##   ##### #    ####### ######   #     ### ## #  ####    ###   ####   #    ## # ##### #\n# #### ## #   # ####    ####   ### ### ####   #  ##    ###### ###      ######  # #  #  # #\n#   ##      # #  ##  # ##    #     # #  # ###   #### # # #  #   #########   ## # ## ##   #\n## ##  # #### ##  ####  # ########## ##   ##  ###    #   # ## #      ##   # #  # ##  # ###\n#  #  ##  ##   ##    ## #     #  ##   ###    ## ### ####   ## ###### #  # # # ##  ## #   #\n## # #### #  ###### ##  ##### ##    ### ######   #  #    ###  ##       ###### ###  # ### #\n#  #    # # ##   #     ##   # ### # #          #   #######   ##  # #####   #   ### #  ## #\n# ##### # #### #   # #    ### #   # # ### #### #####    #  ###  ####   # #   ### ####  ###\n# #     #  ##  # # #########  ## ## #   # #     #    # ## ###  ###   #   #####      ##   #\n# ## #####  # ## ###       # ##  #  ## ## ### # # ####    # # ## # ####### #   ### ##  # #\n# #     ###    ###   #####   ### # ##   #   ##### #  ###### # #  #    ##     # #   #  ## #\n# # # #  ##### #   ####  #####   #### #####       ##     #  #   #### ##  ## #### ### ### #\n# ### ## #   # # # #  # ##  ## #  ##   # ###############   ####   #  #  ##  # #  #     # #\n#   #### # # ### ####      ##  ##  ### # # #       #   # #    ###   ####### # # ## # ### #\n# #    ### #     ##   ## ###  ####   # #   # #####   #   #### # #####   # # #    #####   #\n# ## #     # # # #  #  #     ##    #     #   #     # # # #            #     # ##       # #\n##########################################################################################\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <vector>\n#include <list>\n#include <algorithm>\nusing namespace std;\n\nstruct Pos{\n    int l;\n    int c;\n};\n\n#define get(mat, pos) mat[pos.l][pos.c]\n\nvector<Pos> get_vizinhos(Pos p){\n    vector<Pos> vet = {{p.l, p.c - 1}, {p.l - 1, p.c}, {p.l, p.c + 1}, {p.l + 1, p.c}};\n    std::random_shuffle(vet.begin(), vet.end());\n    return vet;\n}\n\n//refaz o caminho de volta colocando . no menor caminho\nvoid go_back(vector<string> &mat, vector<vector<int>> &dist, Pos pos, int value){\n    if(get(mat, pos) != 'x' || get(dist, pos) != value) //nao eh o vizinho certo\n        return;\n    get(mat, pos) = '.';\n    for(Pos viz : get_vizinhos(pos))\n        go_back(mat, dist, viz, value - 1); //procurando pelo proximo\n}\n\nbool procurar_saida(vector<string> &mat, Pos inicio, Pos fim){\n    int nl = mat.size();\n    int nc = mat[0].size();\n    vector<vector<int>> dist(nl, vector<int>(nc, -1));\n    list<Pos> fila;\n    fila.push_back(inicio);\n    get(mat, inicio) = 'x';\n    get(dist, inicio) = 0;\n    while(!fila.empty()){\n        Pos frente = fila.front();\n        if(frente.l == fim.l && frente.c == fim.c)\n            return true;\n        for(Pos viz : get_vizinhos(frente))\n            if(get(mat, viz) == ' '){\n                fila.push_back(viz);\n                get(mat, viz) = 'x';\n                get(dist, viz) = get(dist, frente) + 1;\n                if(viz.l == fim.l && viz.c == fim.c){\n                    go_back(mat, dist, fim, get(dist, frente) + 1);\n                    return true;\n                }\n            }\n        fila.pop_front();\n    }\n    return false;\n}\n\nvoid remover_erros(vector<string> &mat){\n    int nl = mat.size();\n    int nc = mat[0].size();\n    for(int l = 0; l < nl; l++)\n        for(int c = 0; c < nc; c++)\n            if(mat[l][c] == 'x')\n                mat[l][c] = ' ';\n}\n\nint main(){\n    int nl = 0, nc = 0;\n    cin >> nl >> nc;\n    vector<string> mat(nl, \"\"); //come\u00e7a com nl strings \"\"\n    getchar();//remove \\n after nc\n    Pos inicio, fim;\n\n    //carregando matriz\n    for(int i = 0; i < nl; i++)\n        getline(cin, mat[i]);\n\n    //procurando inicio e fim e colocando ' ' nas posi\u00e7\u00f5es iniciais\n    for(int l = 0; l < nl; l++){\n        for(int c = 0; c < nc; c++){\n            if(mat[l][c] == 'I'){\n                mat[l][c] = ' ';\n                inicio = Pos {l, c};\n            }\n            if(mat[l][c] == 'F'){\n                mat[l][c] = ' ';\n                fim = Pos {l, c};\n            }\n        }\n    }\n    procurar_saida(mat, inicio, fim);\n    remover_erros(mat);\n    for(string line : mat)\n        cout << line << endl;\n    // cout << \"       nl=\" << nl << \" nc=\" << nc << \"\\n\";\n    // cout << \"inicio: l=\" << inicio.l << \" , c=\" << inicio.c << endl;\n    // cout << \"   fim: l=\" << fim.l << \" , c=\" << fim.c << endl;\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "queue.go",
                "contents": "package main\n\nimport (\n\t\"container/list\"\n)\n\n// Implmenta\u00e7\u00e3o de uma fila gen\u00e9rica usando a lista duplamente encadeada do pacote container/list\ntype Queue[T any] struct {\n\tqueue *list.List\n}\n\nfunc NewQueue[T any]() *Queue[T] {\n\treturn &Queue[T]{\n\t\tqueue: list.New(),\n\t}\n}\nfunc (q *Queue[T]) Enqueue(value T) {\n\tq.queue.PushBack(value)\n}\nfunc (q *Queue[T]) Dequeue() (T, bool) {\n\telement := q.queue.Front()\n\tif element == nil {\n\t\tvar zero T\n\t\treturn zero, false\n\t}\n\tq.queue.Remove(element)\n\tvalue := element.Value.(T)\n\treturn value, true\n}\nfunc (q *Queue[T]) Peek() (T, bool) {\n\telement := q.queue.Front()\n\tif element == nil {\n\t\tvar zero T\n\t\treturn zero, false\n\t}\n\tvalue := element.Value.(T)\n\treturn value, true\n}\nfunc (q *Queue[T]) IsEmpty() bool {\n\treturn q.queue.Len() == 0\n}\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\ntype Pos struct {\n\tl, c int\n}\n\nfunc (p Pos) getNeig() []Pos {\n\treturn nil\n}\n\nfunc inside(grid [][]rune, pos Pos) bool {\n\tnrows := len(grid)\n\tncols := len(grid[0])\n\treturn pos.l >= 0 && pos.l < nrows && pos.c >= 0 && pos.c < ncols\n}\n\nfunc match(grid [][]rune, pos Pos, char rune) bool {\n\treturn inside(grid, pos) && grid[pos.l][pos.c] == char\n}\n\nfunc search(grid [][]rune, startPos Pos, endPos Pos) {\n\t_, _, _ = grid, startPos, endPos\n}\n\nfunc voltar()\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\tvar nl, nc int\n\tscanner.Scan()\n\tline := scanner.Text()\n\tfmt.Sscanf(line, \"%d %d\", &nl, &nc)\n\tmat := make([][]rune, nl) // Inicializa a matriz de runes\n\n\t// Carregando matriz\n\tfor i := range nl {\n\t\tscanner.Scan()\n\t\tline := scanner.Text()\n\t\tmat[i] = []rune(line)\n\t}\n\n\tvar inicio, fim Pos\n\n\t// Procurando inicio e fim e colocando ' ' nas posi\u00e7\u00f5es iniciais\n\tfor l := range nl {\n\t\tfor c := range nc {\n\t\t\tif mat[l][c] == 'I' {\n\t\t\t\tmat[l][c] = ' '\n\t\t\t\tinicio = Pos{l, c}\n\t\t\t}\n\t\t\tif mat[l][c] == 'F' {\n\t\t\t\tmat[l][c] = ' '\n\t\t\t\tfim = Pos{l, c}\n\t\t\t}\n\t\t}\n\t}\n\n\tsearch(mat, inicio, fim)\n\n\tfor _, line := range mat {\n\t\tfmt.Println(string(line)) // Converte o slice de runes de volta para string para imprimir\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
