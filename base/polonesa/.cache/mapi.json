{
    "title": "L1 - @polonesa - Transforme da nota\u00e7\u00e3o padr\u00e3o para polonesa reversa",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>L1 - @polonesa - Transforme da nota\u00e7\u00e3o padr\u00e3o para polonesa\nreversa</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h1\nid=\"l1---polonesa---transforme-da-nota\u00e7\u00e3o-padr\u00e3o-para-polonesa-reversa\">L1\n- <span class=\"citation\" data-cites=\"polonesa\">@polonesa</span> -\nTransforme da nota\u00e7\u00e3o padr\u00e3o para polonesa reversa</h1>\n<ul>\n<li>Veja a vers\u00e3o online: <a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/polonesa/Readme.md\">aqui.</a></li>\n<li>Para programar na sua m\u00e1quina (local/virtual) use:\n<ul>\n<li><code>tko down ed polonesa</code></li>\n</ul></li>\n<li>Se n\u00e3o tem o <code>tko</code>, instale pelo <a\nhref=\"https://github.com/senapk/tko#tko\">LINK</a>.</li>\n</ul>\n<hr />\n<h2 id=\"descri\u00e7\u00e3o\">Descri\u00e7\u00e3o</h2>\n<ul>\n<li>Fa\u00e7a o caso simples sem par\u00eanteses</li>\n<li>Utilize os operadores <code>+</code>, <code>-</code>,\n<code>*</code>, <code>/</code> e <code>^</code></li>\n<li>Preced\u00eancia 1(menor): <code>+</code> e <code>-</code></li>\n<li>Preced\u00eancia 2: <code>*</code> e <code>/</code></li>\n<li>Preced\u00eancia 3(maior): <code>^</code></li>\n</ul>\n<h2 id=\"drafts\">Drafts</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/polonesa/.cache/draft/cpp/flow.hpp\">flow.hpp</a></li>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/polonesa/.cache/draft/cpp/main.cpp\">main.cpp</a>\n<!-- links --></li>\n</ul></li>\n</ul>\n<h2 id=\"testes\">Testes</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">3</span> + 4 <span class=\"pp\">*</span> 2</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">========</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">3</span> 4 2 <span class=\"pp\">*</span> +</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">3</span> + 4 <span class=\"pp\">*</span> 2 <span class=\"at\">-</span> 1</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">========</span></span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">3</span> 4 2 <span class=\"pp\">*</span> + 1 <span class=\"at\">-</span></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">3</span> + 4 <span class=\"pp\">*</span> 2 <span class=\"at\">-</span> 1 / 2</span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">========</span></span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">3</span> 4 2 <span class=\"pp\">*</span> + 1 2 / <span class=\"at\">-</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">1</span> + 2 <span class=\"pp\">*</span> 3 ^ 4</span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">========</span></span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">1</span> 2 3 4 ^ <span class=\"pp\">*</span> +</span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-27\"><a href=\"#cb1-27\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span>\n<span id=\"cb1-28\"><a href=\"#cb1-28\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">1</span> + 2 <span class=\"pp\">*</span> 3 ^ 4 <span class=\"at\">-</span> 5</span>\n<span id=\"cb1-29\"><a href=\"#cb1-29\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">========</span></span>\n<span id=\"cb1-30\"><a href=\"#cb1-30\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">1</span> 2 3 4 ^ <span class=\"pp\">*</span> + 5 <span class=\"at\">-</span></span>\n<span id=\"cb1-31\"><a href=\"#cb1-31\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span></code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>>\n3 + 4 * 2\n========\n3 4 2 * +\n<<<<<<<<\n\n>>>>>>>>\n3 + 4 * 2 - 1\n========\n3 4 2 * + 1 -\n<<<<<<<<\n\n>>>>>>>>\n3 + 4 * 2 - 1 / 2\n========\n3 4 2 * + 1 2 / -\n<<<<<<<<\n\n>>>>>>>>\n1 + 2 * 3 ^ 4\n========\n1 2 3 4 ^ * +\n<<<<<<<<\n\n>>>>>>>>\n1 + 2 * 3 ^ 4 - 5\n========\n1 2 3 4 ^ * + 5 -\n<<<<<<<<\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "flow.hpp",
                "contents": "//--------------------------------------------------------\n// BIBLIOTECA HEADER ONLY PARA C++ \n//     MANIPULA\u00c7\u00c3O DE TEXTO\n//         FORMAT, TEXT, PRINT, WRITE, SPLIT, JOIN\n//     E PROGRAMA\u00c7\u00c3O FUNCIONAL\n//         Map, FILTER, Slice, Enumerate\n//     EM MODO FUN\u00c7\u00c3O E MODO PIPELINE\n//--------------------------------------------------------\n//  VERS\u00c3O 1.9.0\n//  https://github.com/senapk/cppaux\n//--------------------------------------------------------\n\n#pragma once\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <list>\n#include <array>\n#include <set>\n#include <unordered_set>\n#include <map>\n#include <unordered_map>\n\n\nnamespace fw {\n\n\n//-------------------- PIPE -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\ntemplate <typename FN_ONE>\nclass Pipe {\n    FN_ONE fn;\npublic:\n    Pipe(FN_ONE fn): fn(fn) {}\n    template <typename T>        auto operator()(T data) const            { return fn(data); }\n    template <typename T> friend auto operator| (T data, const Pipe& obj) { return obj(data); }\n};\n\n//-------------------- CHAIN -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\ntemplate<typename... Args>\nclass Chain {\n    std::tuple<Args...> args;\npublic:\n    Chain(Args ...args): args(std::forward<Args>(args)...){}\n    template <typename T>\n    auto operator()(const T& data) const {\n        return std::apply([&data](auto&&... fns) { return (fns(data), ...); }, args);\n    }\n    template <typename T> \n    friend auto operator| (const T& data, Chain obj) { return obj(data); }\n};\n\n\n//-------------------- INPUT -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[input]]\n//LOAD_GUIDE input\ninline std::string input(std::istream & is = std::cin)\n//[[input]]\n{\n    std::string line;\n    if (std::getline(is, line))\n        return line;\n    throw std::runtime_error(\"input empty\");\n}\n\nstruct Input {\n//LOAD_GUIDE input\n    Input() {}\n    std::string        operator()(std::istream& is = std::cin) const { return input(is); }\n    friend std::string operator| (std::istream& is, const Input& obj) { return obj(is); }\n};\n\n//-------------------- RANGE -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n// [[range]]\n//LOAD_GUIDE range2\ninline std::vector<int> range(int init, int end, int step = 1)\n//[[range]]\n{\n    if (step == 0)\n        throw std::runtime_error(\"step cannot be zero\");\n    std::vector<int> aux;\n    if (step > 0) {\n        for (int i = init; i < end; i += step) {\n            aux.push_back(i);\n        }\n    } else {\n        for (int i = init; i > end; i += step) {\n            aux.push_back(i);\n        }\n    }\n    return aux;\n}\n\n//LOAD_GUIDE range1\ninline std::vector<int> range(int end)\n{\n    return range(0, end, 1);\n}\n\nstruct Range {\n//LOAD_GUIDE range1\n    Range() : init(0), step(1) {};\n\n    std::vector<int> operator()(int end) const {\n        return range(init, end, step);\n    }\n\n    friend std::vector<int> operator|(int end, const Range& obj) {\n        return obj(end);\n    }\n\n    int init {0};\n    int end {0};\n    int step {0};\n};\n\n//-------------------- TEXT HEADER  ----------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\ntemplate <typename T>\ninline std::string text(const T& data, const std::string& cfmt = \"\");\n\n//-------------------- JOIN  -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\nnamespace hide {\n    template <typename CONTAINER, typename FN> \n    std::string __join(const CONTAINER& container, const std::string& separator, FN fn) \n    { \n        std::stringstream ss;\n        for (auto it = container.begin(); it != container.end(); ++it) {\n            ss << (it == container.begin() ? \"\" : separator);\n            ss << fn(*it);\n        }\n        return ss.str();\n    }\n\n    template <typename FN>\n    std::string __join(const char * data, const std::string& separator, FN fn) \n    { \n        (void) separator;\n        return fn(data);\n    }\n\n    template <typename... Ts, typename FN>\n    std::string __join(std::tuple<Ts...> const &the_tuple, const std::string& separator, FN fn)\n    {\n        std::stringstream ss;\n        std::apply( [&](Ts const &...tuple_args) {\n                std::size_t n{0};\n                ((ss << fn(tuple_args) << (++n != sizeof...(Ts) ? separator : \"\")), ...);\n            }, the_tuple);\n        return ss.str();\n    }\n\n    template <typename T1, typename T2, typename FN>\n    std::string __join(const std::pair<T1, T2>& the_pair, const std::string& separator, FN fn)\n    {\n        std::stringstream ss;\n        ss << fn(the_pair.first) << separator << fn(the_pair.second);\n        return ss.str();\n    }\n}\n\n//[[joinwith]]\n//LOAD_GUIDE joinwith\ntemplate <typename T, typename FN>\nstd::string joinwith(const T& container, const std::string& separator, FN fn)\n//[[joinwith]]\n{\n    return hide::__join(container, separator, fn);\n}\n\n//[[join]]\n//LOAD_GUIDE join\ntemplate <typename T>\nstd::string join(const T& container, const std::string& separator = \", \", const std::string& cfmt = \"\")\n//[[join]]\n{\n    return joinwith(container, separator, [&](auto x) { return text(x, cfmt);});  //debug\n}\n\nstruct Join {\n    std::string separator;\n    std::string cfmt;\n\n//LOAD_GUIDE join\n    Join(const std::string& separator = \", \", const std::string& cfmt = \"\") : separator(separator), cfmt(cfmt) {}\n    template <typename CONTAINER> std::string operator()(const CONTAINER& v) const { return join(v, separator, cfmt); }\n    template <typename T> friend std::string operator|(const T& v, const Join& obj) { return obj(v); }\n};\n\ntemplate <typename FN>\nstruct JoinWith {\n    FN fn;\n    std::string separator;\n\n//LOAD_GUIDE joinwith\n    JoinWith(const std::string& separator, FN fn) : separator(separator), fn(fn) {}\n    template <typename CONTAINER> std::string operator()(const CONTAINER& v) const { return joinwith(v, separator, fn); }\n    template <typename T> friend std::string operator|(const T& v, const JoinWith& obj) { return obj(v); }\n};\n\n\n//-------------------- TEXT ------------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\nnamespace hide {\nclass Braces {\n    public:\n        //transforma {{ em \\a e }} em \\b\n    static std::string preprocess(std::string data) {\n        std::string result1;\n        data.push_back('_');\n        for (int i = 0; i < (int) data.size() - 1; i++) {\n            if (data[i] == '{' && data[i + 1] == '{') {\n                result1.push_back('\\a');\n                i++;\n            } else {\n                result1.push_back(data[i]);\n            }\n        }\n        std::string result2;\n        for (int i = result1.size() - 1; i >= 0; i--) {\n            if (result1[i] == '}' && result1[i - 1] == '}') {\n                result2.push_back('\\b');\n                i--;\n            } else {\n                result2.push_back(result1[i]);\n            }\n        }\n        std::string final_result;\n        for (int i = result2.size() - 1; i >= 0; i--) {\n            final_result.push_back(result2[i]);\n        }\n        return final_result;\n    }\n\n    static std::pair<std::vector<std::string>, std::vector<std::string>> extract(std::string data)\n    {\n        data = preprocess(data);\n        std::vector<std::string> texts = {\"\"};\n        std::vector<std::string> ctrls = {\"\"};\n        auto* destiny = &texts;\n\n        for (char c : data) {\n            if (c == '{') \n            {\n                texts.push_back(\"\");\n                destiny = &ctrls;\n            }\n            else if (c == '}') \n            {\n                ctrls.push_back(\"\");\n                destiny = &texts;\n            }\n            else\n            {\n                if (c == '\\a') {\n                    c = '{';\n                } else if (c == '\\b') {\n                    c = '}';\n                }\n                destiny->back().append(std::string(1,c));\n            }\n        }\n        while (texts.size() > ctrls.size())\n            ctrls.push_back(\"\");\n        return {texts, ctrls};\n    }\n\n    static std::string combine(const std::vector<std::string>& texts, const std::vector<std::string>& vars) {\n        if(vars.size() < texts.size() - 1) {\n            throw std::out_of_range(\"\");\n        }\n        std::stringstream ss;\n        for (size_t i = 0; i < vars.size(); i++)\n            ss << texts[i] << vars[i];\n        ss << texts.back(); //ultimo texto\n        return ss.str();\n    }\n};\n\nclass Align {\n    char align_mode { 0 }; //< > or ^, default is center\n    int  align_size { 0 }; //size of the field\n    char pad_char   { ' ' }; //char used to pad the field\n    std::string format { \"\" }; //filtered format string\n\n    bool extract_align() {\n        std::string align_str_size;\n\n        size_t i {0}, j {0};\n        for (i = 0; i < format.size(); ++i) {\n            if (format[i] == '<' || format[i] == '>' || format[i] == '^') { //achei o alinhamento\n                this->align_mode = format[i];\n\n                for (j = i + 1; j < format.size(); ++j) { //extraindo o tamanho do alinhamento\n                    if (format[j] >= '0' && format[j] <= '9') {\n                        align_str_size += format[j];\n                    } else { // terminou o tamanho\n                        break;\n                    }\n                }\n                if (align_str_size.empty()) {\n                    this->align_size = 0;\n                    std::cout << \"fail: format symbol `\" << format[i] << \"` must be followed by a size\\n\";\n                    exit(1);\n                }\n                this->align_size = std::stoi(align_str_size);\n                this->format.erase(i, j - i);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    void extract_pad() {\n        // search for : char in format, if exists and is followed by a char, \n        // then use that char as padding, and remove both from string\n        auto pos = this->format.find(':');\n        if (pos != std::string::npos) {\n            if (pos + 1 < format.size()) {\n                this->pad_char = format[pos + 1];\n                this->format.erase(pos, 2);\n            } else {\n                std::cout << \"fail: format symbol `:` must be followed by a padding char\\n\";\n                exit(1);\n            }\n        }\n    }\npublic:\n\n    Align(const std::string& format) {\n        this->format = format;\n        this->extract_pad();\n        this->extract_align();\n    }\n\n    std::string align_text(const std::string& str) {\n        int len = str.length();\n        if(this->align_mode == 0 || this->align_size < len) { \n            return str; \n        }\n        int diff = this->align_size - len;\n        \n        //default is center\n        int padleft = diff/2;\n        int padright = diff - padleft;\n        if(this->align_mode == '>') {\n            padleft = diff;\n            padright = 0;\n        }\n        else if(this->align_mode == '<') {\n            padleft = 0;\n            padright = diff;\n        }\n        return std::string(padleft, this->pad_char) + str + std::string(padright, this->pad_char);\n    }\n\n    const std::string& get_filtered_format() {\n        return this->format;\n    }\n    int get_align_size() {\n        return this->align_size;\n    }\n    char get_pad_char() {\n        return this->pad_char;\n    }\n    char get_align_mode() {\n        return this->align_mode;\n    }\n};\n}\n\nclass Text {\n\n    template <typename T>\n    static inline std::string ss_transform(const T& data) {\n        std::ostringstream ss;\n        ss << data;\n        return ss.str();\n    }\n\n    template <typename... Ts>\n    static inline std::string cformat(const std::string &fmt, Ts... vs) {\n        auto __format = [](const std::string &fmt, auto... vs) {\n            char b;\n            size_t required = std::snprintf(&b, 0, fmt.c_str(), vs...) + 1;\n            char bytes[required];\n            std::snprintf(bytes, required, fmt.c_str(), vs...);\n            return std::string(bytes);\n        };\n        return __format(fmt, [&vs](){\n            if constexpr (std::is_same_v<std::string, Ts>) {\n                return vs.c_str();\n            } else {\n                return vs;\n            }\n        }()...);\n    }\n\n    template <typename T>\n    static inline std::string process(const T& data, const std::string& cfmt) {\n        hide::Align align(cfmt);\n        std::string filtered = align.get_filtered_format();\n\n        if (filtered == \"\") {\n            return align.align_text(ss_transform(data));\n        }\n        if (filtered.find(\" \") != std::string::npos) {\n            std::cout << \"fail: cfmt n\u00e3o pode conter espa\u00e7os ou %\\n\";\n            exit(1);\n        }\n        return align.align_text(cformat(filtered, data));\n    }\n\n    template <typename A, typename B>\n    static inline std::string process(const std::pair<A, B>& pair, const std::string& cfmt) {\n        return join(pair, \", \", cfmt) | Text(\"({})\");\n    }\n\n    template <typename... Ts>\n    static inline std::string process(const std::tuple<Ts...>& tuple, const std::string& cfmt) {\n        return join(tuple, \", \", cfmt) | Text(\"({})\");\n    }\n    template <typename PRINTABLE> \n    static inline std::string process(const std::vector<PRINTABLE>& container, const std::string& cfmt) {\n        return join(container, \", \", cfmt) | Text(\"[{}]\");\n    }\n    template <typename PRINTABLE> \n    static inline std::string process(const std::list<PRINTABLE>& container, const std::string& cfmt) {\n        return join(container, \", \", cfmt) | Text(\"[{}]\");\n    }\n    template <typename PRINTABLE, size_t S> \n    static inline std::string process(const std::array<PRINTABLE, S>& container, const std::string& cfmt) {\n        return join(container, \", \", cfmt) | Text(\"[{}]\");\n    }\n    template <typename PRINTABLE> \n    static inline std::string process(const std::set<PRINTABLE>& container, const std::string& cfmt) {\n        return join(container, \", \", cfmt) | Text(\"{{{}}}\");\n    }\n    template <typename PRINTABLE> \n    static inline std::string process(const std::unordered_set<PRINTABLE>& container, const std::string& cfmt) {\n        return join(container, \", \", cfmt) | Text(\"{{{}}}\");\n    }\n    template <typename A, typename B> \n    static inline std::string process(const std::map<A, B>& container, const std::string& cfmt) {\n        return join(container, \", \", cfmt) | Text(\"{{{}}}\");\n    }\n    template <typename A, typename B>\n    static inline std::string process(const std::unordered_map<A, B>& container, const std::string& cfmt) {\n        return join(container, \", \", cfmt) | Text(\"{{{}}}\");\n    }\n\nprivate:\n\n    std::string cfmt;\n\npublic:\n\n//LOAD_GUIDE text\n    Text(std::string cfmt = \"\"): cfmt(cfmt) { }\n    \n    template <typename T>\n    std::string operator()(const T& data) const {\n        if (cfmt.find(\"{\") == std::string::npos) {\n            return process(data, cfmt);\n        }\n        auto [texts, controls] = hide::Braces::extract(cfmt);\n        try {\n            auto result = process(data, controls.at(0));\n            return hide::Braces::combine(texts, {result});\n        } catch (std::out_of_range& e) {\n            std::cout << \"fail: verifique a quantidade de par\u00e2metros passado para string: \" << cfmt << '\\n';\n            exit(1);\n        }\n    }\n\n    template <typename T>\n    friend std::string operator|(const T& v, const Text& obj) { return obj(v); }\n};\n\n//[[text]]\n//LOAD_GUIDE text\ntemplate <typename T>\ninline std::string text(const T& data, const std::string& cfmt)\n//[[text]]\n{\n    return Text(cfmt)(data);\n}\n\n//-------------------- FORMAT ----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\ntemplate<typename... Args>\nclass Format \n{\n    std::tuple<Args...> args;\n\n    std::vector<std::string> tuple_to_vector_str(const std::vector<std::string>& controls)\n    {\n        std::vector<std::string> result;\n        std::apply\n        (\n            [&result, &controls](Args const&... tupleArgs)\n            {\n                int i = -1;\n                ((result.push_back(text(tupleArgs, controls.at(++i)))), ...);\n            }, this->args\n        );\n\n        return result;\n    }\npublic:\n\n//LOAD_GUIDE format\n    Format(Args ...args): args(std::forward<Args>(args)...){}\n\n    std::string operator()(std::string fmt)\n    {\n        auto [texts, controls] = hide::Braces::extract(fmt);\n        try {\n            auto vars = tuple_to_vector_str(controls);\n            return hide::Braces::combine(texts, vars);\n        } catch (std::out_of_range& e) {\n            std::cout << \"fail: verifique a quantidade de par\u00e2metros passado para string: \" << fmt << '\\n';\n            exit(1);\n        }\n    }\n\n    friend std::string operator|(std::string fmt, Format<Args...> obj) { return obj(fmt); }\n};\n\n//[[format]]\n//LOAD_GUIDE format\ntemplate<typename... Args>\nstd::string format(std::string fmt, Args ...args) \n//[[format]]\n{\n    return Format<Args...>(args...)(fmt); \n}\n\n//-------------------- Write -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\nstruct Write {\n    std::string end;\n\n    template <typename PRINTABLE> \n    const PRINTABLE& process(const PRINTABLE& data, std::string end) {\n        std::cout << text(data) << end;\n        return data;\n    }\n\n\n//LOAD_GUIDE write\n    Write(std::string end = \"\\n\"): end(end) { }\n    template <typename PRINTABLE>        const PRINTABLE& operator()(const PRINTABLE& data           ) { return process(data, end); }\n    template <typename PRINTABLE> friend const PRINTABLE& operator| (const PRINTABLE& data, Write obj) { return obj(data); }\n};\n\n//[[write]]\n//LOAD_GUIDE write\ntemplate <typename PRINTABLE> \nconst PRINTABLE& write(const PRINTABLE& data, std::string end = \"\\n\") \n//[[write]]\n{\n    data | Write(end);\n    return data;\n}\n\n//-------------------- Map   -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[map]]\n//LOAD_GUIDE map\ntemplate<typename CONTAINER, typename FUNCTION>\nauto map(const CONTAINER& container, FUNCTION fn)\n//[[map]]\n{\n    std::vector<decltype(fn(*container.begin()))> aux;\n    for (const auto& item : container)\n        aux.push_back(fn(item));\n    return aux;\n}\n\ntemplate <typename FUNCTION>\nstruct Map {\n    FUNCTION fn;\n//LOAD_GUIDE map\n    Map(FUNCTION fn) : fn(fn) {};\n    template<typename CONTAINER> auto operator()(const CONTAINER& container) const { return map(container, fn); }\n    template<typename CONTAINER> friend auto operator|(const CONTAINER& container, const Map& obj) { return obj(container); }\n};\n\n//-------------------- Split -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[split]]\n//LOAD_GUIDE split\ninline std::vector<std::string> split(std::string content, std::string delimiter = \" \")\n//[[split]]\n{\n    std::vector<std::string> aux;\n    size_t pos = 0;\n    while ((pos = content.find(delimiter)) != std::string::npos) {\n        std::string token = content.substr(0, pos);\n        aux.push_back(token);\n        content.erase(0, pos + delimiter.length());\n    }\n    aux.push_back(content);\n    return aux;\n}\n\nstruct Split {\n    std::string delimiter;\n//LOAD_GUIDE split\n    Split(std::string delimiter = \" \") : delimiter(delimiter) {}\n\n    std::vector<std::string>        operator()(std::string content) const { return split(content, delimiter); }\n    friend std::vector<std::string> operator| (std::string content, const Split& obj) { return obj(content); }\n};\n\n//--------------------------------------------------------\n//-------------------- Slice -----------------------------\n//--------------------------------------------------------\n\nclass Slice {\n\n    template<typename CONTAINER>\n    static auto new_vec_from(const CONTAINER& container) {\n        auto fn = [](auto x) {return x;}; \n        std::vector<decltype(fn(*container.begin()))> aux;\n        return aux;\n    }\n\n    template<typename CONTAINER>\n    std::pair<int, int> calc_limits(const CONTAINER& container) const {\n        int size = container.size();\n        int begin = 0;\n        int end = size;\n        if (!this->from_begin && !this->to_end && (this->begin == this->end)) {\n            return {0, 0};\n        }\n        if (!this->from_begin) {\n            begin = this->begin;\n            if (begin < 0)\n                begin = size + begin;\n            begin = std::min(begin, size);\n        }\n        if (!this->to_end) {\n            end = this->end;\n            if (end < 0)\n                end = size + end;\n            end = std::min(end, size);\n        }\n        return {begin, end};\n    }\n\n    template<typename CONTAINER>\n    auto process(const CONTAINER& container) const {\n        auto [begin, end] = calc_limits(container);\n        auto aux = Slice::new_vec_from(container);\n        auto it = container.begin();\n        std::advance(it, begin);\n        for (int i = begin; i < end; i++) {\n            aux.push_back(*it);\n            it++;\n        }\n        return aux;\n    }\n\n    std::string process(const std::string& container) const {\n        auto [begin, end] = calc_limits(container);\n        std::string aux;\n        for (int i = begin; i < end; i++) {\n            aux.push_back(container[i]);\n        }\n        return aux;\n    }\n\n    std::string process(const char * container) const {\n        return process(std::string(container));\n    }\n\n\npublic:\n//LOAD_GUIDE slice1\n    Slice(int begin = 0) {\n        this->from_begin = begin == 0;\n        this->begin = begin;\n        this->to_end = true;\n    }\n\n//LOAD_GUIDE slice2\n    Slice(int begin, int end) {\n        this->begin = begin;\n        this->end = end;\n        this->from_begin = false;\n        this->to_end = false;\n    }\n\n    template<typename CONTAINER>\n    auto operator()(const CONTAINER& container) const {\n        return process(container);\n    }\n    \n    template<typename CONTAINER> friend auto operator|(const CONTAINER& container, const Slice& obj) { return obj(container); }\n\nprivate:\n    int begin;\n    int end;\n    bool from_begin {false};\n    bool to_end {false};\n};\n\n//[[slice1]]\n//LOAD_GUIDE slice1\ntemplate<typename CONTAINER>\nauto slice(const CONTAINER& container, int begin = 0)\n//[[slice1]]\n{\n    return Slice(begin)(container);\n}\n\n//LOAD_GUIDE slice2\ntemplate<typename CONTAINER>\nauto slice(CONTAINER container, int begin, int end)\n{\n    return Slice(begin, end)(container);\n}\n\n//-------------------- FILTER ----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[filter]]\n//LOAD_GUIDE filter\ntemplate<typename CONTAINER, typename FUNCTION>\nauto filter(const CONTAINER& container, FUNCTION fn)\n//[[filter]]\n{\n    auto aux = slice(container, 0, 0);\n    for(const auto& x : container) {\n        if(fn(x))\n            aux.push_back(x);\n    }\n    return aux;\n}\n\ntemplate <typename FUNCTION>\nstruct Filter {\n    FUNCTION fn;\n\n//LOAD_GUIDE filter\n    Filter(FUNCTION fn) : fn(fn) {};\n    template<typename CONTAINER> auto operator()(const CONTAINER& container) const { return filter(container, fn); }\n    template<typename CONTAINER> friend auto operator|(const CONTAINER& container, const Filter& obj) { return obj(container); }\n};\n\n//-------------------- Enumerate -------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[enumerate]]\n//LOAD_GUIDE enumerate\ntemplate<typename CONTAINER>\nauto enumerate(const CONTAINER& container)\n//[[enumerate]]\n{\n    auto fn = [](auto x) {return x;}; \n    std::vector<std::pair<int, decltype(fn(*container.begin()))>> aux;\n    int i = 0;\n    for (const auto& item : container) {\n        aux.push_back(std::make_pair(i, item));\n        i++;\n    }\n    return aux;\n}\n\nstruct Enumerate {\n//LOAD_GUIDE enumerate\n    Enumerate() {};\n    template<typename CONTAINER> auto operator()(const CONTAINER& container) const { return enumerate(container); }\n    template<typename CONTAINER> friend auto operator|(const CONTAINER& container, const Enumerate& obj) { return obj(container); }\n};\n\n//-------------------- PARSE -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[parse]]\n//LOAD_GUIDE parse\ntemplate <typename READABLE>\nREADABLE parse(std::string value)\n//[[parse]]\n{\n    std::istringstream iss(value);\n    READABLE aux;\n    if (iss >> aux) {\n        return aux;\n    }\n    throw std::runtime_error(\"parse: invalid conversion from \" + value);\n}\n\ntemplate <typename READABLE>\nstruct Parse {\n//LOAD_GUIDE parse\n    Parse(){};\n    READABLE operator()(std::string value) const { return parse<READABLE>(value); }\n    friend READABLE operator|(std::string value, const Parse& obj) { return obj(value); }\n};\n\n//-------------------- UNPACK -----------------------------\n//---------------------------------------------------------\n//---------------------------------------------------------\n\ntemplate <typename... Types>\nstruct Unpack {\n    char delimiter;\n\n//LOAD_GUIDE unpack\n    Unpack(char delimiter) : delimiter(delimiter) {}\n\n    template<typename Head, typename... Tail>\n    std::tuple<Head, Tail...> tuple_read_impl(std::istream& is, char delimiter) const {\n        Head val;\n        std::string token;\n        std::getline(is, token, delimiter);\n        std::stringstream ss_token(token);\n        ss_token >> val;\n        if constexpr (sizeof...(Tail) == 0) // this was the last tuple value\n            return std::tuple{val};\n        else\n            return std::tuple_cat(std::tuple{val}, tuple_read_impl<Tail...>(is, delimiter));\n    }\n\n    std::tuple<Types...> operator()(std::string content) const {\n        std::stringstream ss(content);\n        return tuple_read_impl<Types...>(ss, this->delimiter);\n    }\n    \n    friend std::tuple<Types...> operator|(std::string content, const Unpack& obj) {\n        return obj(content);\n    }\n};\n\n//[[unpack]]\n//LOAD_GUIDE unpack\ntemplate <typename... TS>\nstd::tuple<TS...> unpack(const std::string& line, char delimiter)\n//[[unpack]]\n{\n    return Unpack<TS...>(delimiter)(line);\n}\n\n\n//-------------------- ZIP   -----------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[zip]]\n//LOAD_GUIDE zip\ntemplate<typename CONTAINER_A, typename CONTAINER_B>\nauto zip(const CONTAINER_A& A, const CONTAINER_B& B)\n//[[zip]]\n{\n    auto fn = [](auto x) { return x; };\n    using type_a = decltype(fn(*A.begin()));\n    using type_b = decltype(fn(*B.begin()));\n    std::vector<std::pair<type_a, type_b>> aux;\n\n    auto ita = A.begin();\n    auto itb = B.begin();\n    while(ita != A.end() &&  itb != B.end()) {\n        aux.push_back({*ita, *itb});\n        ita++;\n        itb++;\n    }\n    return aux;\n};\n\ntemplate <typename CONTAINER_B>\nstruct Zip {\n    CONTAINER_B container_b;\n\n//LOAD_GUIDE zip\n    Zip(const CONTAINER_B& container_b) : container_b(container_b) {}\n\n    template<typename CONTAINER_A>\n    auto operator()(const CONTAINER_A& container_a) const { return zip(container_a, container_b); }\n    template<typename CONTAINER_A>\n    friend auto operator|(const CONTAINER_A& container_a, const Zip& obj) { return obj(container_a); }\n};\n\n//-------------------- ZIPWITH ---------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[zipwith]]\n//LOAD_GUIDE zipwith\ntemplate<typename CONTAINER_A, typename CONTAINER_B, typename FNJOIN>\nauto zipwith(const CONTAINER_A& A, const CONTAINER_B& B, FNJOIN fnjoin)\n//[[zipwith]]\n{\n    auto idcopy = [](auto x) { return x; };\n    using type_out = decltype( fnjoin( idcopy(*A.begin()), idcopy(*B.begin()) ));\n    std::vector<type_out> aux;\n\n    auto ita = A.begin();\n    auto itb = B.begin();\n    while(ita != A.end() &&  itb != B.end()) {\n        aux.push_back(fnjoin(*ita, *itb));\n        ita++;\n        itb++;\n    }\n    return aux;\n};\n\n\ntemplate<typename CONTAINER_B, typename FNJOIN>\nstruct Zipwith {\n    CONTAINER_B container_b;\n    FNJOIN fnjoin;\n\n//LOAD_GUIDE zipwith\n    Zipwith(const CONTAINER_B& container_b, FNJOIN fnjoin) : container_b(container_b), fnjoin(fnjoin) {}\n\n    template<typename CONTAINER_A>        auto operator()(const CONTAINER_A& container_a) const { return zipwith(container_a, container_b, fnjoin); }\n    template<typename CONTAINER_A> friend auto operator| (const CONTAINER_A& container_a, const Zipwith& obj) { return obj(container_a); }\n};\n\n//-------------------- FOREACH ---------------------------\n//--------------------------------------------------------\n//--------------------------------------------------------\n\n//[[foreach]]\n//LOAD_GUIDE foreach\ntemplate <typename CONTAINER, typename FN>\nvoid foreach(const CONTAINER& container, FN fn)\n//[[foreach]]\n{\n    for (const auto& item : container) {\n        fn(item);\n    }\n}\n\ntemplate <typename FN>\nstruct Foreach {\n    FN fn;\n\n//LOAD_GUIDE foreach\n    Foreach(FN fn) : fn(fn) {}\n\n    template<typename CONTAINER> void operator()(const CONTAINER& container) const { foreach(container, fn); }\n    template<typename CONTAINER> friend void operator|(const CONTAINER& container, const Foreach& obj) { obj(container); }\n};\n} // namespace fw\n\nusing namespace std::string_literals;\n\n\n//[[operator+]]\n//LOAD_GUIDE operator+\ninline double operator+(std::string text)\n//[[operator+]]\n\n{\n    return fw::parse<double>(text);\n}\n\n#define EXTRA\n#include <algorithm>\n\nnamespace fw {\n#ifdef EXTRA\n\ninline auto Sort() {\n    return fw::Pipe([](auto container) {\n        std::sort(container.begin(), container.end());\n        return container;\n    });\n};\n\ntemplate <typename T>\ninline auto Find(const T& value) {\n    return fw::Pipe([value](auto container) {\n        return std::find(container.begin(), container.end(), value);\n    });\n};\n\n} // namespace fw\n#endif\n",
                "encoding": 0
            },
            {
                "name": "main.cpp",
                "contents": "#include \"flow.hpp\"\n#include <stack>\n#include <unordered_map>\n\nusing namespace std;\nusing namespace fw;\n\nbool isdigit(const string& s) {\n    (void) s;\n    return false;\n}\n\nvector<string> shunting_yard(vector<string> tokens) {\n\n\n    (void) tokens;\n    return {};\n}\n\nint main() {\n}\n\n",
                "encoding": 0
            }
        ]
    }
}
