{
    "title": "@pilha_enc: Construindo Pilha com Lista Encadeada - CPP",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@pilha_enc: Construindo Pilha com Lista Encadeada - CPP</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@pilha_enc: Construindo Pilha com Lista Encadeada - CPP</h1>\n            <h1 id=\"construindo-pilha-com-lista-encadeada-cpp\">Construindo Pilha com Lista Encadeada - CPP</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<h2 id=\"intro\">Intro</h2>\n<p>Neste exerc\u00edcio, voc\u00ea implementar\u00e1 uma estrutura de dados fundamental na computa\u00e7\u00e3o: a <strong>Pilha</strong>. A pilha \u00e9 uma estrutura linear que segue o princ\u00edpio <strong>LIFO</strong> (Last In, First Out), o que significa que o \u00faltimo elemento inserido \u00e9 o primeiro a ser removido. Um exemplo cl\u00e1ssico de pilha \u00e9 uma pilha de pratos, onde voc\u00ea s\u00f3 pode remover o prato que est\u00e1 no topo.</p>\n<p>A pilha neste exerc\u00edcio \u00e9 implementada usando uma <strong>Lista Simplesmente Encadeada</strong>, onde cada n\u00f3 cont\u00e9m um valor inteiro e um ponteiro para o pr\u00f3ximo n\u00f3. \u00c9 importante manter o atributo <code>size</code> atualizado ap\u00f3s cada opera\u00e7\u00e3o de inser\u00e7\u00e3o ou remo\u00e7\u00e3o.</p>\n<p><strong>Detalhes da implementa\u00e7\u00e3o</strong>: Por simplicidade, os elementos armazenados na pilha ser\u00e3o n\u00fameros inteiros.</p>\n<p>No arquivo <code>lib.cpp</code>, voc\u00ea encontrar\u00e1 a classe <code>Stack</code> com os seguintes m\u00e9todos:</p>\n<ul>\n<li>~~<code>Stack()</code>~~</li>\n<li>~~<code>~Stack()</code>~~</li>\n<li><code>void push(int info)</code></li>\n<li><code>void pop()</code></li>\n<li><code>int peek()</code></li>\n<li><code>void clear()</code></li>\n<li>~~<code>bool empty()</code>~~</li>\n<li>~~<code>void print()</code>~~</li>\n</ul>\n<p><strong>Importante</strong>: N\u00e3o altere os m\u00e9todos que j\u00e1 est\u00e3o implementados no arquivo <code>lib.cpp</code>. Concentre-se em completar as funcionalidades faltantes conforme as instru\u00e7\u00f5es nos coment\u00e1rios. O arquivo <code>main()</code> j\u00e1 est\u00e1 implementado no Moodle, ent\u00e3o voc\u00ea n\u00e3o precisa se preocupar com a entrada e sa\u00edda padr\u00e3o.</p>\n<p>Os m\u00e9todos riscados j\u00e1 est\u00e3o implementados. Voc\u00ea deve completar os m\u00e9todos <code>push</code>, <code>pop</code>, <code>peek</code> e <code>clear</code>. As descri\u00e7\u00f5es de cada m\u00e9todo est\u00e3o nos coment\u00e1rios dentro do arquivo <code>lib.cpp</code>. Sua tarefa \u00e9 completar o c\u00f3digo conforme especificado.</p>\n<h2 id=\"draft\">Draft</h2>\n<ul>\n<li>Implemente os m\u00e9todos faltantes no arquivo <code>lib.cpp</code> conforme as instru\u00e7\u00f5es fornecidas.</li>\n</ul>\n<!-- links .cache/draft -->\n<!-- links -->\n\n<h2 id=\"tests\">Tests</h2>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A entrada para este exerc\u00edcio ser\u00e1 gerada automaticamente com uma s\u00e9rie de opera\u00e7\u00f5es que ser\u00e3o testadas na sua implementa\u00e7\u00e3o da classe <code>Stack</code>. Voc\u00ea n\u00e3o precisa implementar a leitura ou a escrita da entrada/sa\u00edda, pois isso j\u00e1 est\u00e1 dispon\u00edvel na infraestrutura do Moodle.</li>\n</ul>\n<h3 id=\"saida\">Sa\u00edda</h3>\n<ul>\n<li>Seu c\u00f3digo deve garantir que as opera\u00e7\u00f5es de <code>push</code>, <code>pop</code>, <code>peek</code> E <code>clear</code> funcionem corretamente e que o tamanho da pilha (<code>size</code>) seja atualizado de forma precisa ap\u00f3s cada opera\u00e7\u00e3o.</li>\n</ul>\n<h3 id=\"dicas-para-implementacao\">Dicas para Implementa\u00e7\u00e3o</h3>\n<ol>\n<li><strong>Push</strong>: Crie um novo n\u00f3, fa\u00e7a-o apontar para o n\u00f3 atualmente no topo e atualize o ponteiro de topo para o novo n\u00f3. Lembre-se de incrementar <code>size</code>.</li>\n<li><strong>Pop</strong>: Verifique se a pilha n\u00e3o est\u00e1 vazia antes de remover o n\u00f3 do topo. Atualize o ponteiro de topo e decremente <code>size</code>. N\u00e3o se esque\u00e7a de liberar a mem\u00f3ria do n\u00f3 removido.</li>\n<li><strong>Peek</strong>: Retorne o valor do elemento no topo, garantindo que a pilha n\u00e3o esteja vazia.</li>\n<li><strong>Clear</strong>: Limpa toda a pilha e atualiza o <code>size</code>.</li>\n</ol>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
