{
    "title": "L1 - @sufixos - Imprimindo palavra em peda\u00e7os",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>L1 - @sufixos - Imprimindo palavra em peda\u00e7os</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h1 id=\"l1---sufixos---imprimindo-palavra-em-peda\u00e7os\">L1 - <span\nclass=\"citation\" data-cites=\"sufixos\">@sufixos</span> - Imprimindo\npalavra em peda\u00e7os</h1>\n<p>Voc\u00ea precisa responder algumas quest\u00f5es fundamentais antes de come\u00e7ar\no desenvolvimento de um algoritmo recursivo. Entre elas, temos:</p>\n<ul>\n<li>Qual \u00e9 o caso base?</li>\n<li>Qual \u00e9 a a\u00e7\u00e3o fundamental?</li>\n<li>Quantas vezes teremos uma chamada recursiva.</li>\n</ul>\n<p>Considere o seguinte padr\u00e3o impress\u00e3o:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>4</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>3</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>2</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>1</span></code></pre></div>\n<p>No exemplo acima, estamos imprimindo todos os n\u00fameros em ordem\ndecrescente de 4 at\u00e9 1. Neste exemplo, vamos considerar que o caso base\nacontece quando o valor de n \u00e9 igual a 0. A a\u00e7\u00e3o fundamental ser\u00e1\nimprimir um n\u00famero e depois resolver o mesmo problema para o n\u00famero\nanterior.</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">void</span> countDown<span class=\"op\">(</span><span class=\"dt\">int</span> n<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">(</span>n <span class=\"op\">==</span> <span class=\"dv\">0</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"op\">;</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    cout <span class=\"op\">&lt;&lt;</span> n <span class=\"op\">&lt;&lt;</span> endl<span class=\"op\">;</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    countDown<span class=\"op\">(</span>n<span class=\"op\">-</span><span class=\"dv\">1</span><span class=\"op\">);</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>Considere agora o seguinte padr\u00e3o de impress\u00e3o:</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>4</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>3</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>2</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>1</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>1</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>2</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>3</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>4</span></code></pre></div>\n<p>Esse padr\u00e3o pode ser reproduzido pelo seguinte programa:</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">void</span> countDownUp<span class=\"op\">(</span><span class=\"dt\">int</span> n<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">(</span>n <span class=\"op\">==</span> <span class=\"dv\">0</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"op\">;</span></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    cout <span class=\"op\">&lt;&lt;</span> n <span class=\"op\">&lt;&lt;</span> endl<span class=\"op\">;</span></span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    countDownUp<span class=\"op\">(</span>n<span class=\"op\">-</span><span class=\"dv\">1</span><span class=\"op\">);</span></span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    cout <span class=\"op\">&lt;&lt;</span> n <span class=\"op\">&lt;&lt;</span> endl<span class=\"op\">;</span></span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>J\u00e1 o padr\u00e3o de impress\u00e3o:</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>wladimir</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>ladimir</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>adimir</span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>dimir</span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>imir</span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>mir</span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>ir</span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>r</span></code></pre></div>\n<p>O padr\u00e3o pode ser reproduzido pelo seguinte programa:</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">void</span> printTower<span class=\"op\">(</span><span class=\"dt\">char</span> <span class=\"op\">*</span> s<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"op\">(*</span>s <span class=\"op\">==</span> <span class=\"ch\">&#39;</span><span class=\"sc\">\\0</span><span class=\"ch\">&#39;</span><span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span><span class=\"op\">;</span></span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">}</span></span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    printf<span class=\"op\">(</span><span class=\"st\">&quot;</span><span class=\"sc\">%s\\n</span><span class=\"st\">&quot;</span><span class=\"op\">,</span> s<span class=\"op\">);</span></span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    printTower<span class=\"op\">(</span>s<span class=\"op\">+</span><span class=\"dv\">1</span><span class=\"op\">);</span></span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>Fa\u00e7a um program que imprima todos os sufixos de uma palavra do menor\nsufixo at\u00e9 o maior.</p>\n<h2 id=\"entrada\">Entrada</h2>\n<p>A entrada \u00e9 composta por uma \u00fanica linha contendo uma palavra com at\u00e9\n100 caracteres.</p>\n<h2 id=\"sa\u00edda\">Sa\u00edda</h2>\n<p>A sa\u00edda \u00e9 composta por <code>n</code> linhas sendo <code>n</code> o\ntamanho da palavra lida.</p>\n<h2 id=\"exemplo-de-entrada\">Exemplo de Entrada</h2>\n<div class=\"sourceCode\" id=\"cb7\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>wladimir</span></code></pre></div>\n<h2 id=\"exemplo-de-sa\u00edda\">Exemplo de Sa\u00edda</h2>\n<div class=\"sourceCode\" id=\"cb8\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb8-1\"><a href=\"#cb8-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>r</span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>ir</span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>mir</span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>imir</span>\n<span id=\"cb8-5\"><a href=\"#cb8-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>dimir</span>\n<span id=\"cb8-6\"><a href=\"#cb8-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>adimir</span>\n<span id=\"cb8-7\"><a href=\"#cb8-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>ladimir</span>\n<span id=\"cb8-8\"><a href=\"#cb8-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>wladimir</span></code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\nwladimir\n======== EXPECT\nr\nir\nmir\nimir\ndimir\nadimir\nladimir\nwladimir\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\ninconstitucionalissimamente\n======== EXPECT\ne\nte\nnte\nente\nmente\namente\nmamente\nimamente\nsimamente\nssimamente\nissimamente\nlissimamente\nalissimamente\nnalissimamente\nonalissimamente\nionalissimamente\ncionalissimamente\nucionalissimamente\ntucionalissimamente\nitucionalissimamente\ntitucionalissimamente\nstitucionalissimamente\nnstitucionalissimamente\nonstitucionalissimamente\nconstitucionalissimamente\nnconstitucionalissimamente\ninconstitucionalissimamente\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\npneumoultramicroscopicossilicovulcanoconiotico\n======== EXPECT\no\nco\nico\ntico\notico\niotico\nniotico\noniotico\nconiotico\noconiotico\nnoconiotico\nanoconiotico\ncanoconiotico\nlcanoconiotico\nulcanoconiotico\nvulcanoconiotico\novulcanoconiotico\ncovulcanoconiotico\nicovulcanoconiotico\nlicovulcanoconiotico\nilicovulcanoconiotico\nsilicovulcanoconiotico\nssilicovulcanoconiotico\nossilicovulcanoconiotico\ncossilicovulcanoconiotico\nicossilicovulcanoconiotico\npicossilicovulcanoconiotico\nopicossilicovulcanoconiotico\ncopicossilicovulcanoconiotico\nscopicossilicovulcanoconiotico\noscopicossilicovulcanoconiotico\nroscopicossilicovulcanoconiotico\ncroscopicossilicovulcanoconiotico\nicroscopicossilicovulcanoconiotico\nmicroscopicossilicovulcanoconiotico\namicroscopicossilicovulcanoconiotico\nramicroscopicossilicovulcanoconiotico\ntramicroscopicossilicovulcanoconiotico\nltramicroscopicossilicovulcanoconiotico\nultramicroscopicossilicovulcanoconiotico\noultramicroscopicossilicovulcanoconiotico\nmoultramicroscopicossilicovulcanoconiotico\numoultramicroscopicossilicovulcanoconiotico\neumoultramicroscopicossilicovulcanoconiotico\nneumoultramicroscopicossilicovulcanoconiotico\npneumoultramicroscopicossilicovulcanoconiotico\n<<<<<<<< FINISH\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
