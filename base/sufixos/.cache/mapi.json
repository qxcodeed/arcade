{
    "title": "@sufixos: Imprimindo palavra em peda\u00e7os",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@sufixos: Imprimindo palavra em peda\u00e7os</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@sufixos: Imprimindo palavra em peda\u00e7os</h1>\n            <h1 id=\"imprimindo-palavra-em-pedacos\">Imprimindo palavra em peda\u00e7os</h1>\n<p>Voc\u00ea precisa responder algumas quest\u00f5es fundamentais antes de come\u00e7ar o desenvolvimento de um algoritmo recursivo. Entre elas, temos:</p>\n<ul>\n<li>Qual \u00e9 o caso base?</li>\n<li>Qual \u00e9 a a\u00e7\u00e3o fundamental?</li>\n<li>Quantas vezes teremos uma chamada recursiva.</li>\n</ul>\n<p>Considere o seguinte padr\u00e3o impress\u00e3o:</p>\n<pre class=\"codehilite\"><code class=\"language-txt\">4\n3\n2\n1\n</code></pre>\n\n<p>No exemplo acima, estamos imprimindo todos os n\u00fameros em ordem decrescente de 4 at\u00e9 1. Neste exemplo, vamos considerar que o caso base acontece quando o valor de n \u00e9 igual a 0. A a\u00e7\u00e3o fundamental ser\u00e1 imprimir um n\u00famero e depois resolver o mesmo problema para o n\u00famero anterior.</p>\n<pre class=\"codehilite\"><code class=\"language-c\">void countDown(int n) {\n    if (n == 0) {\n        return ;\n    }\n    cout &lt;&lt; n &lt;&lt; endl;\n    countDown(n-1);\n}\n</code></pre>\n\n<p>Considere agora o seguinte padr\u00e3o de impress\u00e3o:</p>\n<pre class=\"codehilite\"><code class=\"language-txt\">4\n3\n2\n1\n1\n2\n3\n4\n</code></pre>\n\n<p>Esse padr\u00e3o pode ser reproduzido pelo seguinte programa:</p>\n<pre class=\"codehilite\"><code class=\"language-c\">void countDownUp(int n) {\n    if (n == 0) {\n        return ;\n    }\n    cout &lt;&lt; n &lt;&lt; endl;\n    countDownUp(n-1);\n    cout &lt;&lt; n &lt;&lt; endl;\n}\n</code></pre>\n\n<p>J\u00e1 o padr\u00e3o de impress\u00e3o:</p>\n<pre class=\"codehilite\"><code class=\"language-txt\">wladimir\nladimir\nadimir\ndimir\nimir\nmir\nir\nr\n</code></pre>\n\n<p>O padr\u00e3o pode ser reproduzido pelo seguinte programa:</p>\n<pre class=\"codehilite\"><code class=\"language-c\">void printTower(char * s) {\n    if (*s == '\\0') {\n        return;\n    }\n    printf(&quot;%s\\n&quot;, s);\n    printTower(s+1);\n}\n</code></pre>\n\n<p>Fa\u00e7a um program que imprima todos os sufixos de uma palavra do menor sufixo at\u00e9 o maior.</p>\n<h2 id=\"entrada\">Entrada</h2>\n<p>A entrada \u00e9 composta por uma \u00fanica linha contendo uma palavra com at\u00e9 100 caracteres.</p>\n<h2 id=\"saida\">Sa\u00edda</h2>\n<p>A sa\u00edda \u00e9 composta por <code>n</code> linhas sendo <code>n</code> o tamanho da palavra lida.</p>\n<h2 id=\"exemplo-de-entrada\">Exemplo de Entrada</h2>\n<pre class=\"codehilite\"><code class=\"language-txt\">wladimir\n</code></pre>\n\n<h2 id=\"exemplo-de-saida\">Exemplo de Sa\u00edda</h2>\n<pre class=\"codehilite\"><code class=\"language-txt\">r\nir\nmir\nimir\ndimir\nadimir\nladimir\nwladimir\n</code></pre>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\nwladimir\n======== EXPECT\nr\nir\nmir\nimir\ndimir\nadimir\nladimir\nwladimir\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\ninconstitucionalissimamente\n======== EXPECT\ne\nte\nnte\nente\nmente\namente\nmamente\nimamente\nsimamente\nssimamente\nissimamente\nlissimamente\nalissimamente\nnalissimamente\nonalissimamente\nionalissimamente\ncionalissimamente\nucionalissimamente\ntucionalissimamente\nitucionalissimamente\ntitucionalissimamente\nstitucionalissimamente\nnstitucionalissimamente\nonstitucionalissimamente\nconstitucionalissimamente\nnconstitucionalissimamente\ninconstitucionalissimamente\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\npneumoultramicroscopicossilicovulcanoconiotico\n======== EXPECT\no\nco\nico\ntico\notico\niotico\nniotico\noniotico\nconiotico\noconiotico\nnoconiotico\nanoconiotico\ncanoconiotico\nlcanoconiotico\nulcanoconiotico\nvulcanoconiotico\novulcanoconiotico\ncovulcanoconiotico\nicovulcanoconiotico\nlicovulcanoconiotico\nilicovulcanoconiotico\nsilicovulcanoconiotico\nssilicovulcanoconiotico\nossilicovulcanoconiotico\ncossilicovulcanoconiotico\nicossilicovulcanoconiotico\npicossilicovulcanoconiotico\nopicossilicovulcanoconiotico\ncopicossilicovulcanoconiotico\nscopicossilicovulcanoconiotico\noscopicossilicovulcanoconiotico\nroscopicossilicovulcanoconiotico\ncroscopicossilicovulcanoconiotico\nicroscopicossilicovulcanoconiotico\nmicroscopicossilicovulcanoconiotico\namicroscopicossilicovulcanoconiotico\nramicroscopicossilicovulcanoconiotico\ntramicroscopicossilicovulcanoconiotico\nltramicroscopicossilicovulcanoconiotico\nultramicroscopicossilicovulcanoconiotico\noultramicroscopicossilicovulcanoconiotico\nmoultramicroscopicossilicovulcanoconiotico\numoultramicroscopicossilicovulcanoconiotico\neumoultramicroscopicossilicovulcanoconiotico\nneumoultramicroscopicossilicovulcanoconiotico\npneumoultramicroscopicossilicovulcanoconiotico\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
