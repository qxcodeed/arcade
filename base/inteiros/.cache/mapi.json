{
    "title": "@inteiros: Lista Sequencial de Inteiros",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@inteiros: Lista Sequencial de Inteiros</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@inteiros: Lista Sequencial de Inteiros</h1>\n            <h1 id=\"lista-sequencial-de-inteiros\">Lista Sequencial de Inteiros</h1>\n<p>Nesse exerc\u00edcio, implementaremos m\u00e9todos de uma das estruturas mais simples por\u00e9m mais utilizadas na programa\u00e7\u00e3o: lista sequencial.</p>\n<p>Uma lista sequencial, ou tamb\u00e9m lista linear ou vetor, \u00e9 uma estrutura de dados que armazena elementos de forma cont\u00ednua na mem\u00f3ria. Cada elemento na lista pode ser acessado diretamente atrav\u00e9s de um \u00edndice, o que permite opera\u00e7\u00f5es de acesso eficientes.</p>\n<p>Por simplicidade, implementaremos uma lista sequencial de inteiros nesse exerc\u00edcio.</p>\n<p>No arquivo\u00a0<strong>lib.cpp</strong>, se encontra a classe\u00a0<strong>SequentialListInt</strong>\u00a0que possui os seguintes m\u00e9todos m\u00e9todos com cabe\u00e7alho, mas sem implementa\u00e7\u00e3o:</p>\n<ul>\n<li>~~SequentialListInt(int\u00a0maxSize);~~</li>\n<li>~~\\~SequentialListInt()~~</li>\n<li>int\u00a0get(int\u00a0index);</li>\n<li>int\u00a0getIndex(int\u00a0item);</li>\n<li>void\u00a0insertBack(int\u00a0item);</li>\n<li>void\u00a0insert(int\u00a0item,\u00a0int\u00a0index);</li>\n<li>void removeBack();</li>\n<li>void\u00a0remove(int\u00a0index);</li>\n<li>void\u00a0clear();</li>\n<li>int\u00a0lenght();</li>\n<li>bool\u00a0isEmpty();</li>\n<li>bool\u00a0isFull();</li>\n<li>~~void print();~~</li>\n</ul>\n<p>A funcionalidade de cada m\u00e9todo est\u00e1 descrita em coment\u00e1rios no pr\u00f3prio arquivo\u00a0lib.cpp.\u00a0Sua tarefa \u00e9 alterar o arquivo\u00a0lib.cpp, implementando as funcionalidades faltantes citadas.\u00a0Seu c\u00f3digo deve passar no caso de teste para ser considerado correto.</p>\n<p>OBS: N\u00e3o altere os m\u00e9todos j\u00e1 implementados.</p>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste\nteste\n======== EXPECT\n[]\n[20]\n[20,30]\n[20,30,40]\n20\n30\n40\n0\n1\n2\n-1\n[10,20,30,40]\n[10,20,30,40,50]\n5\n[10,20,30,40]\n[10,20,40]\n[20,40]\n[40]\n[]\n[]\n[]\n0\n1\n[1,2,3,4,5,6,7,8]\n[1,2,3,4,5,6,7,8]\n[1,2,3,4,5,6,7,8]\n1\n0\n[]\nSequentialListInt deleted\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "lib.cpp",
                "contents": "#include <iostream>\n// Preencha os metodos faltantes.\n// Os passos estao marcados com \"TODO\".\n\nstruct SequentialListInt {\n    int size;       // Numero de elementos na lista\n    int maxSize;    // Capacidade maxima da lista\n    int* arrayList; // Ponteiro para a lista de elementos na memoria \n\n    // Construtor\n    SequentialListInt(int maxSize){\n        this->size = 0; \n        this->maxSize = maxSize;\n        this->arrayList = new int [maxSize];\n    }\n    \n    // Destrutor\n    ~SequentialListInt(){\n        delete arrayList;\n        std::cout << \"SequentialListInt deleted\" << std::endl;\n    }\n\n    // Retorna o valor do elemento na posicao 'index'\n    int get(int index){//O(1)\n        // TODO: Retornar elemento na posicao 'index'\n        //DEL!\n        return arrayList[index];\n\n        //ACT!\n        //(void) index;\n        //return -1;\n    }\n\n    // Retorna a posicao do primeiro elemento com valor igual a 'item'.\n    // Caso o elemento nao exista na lista, retorna -1.\n    int getIndex(int item){ // O(n) ou O(size)\n        // TODO: Percorrer cada elemento do vetor e retornar caso encontre\n        //       um elemento igual a 'item'.\n        \n        // TODO: Retornar -1 caso nao encontre o elemento.\n        //DEL!\n        for(int i = 0; i < size; i++){\n            if(arrayList[i] == item){\n                return i;\n            }\n        }\n        return -1;\n\n        //ACT!\n        //(void) item;\n        //return -1;\n    }\n\n    // Se houver espaco na lista, insere o\n    // elemento 'item' no final da lista.\n    void insertBack(int item){ // O(1)\n        //DEL!\n        if(size == maxSize)\n            return;\n\n        arrayList[size] = item;\n        size++;\n\n        //ACT!\n        //(void) item;\n    }\n\n    // Se houver espaco na lista, insere o\n    // elemento 'item' na posicao 'index' da lista\n    void insert(int item, int index){ // O(n)\n        // TODO: Verificar se a fila esta cheia.\n        //       Se estiver, retorne!\n\n        // TODO: Mova todos os elementos apos o\n        //       'index' uma posicao para direita.\n        \n        // TODO: Atribua o valor de 'item' ao elemento\n        //       na posicao 'index'.\n        \n        // TODO: Atualize o 'size'\n        //DEL!\n        if(size == maxSize){\n            return;\n        }\n        for(int i = size; i > index; i--){\n            arrayList[i] = arrayList[i - 1];\n        }\n        \n        arrayList[index] = item;\n        size++;\n\n        //ACT!\n        //(void) item;\n        //(void) index;\n    }\n\n    // Se a lista nao estiver vazia,\n    // remove o ultimo elemento.\n    void removeBack(){ // O(1)\n        //DEL!\n        if(size == 0) return;\n        size--;\n    }\n\n    // Se a lista nao estiver vazia,\n    // remove elemento na posicao 'index'.\n    void remove(int index){\n        // TODO: Verificar se a fila esta vazia.\n        //       Se estiver, retorne!\n        \n        // TODO: Mova todos os elementos apos o\n        //       'index' uma posicao para esquerda.\n        \n        // TODO: Atualize o 'size'.\n        //DEL!\n        if(size == 0){\n            return;\n        }\n        for(int i = index; i < size; i++){\n            arrayList[i] = arrayList[i + 1];\n        }\n        size--;\n\n        //ACT!\n        //(void) index;\n    }\n\n    // Remove elementos da lista\n    void clear(){\n        // TODO: Atualize o 'size'.\n        //DEL!\n        size = 0;\n    }\n\n    // Retorna o tamanho da lista\n    int lenght(){\n        //DEL!\n        return size;\n\n        //ACT!\n        //return -1;\n    }\n\n    bool isEmpty(){\n        // TODO: Retorne true quando a lista nao possui elementos.\n        //DEL!\n        if(size == 0){\n            return true;\n        }\n        return false;\n\n        //ACT!\n        //return false;\n    }\n\n    bool isFull(){\n        // TODO: Retorne true quando a quantidade de elementos esta no maximo.\n        //DEL!\n        if(size == maxSize){\n            return true;\n        }\n        \n        return false;\n\n        //ACT!\n        //return false;\n    }\n\n    // Printa elementos da lista\n    void print(){\n        std::cout << \"[\";\n        for(int i = 0; i < size; i++){\n            std::cout << arrayList[i];\n            if(i != size-1)\n                std::cout << \",\";\n        }\n        std::cout << \"]\" << std::endl;\n    }\n};\n",
                "encoding": 0
            },
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao\n#include <iostream>\n#include \"lib.cpp\"\nconst int MAXSIZE = 8;\n\nint main(){\n    SequentialListInt list(MAXSIZE);\n\n    /* Testar insertBack */\n    list.print(); // []\n    list.insertBack(20);\n    list.print(); // [20]\n    list.insertBack(30);\n    list.print(); // [20,30]\n    list.insertBack(40);\n    list.print(); // [20,30,40]\n\n    /* Testar get */\n    std::cout << list.get(0) << std::endl; // 20\n    std::cout << list.get(1) << std::endl; // 30\n    std::cout << list.get(2) << std::endl; // 40\n\n    /* Testar getIndex */\n    std::cout << list.getIndex(20) << std::endl; // 0\n    std::cout << list.getIndex(30) << std::endl; // 1\n    std::cout << list.getIndex(40) << std::endl; // 2\n    std::cout << list.getIndex(99) << std::endl; // -1\n\n    /* Testar insert */\n    list.insert(10, 0);\n    list.print(); // [10,20,30,40]\n    list.insert(50, 4);\n    list.print(); // [10,20,30,40,50]\n\n    /* Testar lenght */\n    std::cout << list.lenght() << std::endl; // 5\n\n    /* Testar removeBack */\n    list.removeBack();\n    list.print(); // [10,20,30,40]\n\n    /* Testar remove */\n    list.remove(2);\n    list.print(); // [10,20,40]\n    list.remove(0);\n    list.print(); // [20,40]\n    list.remove(0);\n    list.print(); // [20]\n    list.remove(0);\n    list.print(); // []\n\n    /* Testar remover enquanto vazio*/\n    list.removeBack();\n    list.print(); // []\n    list.remove(0);\n    list.print(); // []\n\n    /* Testar maxSize */\n    std::cout << list.isFull() << std::endl; // 0\n    std::cout << list.isEmpty() << std::endl; // 1\n    list.insertBack(1);\n    list.insertBack(2);\n    list.insertBack(3);\n    list.insertBack(4);\n    list.insertBack(5);\n    list.insertBack(6);\n    list.insertBack(7);\n    list.insertBack(8);\n    list.print(); // [1,2,3,4,5,6,7,8]\n    list.insertBack(9);\n    list.print(); // [1,2,3,4,5,6,7,8]\n    list.insertBack(10);\n    list.print(); // [1,2,3,4,5,6,7,8]\n    std::cout << list.isFull() << std::endl; // 1\n    std::cout << list.isEmpty() << std::endl; // 0\n\n    /* Testar clear */\n    list.clear();\n    list.print(); // []\n\n    /* Destrutor chamado */\n    // SequentialListInt deleted\n}\n",
                "encoding": 0
            }
        ]
    }
}
