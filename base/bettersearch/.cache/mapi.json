{
    "title": "@bettersearch: Better Search com busca bin\u00e1ria",
    "description": "# Better Search com busca bin\u00e1ria\n\nVamos utilizar a busca bin\u00e1ria para buscar elementos em uma lista ordenada sem repeti\u00e7\u00e3o de valores.\n\n## Implementa\u00e7\u00e3o\n\n```py\n# python\ndef better_search(arr: list[int], value: int) -> tuple[bool, int]\n```\n\n```go\n// go\nfunc BetterSearch(arr []int, value int) (bool, int) \n```\n\n- Fa\u00e7a a implementa\u00e7\u00e3o da busca bin\u00e1ria usando o intervalo [low, high[.\n- O algoritmo para quando\n  - O elemento \u00e9 encontrado ou\n  - O intervalo de busca se torna vazio (low == high).\n- Ao final da busca, voc\u00ea pode cair nos seguintes casos.\n  - A posi\u00e7\u00e3o \u00e9 v\u00e1lida e o elemento existe. Retorne True e a posi\u00e7\u00e3o.\n  - A posi\u00e7\u00e3o \u00e9 invalida ou o elemento n\u00e3o existe. Retorne False e a posi\u00e7\u00e3o.\n  - Observe que a posi\u00e7\u00e3o retornada \u00e9 onde o elemento deve ser inserido.\n\n## Entrada e Sa\u00edda\n\n- Entrada\n  - 1a linha: vetor com os elementos inteiros entre colchetes separados por espa\u00e7o\n  - 2a linha: elemento a ser pesquisado\n- Sa\u00edda\n  - F ou V (Falso ou Verdadeiro) e a posi\u00e7\u00e3o do elemento (encontrado ou onde deve ser inserido)\n\n## Testes\n\n```bash\n>>>>>>>> INSERT\n[ ]\n4\n======== EXPECT\nF 0\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 2 3 4 ]\n1\n======== EXPECT\nV 0\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 2 3 4 ]\n2\n======== EXPECT\nV 1\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 2 3 4 ]\n3\n======== EXPECT\nV 2\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 2 3 4 ]\n4\n======== EXPECT\nV 3\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 3 4 ]\n2\n======== EXPECT\nF 1\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 2 3 5 6 7 8 ]\n4\n======== EXPECT\nF 3\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 2 3 7 8 9 ]\n0\n======== EXPECT\nF 0\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 3 5 6 7 9 10 ]\n2\n======== EXPECT\nF 1\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ 1 2 3 6 7 9 ]\n9\n======== EXPECT\nV 5\n<<<<<<<< FINISH\n\n>>>>>>>> INSERT\n[ -2 1 2 4 5 6 7 ]\n8\n======== EXPECT\nF 7\n<<<<<<<< FINISH\n\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n[ ]\n4\n======== EXPECT\nF 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 3 4 ]\n1\n======== EXPECT\nV 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 3 4 ]\n2\n======== EXPECT\nV 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 3 4 ]\n3\n======== EXPECT\nV 2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 3 4 ]\n4\n======== EXPECT\nV 3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 3 4 ]\n2\n======== EXPECT\nF 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 3 5 6 7 8 ]\n4\n======== EXPECT\nF 3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 3 7 8 9 ]\n0\n======== EXPECT\nF 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 3 5 6 7 9 10 ]\n2\n======== EXPECT\nF 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 3 6 7 9 ]\n9\n======== EXPECT\nV 5\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ -2 1 2 4 5 6 7 ]\n8\n======== EXPECT\nF 7\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "java": [
            {
                "name": "Main.java",
                "contents": "import java.util.*;\n\npublic class Main {\n    // Classe auxiliar para representar o retorno em formato (booleano, inteiro)\n    static class Result {\n        boolean found;\n        int position;\n\n        Result(boolean found, int position) {\n            this.found = found;\n            this.position = position;\n        }\n    }\n\n    public static Result betterSearch(List<Integer> arr, int value) {\n        return new Result(false, 0);\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String[] tokens = sc.nextLine().split(\" \");\n        List<Integer> vet = new ArrayList<>();\n        for (int i = 1; i < tokens.length - 1; i++) {\n            vet.add(Integer.parseInt(tokens[i]));\n        }\n        int value = Integer.parseInt(sc.nextLine());\n        Result result = betterSearch(vet, value);\n        System.out.println((result.found ? \"V\" : \"F\") + \" \" + result.position);\n        sc.close();\n    }\n}\n",
                "type": "show"
            }
        ],
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc BetterSearch(slice []int, value int) (bool, int) {\n\t_, _ = slice, value\n\treturn false, 0\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tscanner.Scan()\n\tparts := strings.Split(scanner.Text(), \" \")\n\tslice := []int{}\n\tfor _, elem := range parts[1 : len(parts)-1] {\n\t\tvalue, _ := strconv.Atoi(elem)\n\t\tslice = append(slice, value)\n\t}\n\tscanner.Scan()\n\tvalue, _ := strconv.Atoi(scanner.Text())\n\tfound, result := BetterSearch(slice, value)\n\tif found {\n\t\tfmt.Println(\"V\", result)\n\t} else {\n\t\tfmt.Println(\"F\", result)\n\t}\n}\n",
                "type": "show"
            }
        ],
        "py": [
            {
                "name": "main.py",
                "contents": "def better_search(arr: list[int], value: int) -> tuple[bool, int]:\n    \"\"\"\n    Retorna a posi\u00e7\u00e3o do elemento x na lista arr ou onde ele deve ser inserido.\n    \"\"\"\n    return False, 0\nargs = input().split()[1:-1]\nvet: list[int] = []\nfor i in range(len(args)):\n    vet.append(int(args[i]))\n\nvalue = int(input())\nresult = better_search(vet, value)\nprint(\"V\" if result[0] else \"F\", result[1])\n",
                "type": "show"
            }
        ]
    }
}
