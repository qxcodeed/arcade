{
    "title": "@editorint: Editor de texto interativo",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@editorint: Editor de texto interativo</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Editor de texto interativo</h1>\n<ul>\n<li>O editor de texto interativo utiliza uma uma lista ligada de linhas para armazenar o texto.</li>\n<li>Cada linha \u00e9 uma lista ligada de caracteres.</li>\n<li>Iteradores s\u00e3o utilizados para apontar a linha corrente e o caractere corrente dentro da linha.</li>\n<li>O cursor \u00e9 desenhado automaticamente a partir da posi\u00e7\u00e3o do iterador.</li>\n</ul>\n<h2>Auto avalia\u00e7\u00e3o</h2>\n<p>Para cada funcionalidade implementada, voc\u00ea receber\u00e1 uma pontua\u00e7\u00e3o que vai de 0 a 10. Verifique sempre os limites de cada funcionalidade, tentando sair das linhas e verificando o comportamento do editor. Esse ser\u00e1 o valor que voc\u00ea vai colocar na hora de avisar o quanto da atividade foi feita.</p>\n<ul>\n<li>[ ] 1 ponto - Left e Right em uma s\u00f3 linha.</li>\n<li>[ ] 1 ponto - Backspace e Delete em uma s\u00f3 linha.</li>\n<li>[ ] 1 ponto - Enter adiciona uma nova linha abaixo da atual e move o cursor para o in\u00edcio da nova linha.</li>\n<li>[ ] 1 ponto - Up e Down para navegar entre as linhas movendo o cursor para o in\u00edcio da linha.</li>\n<li>[ ] 1 ponto - Left no in\u00edcio da linha move o cursor para o final da linha anterior.</li>\n<li>[ ] 1 ponto - Right no final da linha move o cursor para o in\u00edcio da linha seguinte.</li>\n<li>[ ] 1 ponto - Enter no meio da linha divide a linha em duas e move o cursor para o in\u00edcio da nova linha.</li>\n<li>[ ] 1 ponto - Up e Down para navegar entre as linhas movendo o cursor para a posi\u00e7\u00e3o correta.</li>\n<li>[ ] 1 ponto - Backspace no in\u00edcio da linha puxa a linha pra cima e move o cursor para a posi\u00e7\u00e3o correta.</li>\n<li>[ ] 1 ponto - Delete no final da linha junta as linhas e move o cursor para a posi\u00e7\u00e3o correta.</li>\n</ul>\n<h2>Implementa\u00e7\u00e3o</h2>\n<ul>\n<li>Em cada arquivo <code>extra.md</code> voc\u00ea encontrar\u00e1 as orienta\u00e7\u00f5es de como fazer a configura\u00e7\u00e3o do ambiente instalando a biblioteca <code>curses</code> ou equivalente, que lhe permitir\u00e1 rodar o c\u00f3digo interativo no terminal.</li>\n<li>Voc\u00ea pode utilizar a sua implementa\u00e7\u00e3o de lista ligada ou a implementa\u00e7\u00e3o nativa da linguagem.</li>\n<li>Toda parte de manipula\u00e7\u00e3o visual j\u00e1 est\u00e1 implementada, voc\u00ea s\u00f3 precisa implementar a l\u00f3gica de manipula\u00e7\u00e3o do texto.</li>\n<li>A a\u00e7\u00e3o principal de escrever e movimentar para esquerda tamb\u00e9m j\u00e1 est\u00e3o implementadas.</li>\n</ul>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "lista.go",
                "contents": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\ntype Node[T any] struct {\n\tValue T\n\tnext  *Node[T]\n\tprev  *Node[T]\n\troot  *Node[T]\n}\n\n// Retorna o pr\u00f3ximo n\u00f3\nfunc (n *Node[T]) Next() *Node[T] {\n\treturn n.next\n}\n\n// Retorna o n\u00f3 anterior\nfunc (n *Node[T]) Prev() *Node[T] {\n\treturn n.prev\n}\n\ntype List[T any] struct {\n\troot *Node[T]\n\tsize int\n}\n\nfunc NewList[T any]() *List[T] {\n\troot := &Node[T]{}\n\troot.next = root\n\troot.prev = root\n\troot.root = root\n\treturn &List[T]{root: root, size: 0}\n}\n\nfunc (l *List[T]) PushBack(value T) {\n\tl.Insert(l.root, value)\n}\n\nfunc (l *List[T]) Insert(it *Node[T], value T) *Node[T] {\n\tn := &Node[T]{Value: value, root: l.root}\n\tn.prev = it.prev\n\tn.next = it\n\tit.prev.next = n\n\tit.prev = n\n\tl.size++\n\treturn n\n}\n\nfunc (l *List[T]) Size() int {\n\treturn l.size\n}\n\nfunc (l *List[T]) Clear() {\n\tl.root.next = l.root\n\tl.root.prev = l.root\n\tl.size = 0\n}\n\nfunc (l *List[T]) End() *Node[T] {\n\treturn l.root\n}\n\nfunc (l *List[T]) Front() *Node[T] {\n\tif l.size == 0 {\n\t\treturn l.root\n\t}\n\treturn l.root.next\n}\n\nfunc (l *List[T]) Back() *Node[T] {\n\tif l.size == 0 {\n\t\treturn l.root\n\t}\n\treturn l.root.prev\n}\n\nfunc (l *List[T]) Erase(n *Node[T]) *Node[T] {\n\tif n == l.root {\n\t\treturn l.root\n\t}\n\tn.prev.next = n.next\n\tn.next.prev = n.prev\n\tl.size--\n\treturn n.next\n}\n\nfunc (l *List[T]) IndexOf(n *Node[T]) int {\n\tif n == l.root {\n\t\treturn l.size\n\t}\n\tif n.root != l.root {\n\t\treturn -1\n\t}\n\ti := 0\n\tfor it := l.root.next; it != n; it = it.next {\n\t\ti++\n\t\tif i >= l.size {\n\t\t\treturn -1\n\t\t}\n\t}\n\treturn i\n}\n\nfunc (l *List[T]) String() string {\n\tvalues := []string{}\n\tfor n := l.root.next; n != l.root; n = n.next {\n\t\tvalues = append(values, fmt.Sprint(n.Value))\n\t}\n\treturn \"[\" + strings.Join(values, \", \") + \"]\"\n}\n",
                "type": "show"
            },
            {
                "name": "extra.md",
                "contents": "# Go\n\n- Navegue pelo terminal at\u00e9 a pasta do projeto.\n- Voc\u00ea encontrar\u00e1 os arquivos `lista.go`, `main.go`.\n\n```bash\n# Voc\u00ea precisar\u00e1 criar um projeto Go com o comando:\ngo mod init editor\n# Instale a biblioteca `tcell` com o comando\ngo get github.com/gdamore/tcell/v2\n# Estando dentro da pasta do projeto, voc\u00ea pode rodar o projeto com o comando:\ntko run *.go\n```\n\n- Caso entre em loop infinito ou d\u00ea algum erro de execu\u00e7\u00e3o, voc\u00ea pode interromper o programa com `Ctrl + C`.\n- Caso seu terminal fique estranho, voc\u00ea pode tentar restaur\u00e1-lo com o comando `reset` ou digitando `Ctrl + D` pra matar o terminal.\n",
                "type": "hide"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gdamore/tcell/v2\"\n)\n\ntype Editor struct {\n\tlines  *List[*List[rune]]\n\tline   *Node[*List[rune]]\n\tcursor *Node[rune]\n\tscreen tcell.Screen\n\tstyle  tcell.Style\n}\n\nfunc (e *Editor) InsertChar(r rune) {\n\te.cursor = e.line.Value.Insert(e.cursor, r)\n\te.cursor = e.cursor.Next()\n}\n\nfunc (e *Editor) KeyLeft() {\n\tif e.cursor != e.line.Value.Front() { // Se o cursor n\u00e3o est\u00e1 no in\u00edcio da linha\n\t\te.cursor = e.cursor.Prev() // Move o cursor para a esquerda\n\t\treturn\n\t}\n\t// Estamos no in\u00edcio da linha\n\tif e.line != e.lines.Front() { // Se n\u00e3o est\u00e1 na primeira linha\n\t\te.line = e.line.Prev()        // Move para a linha anterior\n\t\te.cursor = e.line.Value.End() // Move o cursor para o final da linha\n\t}\n}\n\nfunc (e *Editor) KeyEnter() {\n}\n\nfunc (e *Editor) KeyRight() {\n}\n\nfunc (e *Editor) KeyUp() {\n}\n\nfunc (e *Editor) KeyDown() {\n}\n\nfunc (e *Editor) KeyBackspace() {\n}\n\nfunc (e *Editor) KeyDelete() {\n}\n\nfunc main() {\n\t// Texto inicial e posi\u00e7\u00e3o do cursor\n\teditor := NewEditor()\n\teditor.Draw()\n\teditor.MainLoop()\n\tdefer editor.screen.Fini() // Encerra a tela ao sair\n}\n\nfunc (e *Editor) MainLoop() {\n\tfor {\n\t\tev := e.screen.PollEvent()\n\t\tswitch ev := ev.(type) {\n\t\tcase *tcell.EventKey:\n\t\t\tswitch ev.Key() {\n\t\t\tcase tcell.KeyEsc, tcell.KeyCtrlC:\n\t\t\t\treturn\n\t\t\tcase tcell.KeyEnter:\n\t\t\t\te.KeyEnter()\n\t\t\tcase tcell.KeyLeft:\n\t\t\t\te.KeyLeft()\n\t\t\tcase tcell.KeyRight:\n\t\t\t\te.KeyRight()\n\t\t\tcase tcell.KeyUp:\n\t\t\t\te.KeyUp()\n\t\t\tcase tcell.KeyDown:\n\t\t\t\te.KeyDown()\n\t\t\tcase tcell.KeyBackspace, tcell.KeyBackspace2:\n\t\t\t\te.KeyBackspace()\n\t\t\tcase tcell.KeyDelete:\n\t\t\t\te.KeyDelete()\n\t\t\tdefault:\n\t\t\t\tif ev.Rune() != 0 {\n\t\t\t\t\te.InsertChar(ev.Rune())\n\t\t\t\t}\n\t\t\t}\n\t\t\te.Draw()\n\t\tcase *tcell.EventResize:\n\t\t\te.screen.Sync()\n\t\t\te.Draw()\n\t\t}\n\t}\n}\n\nfunc NewEditor() *Editor {\n\te := &Editor{}\n\t// Inicializa a tela\n\tscreen, err := tcell.NewScreen()\n\tif err != nil {\n\t\tfmt.Printf(\"erro ao criar a tela: %v\", err)\n\t}\n\tif err := screen.Init(); err != nil {\n\t\tfmt.Printf(\"erro ao iniciar a tela: %v\", err)\n\t}\n\te.screen = screen\n\te.lines = NewList[*List[rune]]()\n\te.lines.PushBack(NewList[rune]())\n\te.line = e.lines.Front()\n\te.cursor = e.line.Value.Back()\n\t// Define o estilo do texto (branco com fundo preto)\n\te.style = tcell.StyleDefault.Foreground(tcell.ColorWhite).Background(tcell.ColorBlack)\n\n\t// Limpa a tela e define o estilo base\n\te.screen.SetStyle(e.style)\n\te.screen.Clear()\n\treturn e\n}\n\nfunc (e *Editor) Draw() {\n\te.screen.Clear()\n\tx := 0\n\ty := 0\n\tfor line := e.lines.Front(); line != e.lines.End(); line = line.Next() {\n\t\tfor char := line.Value.Front(); ; char = char.Next() {\n\t\t\tdata := char.Value\n\t\t\tif char == line.Value.End() {\n\t\t\t\tdata = '\u2936'\n\t\t\t}\n\t\t\tif data == ' ' {\n\t\t\t\tdata = '\u00b7'\n\t\t\t}\n\t\t\tif char == e.cursor {\n\t\t\t\te.screen.SetContent(x, y, data, nil, e.style.Reverse(true))\n\t\t\t} else {\n\t\t\t\te.screen.SetContent(x, y, data, nil, e.style)\n\t\t\t}\n\t\t\tx++\n\t\t\tif char == line.Value.End() {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\ty++\n\t\tx = 0\n\t}\n\te.screen.Show()\n}\n",
                "type": "hide"
            }
        ]
    }
}
