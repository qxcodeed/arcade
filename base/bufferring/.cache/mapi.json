{
    "title": "@bufferring: Buffer Circular (Deque Din\u00e2mico)",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@bufferring: Buffer Circular (Deque Din\u00e2mico)</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Buffer Circular (Deque Din\u00e2mico)</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#guia\">Guia</a></th>\n<th><a href=\"#como-implementar\">Como implementar</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/bufferring/cover.jpg\" /></p>\n<h2>Intro</h2>\n<ul>\n<li>Vamos implementar um deque usando um buffer circular que cresce dinamicamente.</li>\n<li>O termo Deque (Double-Ended Queue ou Fila de final duplo) refere-se a uma estrutura de dados que permite inser\u00e7\u00e3o e remo\u00e7\u00e3o de elementos em ambas as extremidades de forma eficiente.</li>\n<li>A implementa\u00e7\u00e3o mais comum do deque utiliza um vetor que manipula o \u00edndice de frente (<code>front</code>) e (<code>size</code>) para controlar a posi\u00e7\u00e3o de leitura e escrita dos elementos em ambas as extremidades.</li>\n<li>Quando um dos \u00edndices atinge o in\u00edcio ou o final do vetor, ele \u00e9 ajustado para o outro lado do vetor, criando um efeito circular.</li>\n</ul>\n<h2>Guide</h2>\n<p>Esse deque simula uma lista de dois lados usando um vetor circular. O \u00edndice de frente (<code>front</code>) e o (<code>size</code>) controlam a posi\u00e7\u00e3o de leitura e escrita. A estrutura precisa ser redimensionada quando est\u00e1 cheia, mantendo a ordem correta dos elementos.</p>\n<h2>Guia</h2>\n<ul>\n<li>Se sua linguagem d\u00e1 suporte, utilize uma estrutura interna que lhe ofere\u00e7a um vetor din\u00e2mico, como <code>ArrayList</code> em Java, <code>vector</code> em C++, ou <code>slice</code> em Go.</li>\n<li>O buffer circular \u00e9 uma estrutura que permite opera\u00e7\u00f5es de inser\u00e7\u00e3o e remo\u00e7\u00e3o eficientes em ambas as extremidades, mantendo a ordem dos elementos.</li>\n<li>O buffer pode ser a estrutura base para implementar uma fila, que possui opera\u00e7\u00f5es de inser\u00e7\u00e3o em um lado e remo\u00e7\u00e3o do outro.</li>\n<li>Outra implementa\u00e7\u00e3o poss\u00edvel para o buffer seria utilizando uma lista duplamente encadeada. Mas a implementa\u00e7\u00e3o com vetor circular \u00e9 mais eficiente em termos de utiliza\u00e7\u00e3o do cache de mem\u00f3ria e velocidade de acesso. Ou seja, mesmo que tanto a implementa\u00e7\u00e3o com lista ligada ou com vetor circular sejam O(1) para as opera\u00e7\u00f5es de inser\u00e7\u00e3o e remo\u00e7\u00e3o, a implementa\u00e7\u00e3o com vetor circular \u00e9 mais r\u00e1pida devido \u00e0 forma como a mem\u00f3ria \u00e9 acessada e manipulada pelo processador.</li>\n<li>A implementa\u00e7\u00e3o deve incluir as seguintes opera\u00e7\u00f5es:<ul>\n<li>Criar um deque vazio com capacidade inicial: O(1).</li>\n<li>Verificar se o deque est\u00e1 vazio: O(1).</li>\n<li>Inserir um elemento na frente, redimensionando o vetor se necess\u00e1rio: O(1) amortizado.</li>\n<li>Inserir um elemento no fim, redimensionando o vetor se necess\u00e1rio: O(1) amortizado.</li>\n<li>Remover um elemento da frente: O(1).</li>\n<li>Remover um elemento do fim: O(1).</li>\n<li>Obter o tamanho do deque: O(1).</li>\n<li>Limpar o deque: O(1).</li>\n<li>Gerar uma representa\u00e7\u00e3o em string dos elementos do deque para debug: O(n).</li>\n</ul>\n</li>\n<li>Observa\u00e7\u00f5es interessantes:<ul>\n<li>Diferente de uma lista, o deque n\u00e3o deve ter um m\u00e9todo de acesso direto aos elementos, ou seja, n\u00e3o deve ter um m\u00e9todo que permita acessar um elemento em uma posi\u00e7\u00e3o espec\u00edfica do deque. A \u00fanica forma de acessar os elementos do deque \u00e9 atrav\u00e9s das opera\u00e7\u00f5es de inser\u00e7\u00e3o e remo\u00e7\u00e3o.</li>\n<li>Deques normalmente n\u00e3o possuem iteradores, m\u00e9todos de busca ou percorrimento. O m\u00e9todo <code>toString</code> aqui \u00e9 apenas para debug e visualiza\u00e7\u00e3o do estado do deque e normalmente n\u00e3o \u00e9 disponibilizado em implementa\u00e7\u00f5es reais de deques.</li>\n<li>O conceito de amortizado se refere ao fato de que, embora a opera\u00e7\u00e3o de inser\u00e7\u00e3o possa ser O(n) quando o vetor precisa ser redimensionado, a maioria das inser\u00e7\u00f5es ser\u00e1 O(1), resultando em um custo m\u00e9dio O(1) ao longo de v\u00e1rias opera\u00e7\u00f5es.</li>\n</ul>\n</li>\n</ul>\n<h2>Como implementar</h2>\n<p>Estrutura b\u00e1sica do deque:</p>\n<div class=\"language-ts highlight\"><pre><span></span><code><span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">Deque</span><span class=\"p\">[</span><span class=\"nx\">T</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">data</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"nx\">T</span>\n<span class=\"w\">    </span><span class=\"nx\">front</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\">  </span><span class=\"c1\">// posi\u00e7\u00e3o do primeiro elemento</span>\n<span class=\"w\">    </span><span class=\"nx\">size</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\">   </span><span class=\"c1\">// n\u00famero de elementos no deque</span>\n<span class=\"w\">    </span><span class=\"nx\">capacity</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\">  </span><span class=\"c1\">// capacidade total do deque</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>Um deque vazio inicia com <code>data</code> de acordo com a capacidade especificada, <code>front</code> em 0, <code>size</code> em 0 e <code>capacity</code> em 0.</li>\n<li>Quando o deque est\u00e1 cheio e um novo elemento \u00e9 adicionado, primeiro o vetor \u00e9 redimensionado para o dobro do tamanho atual e os elementos s\u00e3o copiados para a nova posi\u00e7\u00e3o, mantendo a ordem correta, depois o novo elemento \u00e9 adicionado.</li>\n<li>Para cada opera\u00e7\u00e3o de inser\u00e7\u00e3o ou remo\u00e7\u00e3o, o \u00edndice <code>front</code> e <code>size</code> s\u00e3o atualizados corretamente, considerando o tamanho do vetor e a posi\u00e7\u00e3o circular.</li>\n<li>Uma opera\u00e7\u00e3o de push_back adiciona um elemento no final, aumentando o <code>size</code>.</li>\n<li>Uma opera\u00e7\u00e3o de push_front adiciona um elemento no in\u00edcio, movendo o <code>front</code> para tr\u00e1s de forma circular.</li>\n<li>Uma opera\u00e7\u00e3o de pop_front remove o elemento do in\u00edcio, movendo o <code>front</code> para frente.</li>\n<li>Voc\u00ea pode calcular a posi\u00e7\u00e3o circular usando a f\u00f3rmula <code>(index + capacity) % capacity</code>, onde <code>index</code> \u00e9 o \u00edndice desejado e <code>capacity</code> \u00e9 o tamanho do vetor.<ul>\n<li>Por exemplo, uma opera\u00e7\u00e3o de push_back insere o elemento na posi\u00e7\u00e3o <code>(front + size) % capacity</code></li>\n<li>Enquanto uma opera\u00e7\u00e3o de push_front insere o elemento na posi\u00e7\u00e3o <code>(front - 1 + capacity) % capacity</code>.</li>\n</ul>\n</li>\n<li>Os m\u00e9todos <code>front</code> e <code>back</code> retornam os elementos na frente e no final do deque, respectivamente, sem remov\u00ea-los.</li>\n<li>As nomeclaturas mudam um pouco dependendo da linguagem, mas o conceito \u00e9 o mesmo.<ul>\n<li>Em C++, os m\u00e9todos s\u00e3o chamados de <code>front</code> e <code>back</code>.</li>\n<li>Por exemplo, em Java, os m\u00e9todos podem ser chamados de usam <code>First</code> e <code>Last</code>.</li>\n<li>Em Python, \u00e9 utilizado <code>left</code> e <code>right</code>.</li>\n</ul>\n</li>\n</ul>\n<h2>Draft</h2>\n<!-- links .cache/draft -->\n<ul>\n<li>go<ul>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/bufferring/.cache/draft/go/extra.md\">extra.md</a></li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/bufferring/.cache/draft/go/main.go\">main.go</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE size</span>\n<span class=\"nv\">$size</span>\n<span class=\"m\">0</span>\n<span class=\"nv\">$debug</span>\n&gt;_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"nv\">$debug</span>\n&gt;4<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_\n<span class=\"nv\">$size</span>\n<span class=\"m\">1</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"nv\">$debug</span>\n&gt;4<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_\n<span class=\"nv\">$size</span>\n<span class=\"m\">2</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE pop_front</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$debug</span>\n&gt;4<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_\n<span class=\"nv\">$pop_front</span>\n<span class=\"nv\">$debug</span>\n<span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span>&gt;3<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$debug</span>\n<span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span>&gt;3<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$pop_front</span>\n<span class=\"nv\">$debug</span>\n<span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span>&gt;2<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$debug</span>\n<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span>&gt;2<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"nv\">$debug</span>\n<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">6</span><span class=\"w\"> </span><span class=\"p\">|</span>&gt;2<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">7</span>\n<span class=\"nv\">$debug</span>\n&gt;2<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">6</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">7</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE clear</span>\n<span class=\"nv\">$push_front</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$debug</span>\n<span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span>&gt;1\n<span class=\"nv\">$push_front</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"nv\">$debug</span>\n<span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span>&gt;2<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$push_front</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$debug</span>\n<span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span>&gt;3<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$push_front</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$debug</span>\n&gt;4<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$push_front</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$debug</span>\n<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span>&gt;5\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">5</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$clear</span>\n<span class=\"nv\">$debug</span>\n&gt;_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE pop_front</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_front</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_front</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_front</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_front</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$pop_front</span>\nfail:<span class=\"w\"> </span>buffer<span class=\"w\"> </span>vazio\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE pop_back</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_back</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_back</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_back</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_back</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$pop_back</span>\nfail:<span class=\"w\"> </span>buffer<span class=\"w\"> </span>vazio\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE front e back</span>\n\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$push_front</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"nv\">$debug</span>\n<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>_<span class=\"w\"> </span><span class=\"p\">|</span>&gt;6<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$front</span>\n<span class=\"m\">6</span>\n<span class=\"nv\">$back</span>\n<span class=\"m\">3</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT size\nsize\ndebug\npush_back 4\nshow\ndebug\nsize\npush_back 3\nshow\ndebug\nsize\nend\n======== EXPECT\n$size\n0\n$debug\n>_ | _ | _ | _\n$push_back 4\n$show\n[4]\n$debug\n>4 | _ | _ | _\n$size\n1\n$push_back 3\n$show\n[4, 3]\n$debug\n>4 | 3 | _ | _\n$size\n2\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT pop_front\npush_back 4 3 2\ndebug\npop_front\ndebug\npush_back 1\ndebug\npop_front\ndebug\npush_back 5\ndebug\npush_back 6\ndebug\npush_back 7\ndebug\nend\n======== EXPECT\n$push_back 4 3 2\n$debug\n>4 | 3 | 2 | _\n$pop_front\n$debug\n _ |>3 | 2 | _\n$push_back 1\n$debug\n _ |>3 | 2 | 1\n$pop_front\n$debug\n _ | _ |>2 | 1\n$push_back 5\n$debug\n 5 | _ |>2 | 1\n$push_back 6\n$debug\n 5 | 6 |>2 | 1\n$push_back 7\n$debug\n>2 | 1 | 5 | 6 | 7 | _ | _ | _\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT clear\npush_front 1\ndebug\npush_front 2\ndebug\npush_front 3\ndebug\npush_front 4\ndebug\nshow\npush_front 5\ndebug\nshow\nclear\ndebug\nshow\nend\n======== EXPECT\n$push_front 1\n$debug\n _ | _ | _ |>1\n$push_front 2\n$debug\n _ | _ |>2 | 1\n$push_front 3\n$debug\n _ |>3 | 2 | 1\n$push_front 4\n$debug\n>4 | 3 | 2 | 1\n$show\n[4, 3, 2, 1]\n$push_front 5\n$debug\n 4 | 3 | 2 | 1 | _ | _ | _ |>5\n$show\n[5, 4, 3, 2, 1]\n$clear\n$debug\n>_ | _ | _ | _ | _ | _ | _ | _\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT pop_front\npush_back 1 3 4 5\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\nend\n======== EXPECT\n$push_back 1 3 4 5\n$show\n[1, 3, 4, 5]\n$pop_front\n$show\n[3, 4, 5]\n$pop_front\n$show\n[4, 5]\n$pop_front\n$show\n[5]\n$pop_front\n$show\n[]\n$pop_front\nfail: buffer vazio\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT pop_back\npush_back 1 3 4 5\nshow\npop_back\nshow\npop_back\nshow\npop_back\nshow\npop_back\nshow\npop_back\nshow\nend\n======== EXPECT\n$push_back 1 3 4 5\n$show\n[1, 3, 4, 5]\n$pop_back\n$show\n[1, 3, 4]\n$pop_back\n$show\n[1, 3]\n$pop_back\n$show\n[1]\n$pop_back\n$show\n[]\n$pop_back\nfail: buffer vazio\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT front e back\npush_back 1 2 3\npush_front 4 5 6\ndebug\nfront\nback\nend\n======== EXPECT\n$push_back 1 2 3\n$push_front 4 5 6\n$debug\n 4 | 1 | 2 | 3 | _ | _ |>6 | 5\n$front\n6\n$back\n3\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# Go\n\nNesta atividade, implementamos um **buffer circular com redimensionamento autom\u00e1tico**. A estrutura se comporta como uma fila circular, permitindo inser\u00e7\u00f5es no in\u00edcio ou no fim e remo\u00e7\u00f5es em ambos os lados, mantendo os elementos em um vetor fixo que cresce conforme necess\u00e1rio.\n\n## Diagrama de Implementa\u00e7\u00e3o\n\n```go\nclass Deque {\n    data []int           // vetor que guarda os elementos\n    front int            // \u00edndice do in\u00edcio\n    size, capacity int   // tamanho atual e capacidade total\n    resize(newCap int)   // dobra o tamanho do caso ele chege no m\u00e1ximo de sua capacidade\n    PushBack(v int)      // insere valor no fim\n    PushFront(v int)     // insere valor no in\u00edcio\n    PopBack()            // remove valor do fim\n    PopFront()           // remove valor do in\u00edcio\n    Front() (int, error) // retorna o valor do in\u00edcio\n    Back() (int, error)  // retorna o valor do fim\n    Clear()              // limpa todos os elementos\n    Len() int            // retorna o n\u00famero de elementos\n    String() string      // representa\u00e7\u00e3o no formato [1, 2, 3]\n}\n```\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\ntype Deque struct {\n\tdata     []int\n\tfront    int\n\tsize     int\n\tcapacity int\n}\n\nfunc (b *Deque) String() string {\n\tresult := []string{}\n\tfor i := range b.size {\n\t\tval := b.data[(b.front+i)%b.capacity]\n\t\tresult = append(result, fmt.Sprint(val))\n\t}\n\treturn \"[\" + strings.Join(result, \", \") + \"]\"\n}\n\nfunc (b *Deque) Debug() string {\n\tresult := make([]string, b.capacity)\n\tfor i, _ := range result {\n\t\tresult[i] = \" _\"\n\t\tif i == b.front {\n\t\t\tresult[i] = \">_\"\n\t\t}\n\t}\n\tfor i := range b.size {\n\t\tindex := (b.front + i) % b.capacity\n\t\tval := b.data[index]\n\t\tprefix := \" \"\n\t\tif i == 0 {\n\t\t\tprefix = \">\"\n\t\t}\n\t\tresult[index] = fmt.Sprintf(\"%s%d\", prefix, val)\n\t}\n\treturn strings.Join(result, \" |\")\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tbuf := &Deque{data: make([]int, 4), capacity: 4}\n\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\tfmt.Println(line)\n\t\targs := strings.Fields(line)\n\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := args[0]\n\n\t\tswitch cmd {\n\t\tcase \"show\":\n\t\t\tfmt.Println(buf.String())\n\t\tcase \"debug\":\n\t\t\tfmt.Println(buf.Debug())\n\t\tcase \"size\":\n\t\t\t// fmt.Println(buf.Len())\n\t\tcase \"push_back\":\n\t\t\t// for _, v := range args[1:] {\n\t\t\t// \tnum, _ := strconv.Atoi(v)\n\t\t\t// \tbuf.PushBack(num)\n\t\t\t// }\n\t\tcase \"push_front\":\n\t\t\t// for _, v := range args[1:] {\n\t\t\t// \tnum, _ := strconv.Atoi(v)\n\t\t\t// \tbuf.PushFront(num)\n\t\t\t// }\n\t\tcase \"pop_back\":\n\t\t\t// if err := buf.PopBack(); err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// }\n\t\tcase \"pop_front\":\n\t\t\t// if err := buf.PopFront(); err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// }\n\t\tcase \"front\":\n\t\t\t// if val, err := buf.Front(); err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(val)\n\t\t\t// }\n\t\tcase \"back\":\n\t\t\t// if val, err := buf.Back(); err != nil {\n\t\t\t// \tfmt.Println(err)\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(val)\n\t\t\t// }\n\t\tcase \"clear\":\n\t\t\t// buf.Clear()\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
