{
    "title": "@bufferring: Buffer Circular (Deque Din\u00e2mico)",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@bufferring: Buffer Circular (Deque Din\u00e2mico)</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Buffer Circular (Deque Din\u00e2mico)</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/bufferring/cover.jpg\" /></p>\n<h2>Intro</h2>\n<ul>\n<li>Vamos implementar um deque usando um buffer circular que cresce dinamicamente.</li>\n<li>O buffer usa um vetor circular interno e suporta inser\u00e7\u00e3o e remo\u00e7\u00e3o tanto na frente quanto no fim.</li>\n<li>A capacidade inicial \u00e9 de 4 elementos, e ela dobra automaticamente se necess\u00e1rio.</li>\n</ul>\n<h2>Guide</h2>\n<p>Esse deque simula uma lista de dois lados usando um vetor circular. Os \u00edndices de cabe\u00e7a (<code>head</code>) e cauda (<code>tail</code>) controlam a posi\u00e7\u00e3o de leitura e escrita. A estrutura cresce quando est\u00e1 cheia, mantendo a ordem correta dos elementos.</p>\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE size</span>\n<span class=\"nv\">$size</span>\n<span class=\"m\">0</span>\n<span class=\"nv\">$push_front</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"nv\">$size</span>\n<span class=\"m\">1</span>\n<span class=\"nv\">$push_front</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"nv\">$size</span>\n<span class=\"m\">4</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE clear</span>\n<span class=\"nv\">$push_front</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$clear</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$clear</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$push_front</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE push_back &lt;value ...&gt;</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"nv\">$push_front</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">0</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE pop_front</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_front</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_front</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_front</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_front</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$pop_front</span>\nfail:<span class=\"w\"> </span>buffer<span class=\"w\"> </span>vazio\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE pop_back</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_back</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_back</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_back</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$pop_back</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$pop_back</span>\nfail:<span class=\"w\"> </span>buffer<span class=\"w\"> </span>vazio\n<span class=\"nv\">$show</span>\n<span class=\"o\">[]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT size\nsize\npush_front 4\nshow\nsize\npush_front 3 2 1\nshow\nsize\nend\n======== EXPECT\n$size\n0\n$push_front 4\n$show\n[4]\n$size\n1\n$push_front 3 2 1\n$show\n[1, 2, 3, 4]\n$size\n4\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT clear\npush_front 1 2 3 4\nshow\nclear\nshow\nclear\nshow\npush_front 1 2 3 4\nshow\nend\n======== EXPECT\n$push_front 1 2 3 4\n$show\n[4, 3, 2, 1]\n$clear\n$show\n[]\n$clear\n$show\n[]\n$push_front 1 2 3 4\n$show\n[4, 3, 2, 1]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT push_back <value ...>\npush_back 1 2 3 4\nshow\npush_back 1 2 3 4\nshow\npush_front 0 3\nshow\nend\n======== EXPECT\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4]\n$push_back 1 2 3 4\n$show\n[1, 2, 3, 4, 1, 2, 3, 4]\n$push_front 0 3\n$show\n[3, 0, 1, 2, 3, 4, 1, 2, 3, 4]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT pop_front\npush_back 1 3 4 5\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\nend\n======== EXPECT\n$push_back 1 3 4 5\n$show\n[1, 3, 4, 5]\n$pop_front\n$show\n[3, 4, 5]\n$pop_front\n$show\n[4, 5]\n$pop_front\n$show\n[5]\n$pop_front\n$show\n[]\n$pop_front\nfail: buffer vazio\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT pop_back\npush_back 1 3 4 5\nshow\npop_back\nshow\npop_back\nshow\npop_back\nshow\npop_back\nshow\npop_back\nshow\nend\n======== EXPECT\n$push_back 1 3 4 5\n$show\n[1, 3, 4, 5]\n$pop_back\n$show\n[1, 3, 4]\n$pop_back\n$show\n[1, 3]\n$pop_back\n$show\n[1]\n$pop_back\n$show\n[]\n$pop_back\nfail: buffer vazio\n$show\n[]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# Go\n\nNesta atividade, implementamos um **buffer circular com redimensionamento autom\u00e1tico**. A estrutura se comporta como uma fila circular, permitindo inser\u00e7\u00f5es no in\u00edcio ou no fim e remo\u00e7\u00f5es em ambos os lados, mantendo os elementos em um vetor fixo que cresce conforme necess\u00e1rio.\n\n## Diagrama de Implementa\u00e7\u00e3o\n\n```go\nclass CircularBuffer {\n    data []int           // vetor que guarda os elementos\n    head, tail int       // \u00edndices de in\u00edcio e fim do buffer\n    size, capacity int   // tamanho atual e capacidade total\n    resize(newCap int)   // dobra o tamanho do caso ele chege no m\u00e1ximo de sua capacidade\n    PushBack(v int)      // insere valor no fim\n    PushFront(v int)     // insere valor no in\u00edcio\n    PopBack()            // remove valor do fim\n    PopFront()           // remove valor do in\u00edcio\n    Clear()              // limpa todos os elementos\n    Len() int            // retorna o n\u00famero de elementos\n    String() string      // representa\u00e7\u00e3o no formato [1, 2, 3]\n}\n```\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// // Essa fun\u00e7\u00e3o vai de brinde pra voc\u00ea\n// func (b *CircularBuffer) String() string {\n// \tresult := []string{}\n// \tfor i := range b.size {\n// \t\tval := b.data[(b.head+i)%b.capacity]\n// \t\tresult = append(result, fmt.Sprint(val))\n// \t}\n// \treturn \"[\" + strings.Join(result, \", \") + \"]\"\n// }\n// \nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n// \tbuf := NewCircularBuffer(4)\n\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\tfmt.Println(line)\n\t\targs := strings.Fields(line)\n\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := args[0]\n\n\t\tswitch cmd {\n\t\tcase \"show\":\n\t\t\t// fmt.Println(buf.String())\n\t\tcase \"size\":\n\t\t\t// fmt.Println(buf.Len())\n\t\tcase \"push_back\":\n\t\t\t// for _, v := range args[1:] {\n\t\t\t// \tnum, _ := strconv.Atoi(v)\n\t\t\t// \tbuf.PushBack(num)\n\t\t\t// }\n\t\tcase \"push_front\":\n\t\t\t// for _, v := range args[1:] {\n\t\t\t// \tnum, _ := strconv.Atoi(v)\n\t\t\t// \tbuf.PushFront(num)\n\t\t\t// }\n\t\tcase \"pop_back\":\n\t\t\t// buf.PopBack()\n\t\tcase \"pop_front\":\n\t\t\t// buf.PopFront()\n\t\tcase \"clear\":\n\t\t\t// buf.Clear()\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
