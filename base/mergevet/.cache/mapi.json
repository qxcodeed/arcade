{
    "title": "L2 - @mergevet: Criando um vetor simples e fazendo um merge $alpha",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>L2 - @mergevet: Criando um vetor simples e fazendo um merge\n$alpha</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h1\nid=\"l2---mergevet-criando-um-vetor-simples-e-fazendo-um-merge-alpha\">L2\n- <span class=\"citation\" data-cites=\"mergevet\">@mergevet</span>: Criando\num vetor simples e fazendo um merge $alpha</h1>\n<ul>\n<li>Veja a vers\u00e3o online: <a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/mergevet/Readme.md\">aqui.</a></li>\n<li>Para programar na sua m\u00e1quina (local/virtual) use:\n<ul>\n<li><code>tko down ed mergevet</code></li>\n</ul></li>\n<li>Se n\u00e3o tem o <code>tko</code>, instale pelo <a\nhref=\"https://github.com/senapk/tko#tko\">LINK</a>.</li>\n</ul>\n<hr />\n<ul>\n<li><p>Nessa atividade voc\u00ea vai aprender sobre</p></li>\n<li><p>Construtor de c\u00f3pia</p></li>\n<li><p>Lista de inicializa\u00e7\u00e3o</p></li>\n<li><p>Operador de igualdade</p></li>\n<li><p>M\u00e9todos no vetor</p></li>\n</ul>\n<p>Essa atividade ainda n\u00e3o tem os testes, voc\u00ea pode rodar o \u00fanico caso\nde teste executando a main.</p>\n<!-- links .cache/lang -->\n<ul>\n<li>cpp\n<ul>\n<li><a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/mergevet/.cache/lang/cpp/main.cpp\">main.cpp</a>\n<!-- links --></li>\n</ul></li>\n</ul>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n\nclass Vetor {\n    int *u;  // ponteiro para dados\n    int size; // tamanho do vetor\npublic:\n    // construtor base\n    Vetor(int n) {\n        (void) n;\n        // inicie u com n posi\u00e7\u00f5es usando new\n        // size deve ser 0\n    }\n   ~Vetor() { \n        // deletar o vetor u\n\n    }\n    int operator[] (int k) {\n        (void) k;\n        return 0;\n        // retornar o elemento k do vetor\n    } \n\n    int len() { return size; }\n\n    // ####################################\n    // metodos para voc\u00ea fazer\n    // ####################################\n\n    // permite inicializar assim Vetor V = {1,2,3};\n    // Uma lista de inicializa\u00e7\u00e3o \u00e9 um conjunto de elementos entre chaves\n    // ele tem um m\u00e9todo size() que retorna o tamanho da lista\n    // e tamb\u00e9m pode ser percorrido com um for(int elem : v)\n    Vetor(std::initializer_list<int> v) {\n        (void) v;\n        // inicie o vetor com o tamanho da lista\n        // e copie os elementos da lista para o vetor\n        // inicialize size adequadamente\n    }\n\n    // se n\u00e3o tiver o construtor de c\u00f3pia para estruturas din\u00e2micas\n    // quando fazemos uma atribui\u00e7\u00e3o, o ponteiro \u00e9 copiado e n\u00e3o o conte\u00fado\n    // e voc\u00ea ter\u00e1 um erro de double free\n    Vetor(const Vetor& V) {\n        (void) V;\n        // inicie u com o tamanho de V\n        // inicie size com o tamanho de V\n        // copie os elementos de V para u\n    }\n\n    bool empty() {\n        return 0;\n        // retorne se o vetor est\u00e1 vazio\n    } \n    int back() {\n        return 0;\n        // retorne o valor do \u00faltimo elemento valido\n    }\n    void pop_back() {\n        // diminua o tamanho do vetor\n    }\n    void push_back(int x) {\n        (void) x;\n        // adicione x no final do vetor\n        // aumente o tamanho do vetor\n    }\n\n    // vai lhe ajudar se voc\u00ea quiser fazer debug e imprimir o vetor\n    std::string str() {\n        return \"\";\n    }\n\n    // verificar se dois vetores s\u00e3o iguais\n    bool operator==(Vetor& V) {\n        (void) V;\n        return false;\n    }\n};\n\n\n//####################################\n// METODOS DO ALUNO\n//####################################\n// retorna o \u00edndice do vetor que tem o menor \u00faltimo elemento\nint ind_menor_ultimo(Vetor U[], int n) {\n    (void) U;\n    (void) n;\n    return -1;\n}\n\n// junta todos os vetores em um s\u00f3 utilizando a seguinte l\u00f3gica\n// enquanto houver elementos em algum vetor\n//     pegue o \u00edndice do vetor com o menor \u00faltimo elemento\n//     adicione o \u00faltimo elemento desse vetor no resultado\n\nVetor mergeAll(Vetor U[], int n) {\n\n    (void) U;\n    (void) n;\n    return Vetor(0);\n}\n\n/*\nExemplo\n\nU = { [6,8,5], [3,2,1], [4,0,9] }\n\n{ [6,8,5], [3,2], [4,0,9] } => {1}\n{ [6,8,5], [3], [4,0,9] } => {1,2}\n{ [6,8,5], [], [4,0,9] } => {1,2,3}\n{ [6,8], [], [4,0,9] } => {1,2,3,5}\n{ [6], [], [4,0,9] } => {1,2,3,5,8}\n{ [], [], [4,0,9] } => {1,2,3,5,8,6}\n{ [], [], [] } => {1,2,3,5,8,6,9,0,4}\n\n*/\n\n// #############################################\n// MAIN COM O TESTE\n// #############################################\nint main() {\n    Vetor U1 = {6,8,5}; // utilizando o construtor da lista de inicializa\u00e7\u00e3o\n    Vetor U2 = {3,2,1};\n    Vetor U3 = {4,0,9};\n    Vetor U[3] = {U1, U2, U3};\n\n    // na hora que o mergeAll devolve o vetor, ele chama o construtor de c\u00f3pia\n    Vetor received = mergeAll(U, 3); \n    Vetor expected = {1,2,3,5,8,6,9,0,4};\n\n    // para comparar, estamos utilizando o operador de igualdade\n    if (received == expected) {\n        std::cout << \"Teste passou\" << std::endl;\n    } else {\n        std::cout << \"Teste falhou\" << std::endl;\n        // se falhou, vamos imprimir o que era esperado e o que foi recebido\n        std::cout << \"Esperado: \" << expected.str() << std::endl;\n        std::cout << \"Recebido: \" << received.str() << std::endl;\n    }\n    return 0;\n}",
                "encoding": 0
            }
        ]
    }
}
