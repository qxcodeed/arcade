{
    "title": "@mergevet: Criando um vetor simples e fazendo um merge",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@mergevet: Criando um vetor simples e fazendo um merge</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Criando um vetor simples e fazendo um merge</h1>\n<ul>\n<li>\n<p>Nessa atividade voc\u00ea vai aprender sobre</p>\n</li>\n<li>\n<p>Construtor de c\u00f3pia</p>\n</li>\n<li>Lista de inicializa\u00e7\u00e3o</li>\n<li>Operador de igualdade</li>\n<li>M\u00e9todos no vetor</li>\n</ul>\n<p>Essa atividade ainda n\u00e3o tem os testes, voc\u00ea pode rodar o \u00fanico caso de teste executando a main.</p>\n<h2>Guide</h2>\n<ul>\n<li>Voc\u00ea deve implementar os m\u00e9todos da biblioteca <code>lib.hpp</code>.</li>\n<li>Na classe <code>main.cpp</code> est\u00e3o todos os casos de teste.</li>\n<li>Sugiro implementar os m\u00e9todos na ordem sugerida no <code>main.cpp</code>.</li>\n</ul>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp<ul>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/mergevet/.cache/draft/cpp/lib.hpp\">lib.hpp</a></li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/mergevet/.cache/draft/cpp/main.cpp\">main.cpp</a></li>\n</ul>\n</li>\n</ul>\n<!-- links -->\n\n<h2>Testes</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n<span class=\"nv\">1</span>\n<span class=\"o\">========</span>\nCriando<span class=\"w\"> </span>vetor<span class=\"w\"> </span>com<span class=\"w\"> </span>capacidade<span class=\"w\"> </span><span class=\"m\">4</span>\nsize:<span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n<span class=\"nv\">2</span>\n<span class=\"o\">========</span>\nAdicionando<span class=\"w\"> </span><span class=\"m\">1</span>,2,3,0<span class=\"w\"> </span>usando<span class=\"w\"> </span>push<span class=\"w\"> </span>back\nEsperado:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,3,0<span class=\"o\">]</span>\nRecebido:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,3,0<span class=\"o\">]</span>\nElemento<span class=\"w\"> </span><span class=\"m\">2</span>:<span class=\"w\"> </span><span class=\"m\">3</span>\nMudando<span class=\"w\"> </span>elemento<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span>para<span class=\"w\"> </span><span class=\"m\">5</span>\nEsperado:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,5,0<span class=\"o\">]</span>\nRecebido:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,5,0<span class=\"o\">]</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n<span class=\"nv\">3</span>\n<span class=\"o\">========</span>\nCriando<span class=\"w\"> </span>vetor<span class=\"w\"> </span>com<span class=\"w\"> </span>lista<span class=\"w\"> </span>de<span class=\"w\"> </span>inicializa\u00e7\u00e3o<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"m\">1</span>,2,3<span class=\"o\">}</span>\nEsperado:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,3<span class=\"o\">]</span>\nRecebido:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,3<span class=\"o\">]</span>\nCriando<span class=\"w\"> </span>vetor<span class=\"w\"> </span>com<span class=\"w\"> </span>c\u00f3pia<span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span>anterior\nEsperado:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,3<span class=\"o\">]</span>\nRecebido:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>,2,3<span class=\"o\">]</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n<span class=\"nv\">4</span>\n<span class=\"o\">========</span>\nCriando<span class=\"w\"> </span>vetor<span class=\"w\"> </span>v1<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"m\">4</span>,5,1<span class=\"o\">}</span>\nCriando<span class=\"w\"> </span>vetor<span class=\"w\"> </span>v2<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"m\">4</span>,5,1,7<span class=\"o\">}</span>\nFazendo<span class=\"w\"> </span><span class=\"nv\">v1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span>v2\nEsperado:<span class=\"w\"> </span><span class=\"m\">0</span>\nRecebido:<span class=\"w\"> </span><span class=\"m\">0</span>\nFazendo<span class=\"w\"> </span>pop_back<span class=\"w\"> </span>em<span class=\"w\"> </span>v2\nFazendo<span class=\"w\"> </span><span class=\"nv\">v1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span>v2\nEsperado:<span class=\"w\"> </span><span class=\"m\">1</span>\nRecebido:<span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n<span class=\"nv\">5</span>\n<span class=\"o\">========</span>\nInicializando<span class=\"w\"> </span>vetores<span class=\"w\"> </span>va,<span class=\"w\"> </span>vb<span class=\"w\"> </span>e<span class=\"w\"> </span>vc\nCriando<span class=\"w\"> </span>vetor<span class=\"w\"> </span>va<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"m\">6</span>,8,5<span class=\"o\">}</span>\nCriando<span class=\"w\"> </span>vetor<span class=\"w\"> </span>vb<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"m\">3</span>,2,1<span class=\"o\">}</span>\nCriando<span class=\"w\"> </span>vetor<span class=\"w\"> </span>vc<span class=\"w\"> </span><span class=\"o\">{</span><span class=\"m\">4</span>,0,9<span class=\"o\">}</span>\nFazendo<span class=\"w\"> </span>merge\nEsperado:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>,2,1,4,0,6,8,5,9<span class=\"o\">]</span>\nRecebido:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>,2,1,4,0,6,8,5,9<span class=\"o\">]</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt;&lt;\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n1\n======== EXPECT\nCriando vetor com capacidade 4\nsize: 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n2\n======== EXPECT\nAdicionando 1,2,3,0 usando push back\nEsperado: [1,2,3,0]\nRecebido: [1,2,3,0]\nElemento 2: 3\nMudando elemento 2 para 5\nEsperado: [1,2,5,0]\nRecebido: [1,2,5,0]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n3\n======== EXPECT\nCriando vetor com lista de inicializa\u00e7\u00e3o {1,2,3}\nEsperado: [1,2,3]\nRecebido: [1,2,3]\nCriando vetor com c\u00f3pia do anterior\nEsperado: [1,2,3]\nRecebido: [1,2,3]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n4\n======== EXPECT\nCriando vetor v1 {4,5,1}\nCriando vetor v2 {4,5,1,7}\nFazendo v1 == v2\nEsperado: 0\nRecebido: 0\nFazendo pop_back em v2\nFazendo v1 == v2\nEsperado: 1\nRecebido: 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n======== EXPECT\nInicializando vetores va, vb e vc\nCriando vetor va {6,8,5}\nCriando vetor vb {3,2,1}\nCriando vetor vc {4,0,9}\nFazendo merge\nEsperado: [3,2,1,4,0,6,8,5,9]\nRecebido: [3,2,1,4,0,6,8,5,9]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include \"lib.hpp\"\n\n// implementar construtor padr\u00e3o\n// implementar o destrutor\n// implementar o len\nvoid teste1() {\n    std::cout << \"Criando vetor com capacidade 4\" << '\\n';\n    Vetor v(4);\n    std::cout << \"size: \" << v.len() << '\\n';\n}\n\n// implementar o operador []\n// implementar o push_back\n// implementar o str\nvoid teste2(){\n    Vetor v(4);\n    std::cout << \"Adicionando 1,2,3,0 usando push back\" << '\\n';\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(0);\n\n    std::cout << \"Esperado: [1,2,3,0]\" << '\\n';\n    std::cout << \"Recebido: \" << v.str() << '\\n';\n\n    std::cout << \"Elemento 2: \" << v[2] << '\\n';\n    std::cout << \"Mudando elemento 2 para 5\" << '\\n';\n    v[2] = 5;\n    std::cout << \"Esperado: [1,2,5,0]\" << '\\n';\n    std::cout << \"Recebido: \" << v.str() << '\\n';\n}\n\n// implementar o construtor de lista de inicializa\u00e7\u00e3o\n// implementar o construtor de c\u00f3pia\nvoid teste3(){\n    std::cout << \"Criando vetor com lista de inicializa\u00e7\u00e3o {1,2,3}\" << '\\n';\n    Vetor v = {1,2,3};\n    std::cout << \"Esperado: [1,2,3]\" << '\\n';\n    std::cout << \"Recebido: \" << v.str() << '\\n';\n\n    std::cout << \"Criando vetor com c\u00f3pia do anterior\" << '\\n';\n    Vetor v2 = v;\n    std::cout << \"Esperado: [1,2,3]\" << '\\n';\n    std::cout << \"Recebido: \" << v2.str() << '\\n';\n}\n\n// testando ==\n// testando pop_back\nvoid teste4() {\n    std::cout << \"Criando vetor v1 {4,5,1}\" << '\\n';\n    Vetor v1 = {4,5,1};\n    std::cout << \"Criando vetor v2 {4,5,1,7}\" << '\\n';\n    Vetor v2 = {4,5,1,7};\n    std::cout << \"Fazendo v1 == v2\" << '\\n';\n    std::cout << \"Esperado: 0\" << '\\n';\n    std::cout << \"Recebido: \" << (v1 == v2) << '\\n';\n    std::cout << \"Fazendo pop_back em v2\" << '\\n';\n    v2.pop_back();\n    std::cout << \"Fazendo v1 == v2\" << '\\n';\n    std::cout << \"Esperado: 1\" << '\\n';\n    std::cout << \"Recebido: \" << (v1 == v2) << '\\n';\n}\n\nvoid teste5() {\n    std::cout << \"Inicializando vetores va, vb e vc\" << '\\n';\n    // U = { [6,8,5], [3,2,1], [4,0,9] }\n    std::cout << \"Criando vetor va {6,8,5}\" << '\\n';\n    std::cout << \"Criando vetor vb {3,2,1}\" << '\\n';\n    std::cout << \"Criando vetor vc {4,0,9}\" << '\\n';\n    Vetor va = {6,8,5};\n    Vetor vb = {3,2,1};\n    Vetor vc = {4,0,9};\n\n    Vetor vall[] = {va, vb, vc};\n\n    // na hora que o mergeAll devolve o vetor, ele chama o construtor de c\u00f3pia\n    Vetor received = mergeAll(vall, 3); \n    Vetor expected = {3,2,1,4,0,6,8,5,9};\n\n    std::cout << \"Fazendo merge\" << '\\n';\n    std::cout << \"Esperado: [3,2,1,4,0,6,8,5,9]\" << '\\n';\n    std::cout << \"Recebido: \" << received.str() << '\\n';\n\n}\n\n\nint main() {\n    int teste_index {};\n    std::cin >> teste_index;\n    switch (teste_index) {\n        case 1: teste1(); break;\n        case 2: teste2(); break;\n        case 3: teste3(); break;\n        case 4: teste4(); break;\n        case 5: teste5(); break;\n    }\n}\n\n",
                "type": "show"
            },
            {
                "name": "lib.hpp",
                "contents": "#include <iostream>\n\nclass Vetor {\n    int *u {nullptr};  // ponteiro para dados\n    int size {0}; // tamanho do vetor\npublic:\n    // construtor base\n    Vetor(int n) {\n        u = new int[n];\n        size = 0;\n    }\n\n    // deletar o vetor u\n   ~Vetor() {\n        delete [] u; \n    }\n\n    // retornar o elemento k do vetor\n    int& operator[] (int k) {\n        return u[k];\n    } \n\n    int len() { return size; }\n\n    // ####################################\n    // M\u00e9todos para voc\u00ea fazer\n    // ####################################\n\n    // permite inicializar assim Vetor V = {1,2,3};\n    // uma lista de inicializa\u00e7\u00e3o \u00e9 um conjunto de elementos entre chaves\n    // ele tem um m\u00e9todo size() que retorna o tamanho da lista\n    // e tamb\u00e9m pode ser percorrido com um for(int elem : v)\n    //\n    // inicie o vetor com o tamanho da lista\n    // e copie os elementos da lista para o vetor\n    // inicialize size adequadamente\n    Vetor(std::initializer_list<int> v) {\n        (void) v;\n    }\n\n    // se n\u00e3o tiver o construtor de c\u00f3pia para estruturas din\u00e2micas\n    // quando fazemos uma atribui\u00e7\u00e3o, o ponteiro \u00e9 copiado e n\u00e3o o conte\u00fado\n    // e voc\u00ea ter\u00e1 um erro de double free\n    //\n    // inicie u com o tamanho de V\n    // inicie size com o tamanho de V\n    // copie os elementos de V para u\n    Vetor(const Vetor& V) {\n        (void) V;\n    }\n\n    bool empty() {\n        // retorne se o vetor est\u00e1 vazio\n        return false;\n    } \n\n    // retorne o valor do \u00faltimo elemento valido\n    int back() {\n        return 0;\n    }\n    \n    // diminua o tamanho do vetor\n    void pop_back() {\n    }\n\n    // adicione x no final do vetor\n    // aumente o tamanho do vetor\n    void push_back(int x) {\n        (void) x;\n    }\n\n    // vai lhe ajudar se voc\u00ea quiser fazer debug e imprimir o vetor\n    std::string str() {\n        return \"\";\n    }\n\n    // verificar se dois vetores s\u00e3o iguais\n    bool operator==(Vetor& V) {\n        (void) V;\n        return false;\n    }\n};\n\n\n//####################################\n// METODOS DO ALUNO\n//####################################\n\n// Esta fun\u00e7\u00e3o funde os n vetores na entrada U \n// num vetor de sa\u00edda . Note que se os vetores \n// em U s\u00e3o ordenados ent\u00e3o o vetor de sa\u00edda \n// tamb\u00e9m o ser\u00e1. Por\u00e9m mantenha em mente \n// que as entradas em U N\u00c3O s\u00e3o necessariamente \n// ordenadas nos casos de testes.     \n\n// U = { [6,8,5], [3,2,1], [4,0,9] }\n\n// { [6,8,5], [2,1], [4,0,9] } => {3}\n// { [6,8,5], [1], [4,0,9] } => {3,2}\n// { [6,8,5], [], [4,0,9] } => {3,2,1}\n// { [6,8,5], [], [0,9] } => {3,2,1,4}\n// { [6,8,5], [], [9] } => {3,2,1,4,0}\n// { [8,5], [], [9] } => {3,2,1,4,0,6}\n// { [5], [], [9] } => {3,2,1,4,0,6,8}\n// { [], [], [9] } => {3,2,1,4,0,6,8,5}\n// { [], [], [] } => {3,2,1,4,0,6,8,5,9}\n\n// Exemplo 2\n\n// U = { [1,3,5], [2,4,6], [7,8,9] }\n\n// { [3,5], [2,4,6], [7,8,9] } => {1}\n// { [3,5], [4,6], [7,8,9] } => {1,2}\n// { [5], [4,6], [7,8,9] } => {1,2,3}\n// { [5], [6], [7,8,9] } => {1,2,3,4}\n// { [], [6], [7,8,9] } => {1,2,3,4,5}\n// { [], [], [7,8,9] } => {1,2,3,4,5,6}\n// { [], [], [8,9] } => {1,2,3,4,5,6,7}\n// { [], [], [9] } => {1,2,3,4,5,6,7,8}\n// { [], [], [] } => {1,2,3,4,5,6,7,8,9}\n\n\n// qual dos vetores tem o menor elemento na posicao ind\n// se ind == tamanho do vetor, ent\u00e3o o vetor est\u00e1 vazio\ninline int ind_menor_primeiro(Vetor U[], int n, Vetor ind) {\n    (void) U;\n    (void) n;\n    (void) ind;\n    return -1;\n}\n\n// calcule o tamanho do vetor final e inicie ele\n// inicie um vetor de indices com o para guardar o indice de cada vetor\n// enquanto houver elementos\n//     ache o menor elemento entre os vetores\n//     adicione o menor elemento no vetor final\n//     incremente o indice do vetor que tinha o menor elemento\ninline Vetor mergeAll(Vetor U[], int n) {\n    (void) U;\n    (void) n;\n    return Vetor(0);\n}\n",
                "type": "show"
            }
        ]
    }
}
