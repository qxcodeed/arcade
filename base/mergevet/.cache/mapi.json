{
    "title": "L2 - @mergevet - Criando um vetor simples e fazendo um merge $alpha",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>L2 - @mergevet - Criando um vetor simples e fazendo um merge\n$alpha</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h1\nid=\"l2---mergevet---criando-um-vetor-simples-e-fazendo-um-merge-alpha\">L2\n- <span class=\"citation\" data-cites=\"mergevet\">@mergevet</span> -\nCriando um vetor simples e fazendo um merge $alpha</h1>\n<ul>\n<li>Veja a vers\u00e3o online: <a\nhref=\"https://github.com/qxcodeed/arcade/blob/master/base/mergevet/Readme.md\">aqui.</a></li>\n<li>Para programar na sua m\u00e1quina (local/virtual) use:\n<ul>\n<li><code>tko down ed mergevet</code></li>\n</ul></li>\n<li>Se n\u00e3o tem o <code>tko</code>, instale pelo <a\nhref=\"https://github.com/senapk/tko#tko\">LINK</a>.</li>\n</ul>\n<hr />\n<ul>\n<li><p>Nessa atividade voc\u00ea vai aprender sobre</p></li>\n<li><p>Construtor de c\u00f3pia</p></li>\n<li><p>Lista de inicializa\u00e7\u00e3o</p></li>\n<li><p>Operador de igualdade</p></li>\n<li><p>M\u00e9todos no vetor</p></li>\n</ul>\n<p>Essa atividade ainda n\u00e3o tem os testes, voc\u00ea pode rodar o \u00fanico caso\nde teste executando a main.</p>\n<h2 id=\"guide\">Guide</h2>\n<ul>\n<li>Voc\u00ea deve implementar os m\u00e9todos da biblioteca\n<code>lib.hpp</code>.</li>\n<li>Na classe <code>main.cpp</code> est\u00e3o todos os casos de teste.</li>\n<li>Sugiro implementar os m\u00e9todos na ordem sugerida no\n<code>main.cpp</code>.</li>\n</ul>\n<!-- links .cache/lang -->\n<!-- links -->\n<h2 id=\"testes\">Testes</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">1</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">========</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Criando</span> vetor com capacidade 4</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">size:</span> 0</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">2</span></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">========</span></span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Adicionando</span> 1,2,3,0 usando push back</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Esperado:</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,3,0</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Recebido:</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,3,0</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Elemento</span> 2: 3</span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Mudando</span> elemento 2 para 5</span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Esperado:</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,5,0</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Recebido:</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,5,0</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">3</span></span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">========</span></span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Criando</span> vetor com lista de inicializa\u00e7\u00e3o <span class=\"dt\">{1</span><span class=\"op\">,</span><span class=\"dt\">2</span><span class=\"op\">,</span><span class=\"dt\">3}</span></span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Esperado:</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,3</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Recebido:</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,3</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Criando</span> vetor com c\u00f3pia do anterior</span>\n<span id=\"cb1-27\"><a href=\"#cb1-27\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Esperado:</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,3</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-28\"><a href=\"#cb1-28\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Recebido:</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,3</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-29\"><a href=\"#cb1-29\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span>\n<span id=\"cb1-30\"><a href=\"#cb1-30\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-31\"><a href=\"#cb1-31\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span>\n<span id=\"cb1-32\"><a href=\"#cb1-32\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">4</span></span>\n<span id=\"cb1-33\"><a href=\"#cb1-33\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">========</span></span>\n<span id=\"cb1-34\"><a href=\"#cb1-34\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Criando</span> vetor v1 <span class=\"dt\">{4</span><span class=\"op\">,</span><span class=\"dt\">5</span><span class=\"op\">,</span><span class=\"dt\">1}</span></span>\n<span id=\"cb1-35\"><a href=\"#cb1-35\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Criando</span> vetor v2 <span class=\"dt\">{4</span><span class=\"op\">,</span><span class=\"dt\">5</span><span class=\"op\">,</span><span class=\"dt\">1</span><span class=\"op\">,</span><span class=\"dt\">7}</span></span>\n<span id=\"cb1-36\"><a href=\"#cb1-36\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Fazendo</span> v1 == v2</span>\n<span id=\"cb1-37\"><a href=\"#cb1-37\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Esperado:</span> 0</span>\n<span id=\"cb1-38\"><a href=\"#cb1-38\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Recebido:</span> 0</span>\n<span id=\"cb1-39\"><a href=\"#cb1-39\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Fazendo</span> pop_back em v2</span>\n<span id=\"cb1-40\"><a href=\"#cb1-40\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Fazendo</span> v1 == v2</span>\n<span id=\"cb1-41\"><a href=\"#cb1-41\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Esperado:</span> 1</span>\n<span id=\"cb1-42\"><a href=\"#cb1-42\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Recebido:</span> 1</span>\n<span id=\"cb1-43\"><a href=\"#cb1-43\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span>\n<span id=\"cb1-44\"><a href=\"#cb1-44\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-45\"><a href=\"#cb1-45\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span>\n<span id=\"cb1-46\"><a href=\"#cb1-46\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">5</span></span>\n<span id=\"cb1-47\"><a href=\"#cb1-47\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">========</span></span>\n<span id=\"cb1-48\"><a href=\"#cb1-48\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Inicializando</span> vetores va, vb e vc</span>\n<span id=\"cb1-49\"><a href=\"#cb1-49\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Criando</span> vetor va <span class=\"dt\">{6</span><span class=\"op\">,</span><span class=\"dt\">8</span><span class=\"op\">,</span><span class=\"dt\">5}</span></span>\n<span id=\"cb1-50\"><a href=\"#cb1-50\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Criando</span> vetor vb <span class=\"dt\">{3</span><span class=\"op\">,</span><span class=\"dt\">2</span><span class=\"op\">,</span><span class=\"dt\">1}</span></span>\n<span id=\"cb1-51\"><a href=\"#cb1-51\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Criando</span> vetor vc <span class=\"dt\">{4</span><span class=\"op\">,</span><span class=\"dt\">0</span><span class=\"op\">,</span><span class=\"dt\">9}</span></span>\n<span id=\"cb1-52\"><a href=\"#cb1-52\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Fazendo</span> merge</span>\n<span id=\"cb1-53\"><a href=\"#cb1-53\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Esperado:</span> <span class=\"pp\">[</span><span class=\"ss\">3,2,1,4,0,6,8,5,9</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-54\"><a href=\"#cb1-54\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">Recebido:</span> <span class=\"pp\">[</span><span class=\"ss\">3,2,1,4,0,6,8,5,9</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-55\"><a href=\"#cb1-55\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span></code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>>\n1\n========\nCriando vetor com capacidade 4\nsize: 0\n<<<<<<<<\n\n>>>>>>>>\n2\n========\nAdicionando 1,2,3,0 usando push back\nEsperado: [1,2,3,0]\nRecebido: [1,2,3,0]\nElemento 2: 3\nMudando elemento 2 para 5\nEsperado: [1,2,5,0]\nRecebido: [1,2,5,0]\n<<<<<<<<\n\n>>>>>>>>\n3\n========\nCriando vetor com lista de inicializa\u00e7\u00e3o {1,2,3}\nEsperado: [1,2,3]\nRecebido: [1,2,3]\nCriando vetor com c\u00f3pia do anterior\nEsperado: [1,2,3]\nRecebido: [1,2,3]\n<<<<<<<<\n\n>>>>>>>>\n4\n========\nCriando vetor v1 {4,5,1}\nCriando vetor v2 {4,5,1,7}\nFazendo v1 == v2\nEsperado: 0\nRecebido: 0\nFazendo pop_back em v2\nFazendo v1 == v2\nEsperado: 1\nRecebido: 1\n<<<<<<<<\n\n>>>>>>>>\n5\n========\nInicializando vetores va, vb e vc\nCriando vetor va {6,8,5}\nCriando vetor vb {3,2,1}\nCriando vetor vc {4,0,9}\nFazendo merge\nEsperado: [3,2,1,4,0,6,8,5,9]\nRecebido: [3,2,1,4,0,6,8,5,9]\n<<<<<<<<\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include \"lib.hpp\"\n\n// implementar construtor padr\u00e3o\n// implementar o destrutor\n// implementar o len\nvoid teste1() {\n    std::cout << \"Criando vetor com capacidade 4\" << '\\n';\n    Vetor v(4);\n    std::cout << \"size: \" << v.len() << '\\n';\n}\n\n// implementar o operador []\n// implementar o push_back\n// implementar o str\nvoid teste2(){\n    Vetor v(4);\n    std::cout << \"Adicionando 1,2,3,0 usando push back\" << '\\n';\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(0);\n\n    std::cout << \"Esperado: [1,2,3,0]\" << '\\n';\n    std::cout << \"Recebido: \" << v.str() << '\\n';\n\n    std::cout << \"Elemento 2: \" << v[2] << '\\n';\n    std::cout << \"Mudando elemento 2 para 5\" << '\\n';\n    v[2] = 5;\n    std::cout << \"Esperado: [1,2,5,0]\" << '\\n';\n    std::cout << \"Recebido: \" << v.str() << '\\n';\n}\n\n// implementar o construtor de lista de inicializa\u00e7\u00e3o\n// implementar o construtor de c\u00f3pia\nvoid teste3(){\n    std::cout << \"Criando vetor com lista de inicializa\u00e7\u00e3o {1,2,3}\" << '\\n';\n    Vetor v = {1,2,3};\n    std::cout << \"Esperado: [1,2,3]\" << '\\n';\n    std::cout << \"Recebido: \" << v.str() << '\\n';\n\n    std::cout << \"Criando vetor com c\u00f3pia do anterior\" << '\\n';\n    Vetor v2 = v;\n    std::cout << \"Esperado: [1,2,3]\" << '\\n';\n    std::cout << \"Recebido: \" << v2.str() << '\\n';\n}\n\n// testando ==\n// testando pop_back\nvoid teste4() {\n    std::cout << \"Criando vetor v1 {4,5,1}\" << '\\n';\n    Vetor v1 = {4,5,1};\n    std::cout << \"Criando vetor v2 {4,5,1,7}\" << '\\n';\n    Vetor v2 = {4,5,1,7};\n    std::cout << \"Fazendo v1 == v2\" << '\\n';\n    std::cout << \"Esperado: 0\" << '\\n';\n    std::cout << \"Recebido: \" << (v1 == v2) << '\\n';\n    std::cout << \"Fazendo pop_back em v2\" << '\\n';\n    v2.pop_back();\n    std::cout << \"Fazendo v1 == v2\" << '\\n';\n    std::cout << \"Esperado: 1\" << '\\n';\n    std::cout << \"Recebido: \" << (v1 == v2) << '\\n';\n}\n\nvoid teste5() {\n    std::cout << \"Inicializando vetores va, vb e vc\" << '\\n';\n    // U = { [6,8,5], [3,2,1], [4,0,9] }\n    std::cout << \"Criando vetor va {6,8,5}\" << '\\n';\n    std::cout << \"Criando vetor vb {3,2,1}\" << '\\n';\n    std::cout << \"Criando vetor vc {4,0,9}\" << '\\n';\n    Vetor va = {6,8,5};\n    Vetor vb = {3,2,1};\n    Vetor vc = {4,0,9};\n\n    Vetor vall[] = {va, vb, vc};\n\n    // na hora que o mergeAll devolve o vetor, ele chama o construtor de c\u00f3pia\n    Vetor received = mergeAll(vall, 3); \n    Vetor expected = {3,2,1,4,0,6,8,5,9};\n\n    std::cout << \"Fazendo merge\" << '\\n';\n    std::cout << \"Esperado: [3,2,1,4,0,6,8,5,9]\" << '\\n';\n    std::cout << \"Recebido: \" << received.str() << '\\n';\n\n}\n\n\nint main() {\n    int teste_index {};\n    std::cin >> teste_index;\n    switch (teste_index) {\n        case 1: teste1(); break;\n        case 2: teste2(); break;\n        case 3: teste3(); break;\n        case 4: teste4(); break;\n        case 5: teste5(); break;\n    }\n}\n\n",
                "encoding": 0
            },
            {
                "name": "lib.hpp",
                "contents": "#include <iostream>\n\nclass Vetor {\n    int *u;  // ponteiro para dados\n    int size; // tamanho do vetor\npublic:\n    // construtor base\n    Vetor(int n) {\n        (void) n;\n        // inicie u com n posi\u00e7\u00f5es usando new\n        // size deve ser 0\n    }\n   ~Vetor() { \n        // deletar o vetor u\n\n    }\n    int& operator[] (int k) {\n        (void) k;\n        return (int){0};\n        // retornar o elemento k do vetor\n    } \n\n    int len() { return size; }\n\n    // ####################################\n    // metodos para voc\u00ea fazer\n    // ####################################\n\n    // permite inicializar assim Vetor V = {1,2,3};\n    // Uma lista de inicializa\u00e7\u00e3o \u00e9 um conjunto de elementos entre chaves\n    // ele tem um m\u00e9todo size() que retorna o tamanho da lista\n    // e tamb\u00e9m pode ser percorrido com um for(int elem : v)\n    Vetor(std::initializer_list<int> v) {\n        (void) v;\n        // inicie o vetor com o tamanho da lista\n        // e copie os elementos da lista para o vetor\n        // inicialize size adequadamente\n    }\n\n    // se n\u00e3o tiver o construtor de c\u00f3pia para estruturas din\u00e2micas\n    // quando fazemos uma atribui\u00e7\u00e3o, o ponteiro \u00e9 copiado e n\u00e3o o conte\u00fado\n    // e voc\u00ea ter\u00e1 um erro de double free\n    Vetor(const Vetor& V) {\n        (void) V;\n        // inicie u com o tamanho de V\n        // inicie size com o tamanho de V\n        // copie os elementos de V para u\n    }\n\n    bool empty() {\n        return 0;\n        // retorne se o vetor est\u00e1 vazio\n    } \n    int back() {\n        return 0;\n        // retorne o valor do \u00faltimo elemento valido\n    }\n    void pop_back() {\n        // diminua o tamanho do vetor\n    }\n    void push_back(int x) {\n        (void) x;\n        // adicione x no final do vetor\n        // aumente o tamanho do vetor\n    }\n\n    // vai lhe ajudar se voc\u00ea quiser fazer debug e imprimir o vetor\n    std::string str() {\n        return \"\";\n    }\n\n    // verificar se dois vetores s\u00e3o iguais\n    bool operator==(Vetor& V) {\n        (void) V;\n        return false;\n    }\n};\n\n\n//####################################\n// METODOS DO ALUNO\n//####################################\n\n// Esta fun\u00e7\u00e3o funde os n vetores na entrada U \n// num vetor de sa\u00edda . Note que se os vetores \n// em U s\u00e3o ordenados ent\u00e3o o vetor de sa\u00edda \n// tamb\u00e9m o ser\u00e1. Por\u00e9m mantenha em mente \n// que as entradas em U N\u00c3O s\u00e3o necessariamente \n// ordenadas nos casos de testes.     \n\n// U = { [6,8,5], [3,2,1], [4,0,9] }\n\n// { [6,8,5], [2,1], [4,0,9] } => {3}\n// { [6,8,5], [1], [4,0,9] } => {3,2}\n// { [6,8,5], [], [4,0,9] } => {3,2,1}\n// { [6,8,5], [], [0,9] } => {3,2,1,4}\n// { [6,8,5], [], [9] } => {3,2,1,4,0}\n// { [8,5], [], [9] } => {3,2,1,4,0,6}\n// { [5], [], [9] } => {3,2,1,4,0,6,8}\n// { [], [], [9] } => {3,2,1,4,0,6,8,5}\n// { [], [], [] } => {3,2,1,4,0,6,8,5,9}\n\n// Exemplo 2\n\n// U = { [1,3,5], [2,4,6], [7,8,9] }\n\n// { [3,5], [2,4,6], [7,8,9] } => {1}\n// { [3,5], [4,6], [7,8,9] } => {1,2}\n// { [5], [4,6], [7,8,9] } => {1,2,3}\n// { [5], [6], [7,8,9] } => {1,2,3,4}\n// { [], [6], [7,8,9] } => {1,2,3,4,5}\n// { [], [], [7,8,9] } => {1,2,3,4,5,6}\n// { [], [], [8,9] } => {1,2,3,4,5,6,7}\n// { [], [], [9] } => {1,2,3,4,5,6,7,8}\n// { [], [], [] } => {1,2,3,4,5,6,7,8,9}\n\n\n// qual dos vetores tem o menor elemento na posicao ind\n// se ind == tamanho do vetor, ent\u00e3o o vetor est\u00e1 vazio\ninline int ind_menor_primeiro(Vetor U[], int n, Vetor ind) {\n    (void) U;\n    (void) n;\n    (void) ind;\n    return -1;\n}\n\ninline Vetor mergeAll(Vetor U[], int n) {\n\n\n    (void) U;\n    (void) n;\n    return Vetor(0);\n\n    // calcule o tamanho do vetor final e inicie ele\n    // inicie um vetor de indices com o para guardar o indice de cada vetor\n    // enquanto houver elementos\n    //     ache o menor elemento entre os vetores\n    //     adicione o menor elemento no vetor final\n    //     incremente o indice do vetor que tinha o menor elemento\n}\n\n\n",
                "encoding": 0
            }
        ]
    }
}
