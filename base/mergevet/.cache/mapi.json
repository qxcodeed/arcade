{
    "title": "@mergevet: Criando um vetor simples e fazendo um merge",
    "description": "# Criando um vetor simples e fazendo um merge\n\n- Nessa atividade voc\u00ea vai aprender sobre\n\n- Construtor de c\u00f3pia\n- Lista de inicializa\u00e7\u00e3o\n- Operador de igualdade\n- M\u00e9todos no vetor\n\nEssa atividade ainda n\u00e3o tem os testes, voc\u00ea pode rodar o \u00fanico caso de teste executando a main.\n\n## Guide\n\n- Voc\u00ea deve implementar os m\u00e9todos da biblioteca `lib.hpp`.\n- Na classe `main.cpp` est\u00e3o todos os casos de teste.\n- Sugiro implementar os m\u00e9todos na ordem sugerida no `main.cpp`.\n\n<!-- links .cache/draft -->\n- cpp\n  - [lib.hpp](https://github.com/qxcodeed/arcade/blob/master/base/mergevet/.cache/draft/cpp/lib.hpp)\n  - [main.cpp](https://github.com/qxcodeed/arcade/blob/master/base/mergevet/.cache/draft/cpp/main.cpp)\n<!-- links -->\n\n## Testes\n\n```bash\n>>>>>>>>\n1\n========\nCriando vetor com capacidade 4\nsize: 0\n<<<<<<<<\n\n>>>>>>>>\n2\n========\nAdicionando 1,2,3,0 usando push back\nEsperado: [1,2,3,0]\nRecebido: [1,2,3,0]\nElemento 2: 3\nMudando elemento 2 para 5\nEsperado: [1,2,5,0]\nRecebido: [1,2,5,0]\n<<<<<<<<\n\n>>>>>>>>\n3\n========\nCriando vetor com lista de inicializa\u00e7\u00e3o {1,2,3}\nEsperado: [1,2,3]\nRecebido: [1,2,3]\nCriando vetor com c\u00f3pia do anterior\nEsperado: [1,2,3]\nRecebido: [1,2,3]\n<<<<<<<<\n\n>>>>>>>>\n4\n========\nCriando vetor v1 {4,5,1}\nCriando vetor v2 {4,5,1,7}\nFazendo v1 == v2\nEsperado: 0\nRecebido: 0\nFazendo pop_back em v2\nFazendo v1 == v2\nEsperado: 1\nRecebido: 1\n<<<<<<<<\n\n>>>>>>>>\n5\n========\nInicializando vetores va, vb e vc\nCriando vetor va {6,8,5}\nCriando vetor vb {3,2,1}\nCriando vetor vc {4,0,9}\nFazendo merge\nEsperado: [3,2,1,4,0,6,8,5,9]\nRecebido: [3,2,1,4,0,6,8,5,9]\n<<<<<<<<\n\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n1\n======== EXPECT\nCriando vetor com capacidade 4\nsize: 0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n2\n======== EXPECT\nAdicionando 1,2,3,0 usando push back\nEsperado: [1,2,3,0]\nRecebido: [1,2,3,0]\nElemento 2: 3\nMudando elemento 2 para 5\nEsperado: [1,2,5,0]\nRecebido: [1,2,5,0]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n3\n======== EXPECT\nCriando vetor com lista de inicializa\u00e7\u00e3o {1,2,3}\nEsperado: [1,2,3]\nRecebido: [1,2,3]\nCriando vetor com c\u00f3pia do anterior\nEsperado: [1,2,3]\nRecebido: [1,2,3]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n4\n======== EXPECT\nCriando vetor v1 {4,5,1}\nCriando vetor v2 {4,5,1,7}\nFazendo v1 == v2\nEsperado: 0\nRecebido: 0\nFazendo pop_back em v2\nFazendo v1 == v2\nEsperado: 1\nRecebido: 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n======== EXPECT\nInicializando vetores va, vb e vc\nCriando vetor va {6,8,5}\nCriando vetor vb {3,2,1}\nCriando vetor vc {4,0,9}\nFazendo merge\nEsperado: [3,2,1,4,0,6,8,5,9]\nRecebido: [3,2,1,4,0,6,8,5,9]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include \"lib.hpp\"\n\n// implementar construtor padr\u00e3o\n// implementar o destrutor\n// implementar o len\nvoid teste1() {\n    std::cout << \"Criando vetor com capacidade 4\" << '\\n';\n    Vetor v(4);\n    std::cout << \"size: \" << v.len() << '\\n';\n}\n\n// implementar o operador []\n// implementar o push_back\n// implementar o str\nvoid teste2(){\n    Vetor v(4);\n    std::cout << \"Adicionando 1,2,3,0 usando push back\" << '\\n';\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(0);\n\n    std::cout << \"Esperado: [1,2,3,0]\" << '\\n';\n    std::cout << \"Recebido: \" << v.str() << '\\n';\n\n    std::cout << \"Elemento 2: \" << v[2] << '\\n';\n    std::cout << \"Mudando elemento 2 para 5\" << '\\n';\n    v[2] = 5;\n    std::cout << \"Esperado: [1,2,5,0]\" << '\\n';\n    std::cout << \"Recebido: \" << v.str() << '\\n';\n}\n\n// implementar o construtor de lista de inicializa\u00e7\u00e3o\n// implementar o construtor de c\u00f3pia\nvoid teste3(){\n    std::cout << \"Criando vetor com lista de inicializa\u00e7\u00e3o {1,2,3}\" << '\\n';\n    Vetor v = {1,2,3};\n    std::cout << \"Esperado: [1,2,3]\" << '\\n';\n    std::cout << \"Recebido: \" << v.str() << '\\n';\n\n    std::cout << \"Criando vetor com c\u00f3pia do anterior\" << '\\n';\n    Vetor v2 = v;\n    std::cout << \"Esperado: [1,2,3]\" << '\\n';\n    std::cout << \"Recebido: \" << v2.str() << '\\n';\n}\n\n// testando ==\n// testando pop_back\nvoid teste4() {\n    std::cout << \"Criando vetor v1 {4,5,1}\" << '\\n';\n    Vetor v1 = {4,5,1};\n    std::cout << \"Criando vetor v2 {4,5,1,7}\" << '\\n';\n    Vetor v2 = {4,5,1,7};\n    std::cout << \"Fazendo v1 == v2\" << '\\n';\n    std::cout << \"Esperado: 0\" << '\\n';\n    std::cout << \"Recebido: \" << (v1 == v2) << '\\n';\n    std::cout << \"Fazendo pop_back em v2\" << '\\n';\n    v2.pop_back();\n    std::cout << \"Fazendo v1 == v2\" << '\\n';\n    std::cout << \"Esperado: 1\" << '\\n';\n    std::cout << \"Recebido: \" << (v1 == v2) << '\\n';\n}\n\nvoid teste5() {\n    std::cout << \"Inicializando vetores va, vb e vc\" << '\\n';\n    // U = { [6,8,5], [3,2,1], [4,0,9] }\n    std::cout << \"Criando vetor va {6,8,5}\" << '\\n';\n    std::cout << \"Criando vetor vb {3,2,1}\" << '\\n';\n    std::cout << \"Criando vetor vc {4,0,9}\" << '\\n';\n    Vetor va = {6,8,5};\n    Vetor vb = {3,2,1};\n    Vetor vc = {4,0,9};\n\n    Vetor vall[] = {va, vb, vc};\n\n    // na hora que o mergeAll devolve o vetor, ele chama o construtor de c\u00f3pia\n    Vetor received = mergeAll(vall, 3); \n    Vetor expected = {3,2,1,4,0,6,8,5,9};\n\n    std::cout << \"Fazendo merge\" << '\\n';\n    std::cout << \"Esperado: [3,2,1,4,0,6,8,5,9]\" << '\\n';\n    std::cout << \"Recebido: \" << received.str() << '\\n';\n\n}\n\n\nint main() {\n    int teste_index {};\n    std::cin >> teste_index;\n    switch (teste_index) {\n        case 1: teste1(); break;\n        case 2: teste2(); break;\n        case 3: teste3(); break;\n        case 4: teste4(); break;\n        case 5: teste5(); break;\n    }\n}\n\n",
                "type": "show"
            },
            {
                "name": "lib.hpp",
                "contents": "#include <iostream>\n\nclass Vetor {\n    int *u {nullptr};  // ponteiro para dados\n    int size {0}; // tamanho do vetor\npublic:\n    // construtor base\n    Vetor(int n) {\n        u = new int[n];\n        size = 0;\n    }\n\n    // deletar o vetor u\n   ~Vetor() {\n        delete [] u; \n    }\n\n    // retornar o elemento k do vetor\n    int& operator[] (int k) {\n        return u[k];\n    } \n\n    int len() { return size; }\n\n    // ####################################\n    // M\u00e9todos para voc\u00ea fazer\n    // ####################################\n\n    // permite inicializar assim Vetor V = {1,2,3};\n    // uma lista de inicializa\u00e7\u00e3o \u00e9 um conjunto de elementos entre chaves\n    // ele tem um m\u00e9todo size() que retorna o tamanho da lista\n    // e tamb\u00e9m pode ser percorrido com um for(int elem : v)\n    //\n    // inicie o vetor com o tamanho da lista\n    // e copie os elementos da lista para o vetor\n    // inicialize size adequadamente\n    Vetor(std::initializer_list<int> v) {\n        (void) v;\n    }\n\n    // se n\u00e3o tiver o construtor de c\u00f3pia para estruturas din\u00e2micas\n    // quando fazemos uma atribui\u00e7\u00e3o, o ponteiro \u00e9 copiado e n\u00e3o o conte\u00fado\n    // e voc\u00ea ter\u00e1 um erro de double free\n    //\n    // inicie u com o tamanho de V\n    // inicie size com o tamanho de V\n    // copie os elementos de V para u\n    Vetor(const Vetor& V) {\n        (void) V;\n    }\n\n    bool empty() {\n        // retorne se o vetor est\u00e1 vazio\n        return false;\n    } \n\n    // retorne o valor do \u00faltimo elemento valido\n    int back() {\n        return 0;\n    }\n    \n    // diminua o tamanho do vetor\n    void pop_back() {\n    }\n\n    // adicione x no final do vetor\n    // aumente o tamanho do vetor\n    void push_back(int x) {\n        (void) x;\n    }\n\n    // vai lhe ajudar se voc\u00ea quiser fazer debug e imprimir o vetor\n    std::string str() {\n        return \"\";\n    }\n\n    // verificar se dois vetores s\u00e3o iguais\n    bool operator==(Vetor& V) {\n        (void) V;\n        return false;\n    }\n};\n\n\n//####################################\n// METODOS DO ALUNO\n//####################################\n\n// Esta fun\u00e7\u00e3o funde os n vetores na entrada U \n// num vetor de sa\u00edda . Note que se os vetores \n// em U s\u00e3o ordenados ent\u00e3o o vetor de sa\u00edda \n// tamb\u00e9m o ser\u00e1. Por\u00e9m mantenha em mente \n// que as entradas em U N\u00c3O s\u00e3o necessariamente \n// ordenadas nos casos de testes.     \n\n// U = { [6,8,5], [3,2,1], [4,0,9] }\n\n// { [6,8,5], [2,1], [4,0,9] } => {3}\n// { [6,8,5], [1], [4,0,9] } => {3,2}\n// { [6,8,5], [], [4,0,9] } => {3,2,1}\n// { [6,8,5], [], [0,9] } => {3,2,1,4}\n// { [6,8,5], [], [9] } => {3,2,1,4,0}\n// { [8,5], [], [9] } => {3,2,1,4,0,6}\n// { [5], [], [9] } => {3,2,1,4,0,6,8}\n// { [], [], [9] } => {3,2,1,4,0,6,8,5}\n// { [], [], [] } => {3,2,1,4,0,6,8,5,9}\n\n// Exemplo 2\n\n// U = { [1,3,5], [2,4,6], [7,8,9] }\n\n// { [3,5], [2,4,6], [7,8,9] } => {1}\n// { [3,5], [4,6], [7,8,9] } => {1,2}\n// { [5], [4,6], [7,8,9] } => {1,2,3}\n// { [5], [6], [7,8,9] } => {1,2,3,4}\n// { [], [6], [7,8,9] } => {1,2,3,4,5}\n// { [], [], [7,8,9] } => {1,2,3,4,5,6}\n// { [], [], [8,9] } => {1,2,3,4,5,6,7}\n// { [], [], [9] } => {1,2,3,4,5,6,7,8}\n// { [], [], [] } => {1,2,3,4,5,6,7,8,9}\n\n\n// qual dos vetores tem o menor elemento na posicao ind\n// se ind == tamanho do vetor, ent\u00e3o o vetor est\u00e1 vazio\ninline int ind_menor_primeiro(Vetor U[], int n, Vetor ind) {\n    (void) U;\n    (void) n;\n    (void) ind;\n    return -1;\n}\n\n// calcule o tamanho do vetor final e inicie ele\n// inicie um vetor de indices com o para guardar o indice de cada vetor\n// enquanto houver elementos\n//     ache o menor elemento entre os vetores\n//     adicione o menor elemento no vetor final\n//     incremente o indice do vetor que tinha o menor elemento\ninline Vetor mergeAll(Vetor U[], int n) {\n    (void) U;\n    (void) n;\n    return Vetor(0);\n}\n",
                "type": "show"
            }
        ]
    }
}
