{
    "title": "@prin_list1: Princesa com lista ligada",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@prin_list1: Princesa com lista ligada</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Princesa com lista ligada</h1>\n<p><a href=\"https://www.youtube.com/watch?v=uCsD3ZGzMgE\"><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/prin_list1/../princesa/cover.jpg\" /></a></p>\n<p>Um problema bem interessante e antigo da matem\u00e1tica \u00e9 conhecido como Josephus Problem. No link da imagem voc\u00ea pode, por curiosidades aprender bastantes sobre ele e o modelo matem\u00e1tico que se prop\u00f5e a model\u00e1-lo.</p>\n<p>Nosso objetivo aqui ser\u00e1 apenas implementar seu funcionamento.</p>\n<hr />\n<p>No problema, <strong>N</strong> pessoas se colocam numa fila circular e assumem valores de 1 at\u00e9 <strong>N</strong>. Um n\u00famero <strong>E</strong> \u00e9 escolhido para iniciar o jogo. <strong>E</strong> pega a espada, mata o elemento \u00e0 sua frente e passa a espada uma posi\u00e7\u00e3o \u00e0 frente. O jogo continua at\u00e9 que um \u00fanico elemento permane\u00e7a vivo.</p>\n<hr />\n<ul>\n<li>Entrada:<ul>\n<li>Os valores de <strong>N</strong> e <strong>E</strong> na primeira linha.</li>\n</ul>\n</li>\n<li>Sa\u00edda:<ul>\n<li>Etapa a etapa, os elementos que est\u00e3o vivos na fila circular, indicando com um &gt; quem est\u00e1 com a espada.</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h2>Implementa\u00e7\u00e3o usando listas</h2>\n<p>Resolva novamente o problema utilizando</p>\n<ul>\n<li>a lista que vem embutida na sua linguagem ou sua pr\u00f3pria lista para colocar os elementos</li>\n<li>use um iterator para rastrear a posi\u00e7\u00e3o da espada</li>\n<li>use o m\u00e9todo erase da lista para matar os elementos</li>\n</ul>\n<hr />\n<p>Testes:</p>\n<div class=\"language-text highlight\"><pre><span></span><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01\n3 1\n========\n[ 1&gt; 2 3 ]\n[ 1 3&gt; ]\n[ 3&gt; ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02\n3 2\n========\n[ 1 2&gt; 3 ]\n[ 1&gt; 2 ]\n[ 1&gt; ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03\n3 3\n========\n[ 1 2 3&gt; ]\n[ 2&gt; 3 ]\n[ 2&gt; ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 04\n6 3\n========\n[ 1 2 3&gt; 4 5 6 ]\n[ 1 2 3 5&gt; 6 ]\n[ 1&gt; 2 3 5 ]\n[ 1 3&gt; 5 ]\n[ 1&gt; 3 ]\n[ 1&gt; ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 05\n9 9\n========\n[ 1 2 3 4 5 6 7 8 9&gt; ]\n[ 2&gt; 3 4 5 6 7 8 9 ]\n[ 2 4&gt; 5 6 7 8 9 ]\n[ 2 4 6&gt; 7 8 9 ]\n[ 2 4 6 8&gt; 9 ]\n[ 2&gt; 4 6 8 ]\n[ 2 6&gt; 8 ]\n[ 2&gt; 6 ]\n[ 2&gt; ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 06\n20 1\n========\n[ 1&gt; 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3&gt; 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5&gt; 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7&gt; 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9&gt; 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11&gt; 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13&gt; 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13 15&gt; 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13 15 17&gt; 18 19 20 ]\n[ 1 3 5 7 9 11 13 15 17 19&gt; 20 ]\n[ 1&gt; 3 5 7 9 11 13 15 17 19 ]\n[ 1 5&gt; 7 9 11 13 15 17 19 ]\n[ 1 5 9&gt; 11 13 15 17 19 ]\n[ 1 5 9 13&gt; 15 17 19 ]\n[ 1 5 9 13 17&gt; 19 ]\n[ 1&gt; 5 9 13 17 ]\n[ 1 9&gt; 13 17 ]\n[ 1 9 17&gt; ]\n[ 9&gt; 17 ]\n[ 9&gt; ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01\n3 1\n======== EXPECT\n[ 1> 2 3 ]\n[ 1 3> ]\n[ 3> ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02\n3 2\n======== EXPECT\n[ 1 2> 3 ]\n[ 1> 2 ]\n[ 1> ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n3 3\n======== EXPECT\n[ 1 2 3> ]\n[ 2> 3 ]\n[ 2> ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04\n6 3\n======== EXPECT\n[ 1 2 3> 4 5 6 ]\n[ 1 2 3 5> 6 ]\n[ 1> 2 3 5 ]\n[ 1 3> 5 ]\n[ 1> 3 ]\n[ 1> ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05\n9 9\n======== EXPECT\n[ 1 2 3 4 5 6 7 8 9> ]\n[ 2> 3 4 5 6 7 8 9 ]\n[ 2 4> 5 6 7 8 9 ]\n[ 2 4 6> 7 8 9 ]\n[ 2 4 6 8> 9 ]\n[ 2> 4 6 8 ]\n[ 2 6> 8 ]\n[ 2> 6 ]\n[ 2> ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06\n20 1\n======== EXPECT\n[ 1> 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3> 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5> 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7> 8 9 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9> 10 11 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11> 12 13 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13> 14 15 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13 15> 16 17 18 19 20 ]\n[ 1 3 5 7 9 11 13 15 17> 18 19 20 ]\n[ 1 3 5 7 9 11 13 15 17 19> 20 ]\n[ 1> 3 5 7 9 11 13 15 17 19 ]\n[ 1 5> 7 9 11 13 15 17 19 ]\n[ 1 5 9> 11 13 15 17 19 ]\n[ 1 5 9 13> 15 17 19 ]\n[ 1 5 9 13 17> 19 ]\n[ 1> 5 9 13 17 ]\n[ 1 9> 13 17 ]\n[ 1 9 17> ]\n[ 9> 17 ]\n[ 9> ]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"fmt\"\n)\n\n// mostra a lista com o elemento sword destacado\nfunc ToStr(l *DList[int], sword *DNode[int]) string {\n\treturn \"\"\n}\n\n// move para frente na lista circular\nfunc Next(l *DList[int], it *DNode[int]) *DNode[int] {\n\treturn nil\n}\n\nfunc main() {\n\tvar qtd, chosen int\n\tfmt.Scan(&qtd, &chosen)\n\tl := NewDList[int]()\n\tfor i := 1; i <= qtd; i++ {\n\t\tl.PushBack(i)\n\t}\n\tsword := l.Front()\n\tfor range chosen - 1 {\n\t\tsword = Next(l, sword)\n\t}\n\tfor range qtd - 1 {\n\t\tfmt.Println(ToStr(l, sword))\n\t\tl.Erase(Next(l, sword))\n\t\tsword = Next(l, sword)\n\t}\n\tfmt.Println(ToStr(l, sword))\n}\n",
                "type": "show"
            },
            {
                "name": "dlist.go",
                "contents": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n/*\nclass DNode<T> {\n\tValue: T\n\tnext, prev, root: *DNode<T>\n\tNext() *DNode<T>\n\tPrev() *DNode<T>\n}\nclass DList<T> {\n\troot: *DNode<T>\n\tsize: int\n\t___ m\u00e9todos de altera\u00e7\u00e3o ___\n\tPushBack(value T)\n\tPushFront(value T)\n\tPopBack()\n\tPopFront()\n\tInsert(it *DNode<T>, value T)\n\tErase(it *DNode<T>)\n\tClear()\n\t___ m\u00e9todos de acesso e percorrimento ___\n\tFront() *DNode<T>\n\tBack() *DNode<T>\n\tEnd() *DNode<T>\n\t___\n\tString() string\n\tSize() int\n*/\n\ntype DNode[T comparable] struct {\n\tValue            T\n\tnext, prev, root *DNode[T]\n}\n\nfunc (n *DNode[T]) Next() *DNode[T] {\n\tif n == n.root {\n\t\treturn n\n\t}\n\treturn n.next\n}\n\nfunc (n *DNode[T]) Prev() *DNode[T] {\n\tif n == n.root {\n\t\treturn n\n\t}\n\treturn n.prev\n}\n\ntype DList[T comparable] struct {\n\troot *DNode[T]\n\tsize int\n}\n\nfunc NewDList[T comparable]() *DList[T] {\n\troot := &DNode[T]{}\n\troot.next = root\n\troot.prev = root\n\troot.root = root\n\treturn &DList[T]{root: root, size: 0}\n}\n\nfunc (l *DList[T]) PushBack(value T) {\n\tl.Insert(l.root, value)\n}\n\nfunc (l *DList[T]) PopBack() {\n\tif l.size == 0 {\n\t\treturn\n\t}\n\tl.Erase(l.root.prev)\n}\n\nfunc (l *DList[T]) PopFront() {\n\tif l.size == 0 {\n\t\treturn\n\t}\n\tl.Erase(l.root.next)\n}\n\nfunc (l *DList[T]) PushFront(value T) {\n\tl.Insert(l.root.next, value)\n}\n\nfunc (l *DList[T]) Insert(it *DNode[T], value T) *DNode[T] {\n\tn := &DNode[T]{Value: value, root: l.root}\n\tn.prev = it.prev\n\tn.next = it\n\tit.prev.next = n\n\tit.prev = n\n\tl.size++\n\treturn n\n}\n\nfunc (l *DList[T]) Erase(it *DNode[T]) {\n\tif it == l.root || it == nil {\n\t\treturn\n\t}\n\tit.prev.next = it.next\n\tit.next.prev = it.prev\n\tl.size--\n}\n\nfunc (l *DList[T]) String() string {\n\tvalues := []string{}\n\tfor n := l.root.next; n != l.root; n = n.next {\n\t\tvalues = append(values, fmt.Sprint(n.Value))\n\t}\n\treturn \"[\" + strings.Join(values, \", \") + \"]\"\n}\n\nfunc (l *DList[T]) Size() int {\n\treturn l.size\n}\n\nfunc (l *DList[T]) Clear() {\n\tl.root.next = l.root\n\tl.root.prev = l.root\n\tl.size = 0\n}\n\nfunc (l *DList[T]) Front() *DNode[T] {\n\treturn l.root.next\n}\n\nfunc (l *DList[T]) Back() *DNode[T] {\n\treturn l.root.prev\n}\n\nfunc (l *DList[T]) End() *DNode[T] {\n\treturn l.root\n}\n",
                "type": "show"
            }
        ]
    }
}
