{
    "title": "@cauda: Lista Simplesmente Encadeada com Cauda",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@cauda: Lista Simplesmente Encadeada com Cauda</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@cauda: Lista Simplesmente Encadeada com Cauda</h1>\n            <h1 id=\"lista-simplesmente-encadeada-com-cauda\">Lista Simplesmente Encadeada com Cauda</h1>\n<p>Nesse exerc\u00edcio, implementaremos lista simplesmente encadeada com uma pequena modifica\u00e7\u00e3o: adi\u00e7\u00e3o de um ponteiro para o n\u00f3 cauda.\nA lista encadeada com cauda consiste utilizar um ponteiro adicional que aponta para o \u00faltimo n\u00f3 da lista (tail), al\u00e9m de apenas o ponteiro para o in\u00edcio da lista (head). Ap\u00f3s cada opera\u00e7\u00e3o, voc\u00ea pode manter o ponteiro para a cauda atualizado.\nPor simplicidade, implementaremos as informa\u00e7\u00f5es dos N\u00f3s apenas como um inteiro.\nNo arquivo\u00a0lib.cpp, se encontra a classe SLinkedList\u00a0que possui os seguintes m\u00e9todos:</p>\n<ul>\n<li>~~SLinkedList();~~</li>\n<li>~~\\~SLinkedList();~~</li>\n<li>bool hasInfo(int info);</li>\n<li>void push_front(int info);</li>\n<li>void push_back(int info);</li>\n<li>void pop_front(int info);</li>\n<li>void pop_back(int info);</li>\n<li>~~void clear();~~</li>\n<li>~~bool length();~~</li>\n<li>~~void empty();~~</li>\n<li>~~void print();~~</li>\n</ul>\n<p>M\u00e9todos riscados j\u00e1 est\u00e3o implementados, voc\u00ea precisa implementar os demais.\nA funcionalidade de cada m\u00e9todo est\u00e1 descrita em coment\u00e1rios no pr\u00f3prio arquivo\u00a0lib.cpp.\u00a0Sua tarefa \u00e9 alterar o arquivo\u00a0lib.cpp, implementando as funcionalidades faltantes citadas.\u00a0Seu c\u00f3digo deve passar no caso de teste para ser considerado correto.</p>\n<p>OBS.: N\u00e3o altere os m\u00e9todos j\u00e1 implementados.</p>\n<p>OBS.2: N\u00e3o precisa escrever a main(). Ela j\u00e1 est\u00e1 implementada internamente no Moodle.</p>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste has_info \ntest_has_info\n======== EXPECT\nTESTE has_info\n[30 -> 20 -> 15 -> 10]\nhas_info -1 == 0\nhas_info 0 == 0\nhas_info 5 == 0\nhas_info 10 == 1\nhas_info 15 == 1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste push_front\ntest_push_front\n======== EXPECT\nTESTE push_front\npush_front 10\npush_front 15\npush_front 20\npush_front 30\nEsperado: [30 -> 20 -> 15 -> 10]\n[30 -> 20 -> 15 -> 10]\n4 Nos alocados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste push_back\ntest_push_back\n======== EXPECT\nTESTE push_back\npush_back 10\npush_back 15\npush_back 20\npush_back 30\nExpected: [10 -> 15 -> 20 -> 30]\n[10 -> 15 -> 20 -> 30]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste pop_front\ntest_pop_front\n======== EXPECT\nTESTE pop_front\nEsperado: [30 -> 20 -> 15 -> 10]\n[30 -> 20 -> 15 -> 10]\npop_front\nEsperado: [20 -> 15 -> 10]\n[20 -> 15 -> 10]\npop_front\nEsperado: [15 -> 10]\n[15 -> 10]\npop_front\nEsperado: [10]\n[10]\npop_front\nEsperado: []\n[]\npop_front\nEsperado: []\n[]\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste pop_back\ntest_pop_back\n======== EXPECT\nTESTE pop_back\nEsperado: [30 -> 20 -> 15 -> 10]\n[30 -> 20 -> 15 -> 10]\npop_back\nEsperado: [30 -> 20 -> 15]\n[30 -> 20 -> 15]\npop_back\nEsperado: [30 -> 20]\n[30 -> 20]\npop_back\nEsperado: [30]\n[30]\npop_back\nEsperado: []\n[]\npop_back\nEsperado: []\n[]\nTodos os Nos foram devidamente deletados\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "lib.cpp",
                "contents": "/*       QUESTIONARIO (RESPONDA COM HONESTIDADE)\n\nQ1 - Voce resolveu esse problema em grupo? Se sim, indique com quem fez.\n\n\n\nQ2 - Quanto tempo voc\u00ea demorou para resolve-lo?\n\n\n\nQ3 - Voce considera o problema facil, medio ou dificil? Qual maior dificuldade encontrada?\n\n\n\n*/\n\n/*       ATIVIDADE        */\n#include <iostream>\n\n// Node: classe utilizada para representar um No\n// Nao altere essa classe\nstruct Node {\n    int info; // Informacao salva pelo usuario na lista\n    Node *next; // Ponteiro para o proximo elemento da lista\n\n    Node(); // Construtor\n    Node(int info, Node *next=nullptr); // Construtor\n\n    ~Node(); // Destrutor\n};\n\n// Singly Linked List ou\n// Lista Simplesmente Encadeada\n// Altere somente os campos marcados com TODO\nstruct SLinkedList {\n    Node *head;   // Ponteiro para a cabeca da lista (primeiro No)\n    Node *tail;   // Ponteiro para a cauda da lista (ultimo No)\n\n    SLinkedList(){\n        head = tail = nullptr;\n    }\n\n    ~SLinkedList(){ // Destrutor\n        clear();\n    }\n\n    // Retorna true se uma informacao pertence a lista\n    // index: posicao do elemento\n    bool hasInfo(int info){\n        // TODO: Complexidade O(n)\n        //DEL!\n        for(Node* node = head; node != nullptr; node = node->next){\n            if(node->info == info)\n                return true;\n        }\n        return false;\n\n        //ACT!\n        // (void) info;\n        // return false;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.hasInfo(20) == true\n    // L.hasInfo(100) == false\n\n    // Adiciona um elemento no inicio da lista\n    // info: informacao do elemento a ser inserido\n    void push_front(int info){\n        // TODO: Complexidade O(1)\n        //DEL!\n        if(head == nullptr){ // lista vazia\n            head = tail = new Node(info, head);\n        }else{\n            head = new Node(info, head);\n        }\n\n        //ACT!\n        // (void) info;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.push_front(30)\n    // L == 30 -> 10 -> 20 -> 15 -> 50\n\n\n    // Adiciona um elemento ao final da lista\n    // info: informacao do elemento a ser inserido\n    void push_back(int info){\n        // TODO: Complexidade O(1)\n        //DEL!\n        if(head == nullptr){ // lista vazia\n            head = tail = new Node(info, head);\n        }else{\n            tail->next = new Node(info);\n            tail = tail->next;\n        }\n\n        //ACT!\n        // (void) info;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.push_front(30)\n    // L == 10 -> 20 -> 15 -> 50 -> 30\n\n\n    // Remove o primeiro elemento da lista.\n    // Nao faz nada se a lista esta vazia\n    void pop_front(){\n        // TODO: Complexidade O(1)\n        //DEL!\n        if(head == nullptr) return;\n        if(head == tail){\n            delete head;\n            head = tail = nullptr;\n            return;\n        }\n        Node* temp = head;\n        head = head->next;\n        delete temp;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.pop_front()\n    // L == 20 -> 15 -> 50\n\n\n    // Remove o ultimo elemento da lista.\n    // Nao faz nada se a lista esta vazia\n    void pop_back(){\n        // TODO: Complexidade O(n)\n        //DEL!\n        if(head == nullptr) return;\n        if(head == tail){\n            delete head;\n            head = tail = nullptr;\n            return;\n        }\n        Node* temp = head;\n        while(temp->next != tail){\n            temp = temp->next;\n        }\n        delete tail;\n        tail = temp;\n        tail->next = nullptr;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.pop_back()\n    // L == 10 -> 20 -> 15\n\n\n    // Deixa a lista vazia, com zero elementos\n    void clear(){\n        while(!empty()){\n            pop_back();\n        }\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.clear()\n    // L == []\n\n    // Retorna o numero de elementos da lista\n    int length(){\n        int count = 0;\n        for(Node* node = head; node != nullptr; node = node->next){\n            count++;\n        }\n        return count;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.length() == 4\n\n    // Devolve true se cheia e false caso contrario\n    bool empty(){\n        return head == nullptr;\n    }\n    // Exemplo:\n    // L == 10 -> 20 -> 15 -> 50\n    // L.empty() == false\n    // L == ''\n    // L.empty() == true\n\n\n    // Printa as informacoes da lista\n    void print(){\n        std::cout << \"[\";\n        for(Node* node = head; node != nullptr; node = node->next){\n            std::cout << node->info;\n            if(node->next != nullptr)\n                std::cout << \" -> \";\n        }\n        std::cout << \"]\" << std::endl;\n    }\n};\n\n",
                "encoding": 0
            },
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao\n#include <iostream>\n#include <map>\n//#include \"solution_lib.cpp\"\n#include \"lib.cpp\"\n\n\nusing std::cout;\nusing std::endl;\n\nbool LOG_ALLOCATED = false;\nstd::map<void*, int> allocated_nodes_status = {};\nstd::map<int, int> mapa = {};\nconst int ALLOCATED = 1;\nconst int DELETED = 2;\n\n// Salvar Nos alocados\nNode::Node() {\n    allocated_nodes_status[this] = ALLOCATED;\n}\n\nNode::Node(int info, Node* next){\n    allocated_nodes_status[this] = ALLOCATED;\n    this->info = info;\n    this->next = next;\n}\nNode::~Node() {\n    allocated_nodes_status[this] = DELETED;\n}\n\ntemplate <typename K, typename V>\nvoid printMap(const std::map<K, V>& m) {\n    for (const auto& pair : m) {\n        std::cout << \"Key: \" << pair.first << \", Value: \" << pair.second << std::endl;\n    }\n}\n\n/////////////// TESTES AUXILIARES /////////////\n\n\nbool test_tail(SLinkedList &list){\n    if(list.head == nullptr){\n        if(list.tail != nullptr){\n            cout << \"Lista vazia, mas 'tail' nao esta nullptr\" << endl;\n            return false;\n        }else{\n            return true;\n        }\n        return true;\n    }\n\n    Node *temp;\n    // int i = 100;\n    for(temp = list.head; temp->next != nullptr; temp = temp->next) {\n        // if(i-- < 0){\n        //     cout << \"Loop infinito detectado\" << endl;\n        //     return false;\n        // }\n    }\n    if(temp != list.tail){\n        cout << \"O valor atribuido a 'tail' esta incorreto.\" << endl;\n        return false;\n    }\n    return true;\n}\n\n\n/////////////// TESTE CONSTRUCT ///////////////\n\nvoid test_constructor(){\n    cout << \"TESTE Construtor\" << endl;\n    SLinkedList* list = new SLinkedList(); \n\n    if(list->head == nullptr && list->tail == nullptr){\n        cout << \"Ok\" << endl;\n    }else{\n        cout << \"Atributos incorretos\";\n    }\n}\n\n\n/////////////// TESTE HAS_INFO ///////////////\n\nvoid test_has_info(){\n    cout << \"TESTE has_info\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    list.print();\n    cout << \"has_info \" << -1  << \" == \" << list.hasInfo(-1) << endl;\n    cout << \"has_info \" << 0  << \" == \" << list.hasInfo(0) << endl;\n    cout << \"has_info \" << 5  << \" == \" << list.hasInfo(5) << endl;\n    cout << \"has_info \" << 10 << \" == \" << list.hasInfo(10) << endl;\n    cout << \"has_info \" << 15 << \" == \" << list.hasInfo(15) << endl;\n}\n\n\n/////////////// TESTE PUSH_FRONT ///////////////\n\nvoid test_push_front(){\n    cout << \"TESTE push_front\" << endl;\n    SLinkedList list;\n\n    cout << \"push_front \" << 10 << endl;\n    list.push_front(10);\n    test_tail(list);\n    cout << \"push_front \" << 15 << endl;\n    list.push_front(15);\n    test_tail(list);\n    cout << \"push_front \" << 20 << endl;\n    list.push_front(20);\n    test_tail(list);\n    cout << \"push_front \" << 30 << endl;\n    list.push_front(30);\n    test_tail(list);\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n    cout << allocated_nodes_status.size() << \" Nos alocados\" << endl;\n}\n\n/////////////// TESTE PUSH_BACK ///////////////\n\nvoid test_push_back(){\n    cout << \"TESTE push_back\" << endl;\n    SLinkedList list;\n\n    cout << \"push_back \" << 10 << endl;\n    cout << \"push_back \" << 15 << endl;\n    cout << \"push_back \" << 20 << endl;\n    cout << \"push_back \" << 30 << endl;\n\n    test_tail(list);\n    list.push_back(10);\n    test_tail(list);\n    list.push_back(15);\n    test_tail(list);\n    list.push_back(20);\n    test_tail(list);\n    list.push_back(30);\n    test_tail(list);\n\n    cout << \"Expected: [10 -> 15 -> 20 -> 30]\" << endl;\n    list.print();\n}\n\n\n/////////////// TESTE POP_FRONT ///////////////\n\nbool test_creating(Node * node) {\n    if (node == nullptr) {\n        cout << \"Node nao foi alocado\" << endl;\n        return false;\n    }\n    return true;\n}\n\nvoid test_pop_front(){\n    cout << \"TESTE pop_front\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    Node* node0 = list.head;\n    if (!test_creating(node0)) return;\n    Node* node1 = node0->next;\n    if (!test_creating(node1)) return;\n    Node* node2 = node1->next;\n    if (!test_creating(node2)) return;\n    Node* node3 = node2->next;\n    if (!test_creating(node3)) return;\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: [20 -> 15 -> 10]\" << endl;\n    test_tail(list);\n    list.print();\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: [15 -> 10]\" << endl;\n    list.print();\n    test_tail(list);\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: [10]\" << endl;\n    list.print();\n    test_tail(list);\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n    test_tail(list);\n    cout << \"pop_front\" << endl; list.pop_front();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n    test_tail(list);\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE POP_BACK ///////////////\n\nvoid test_pop_back(){\n    cout << \"TESTE pop_back\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    Node* node0 = list.head;\n    if (!test_creating(node0)) return;\n    Node* node1 = node0->next;\n    if (!test_creating(node1)) return;\n    Node* node2 = node1->next;\n    if (!test_creating(node2)) return;\n    Node* node3 = node2->next;\n    if (!test_creating(node3)) return;\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n    test_tail(list);\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: [30 -> 20 -> 15]\" << endl;\n    list.print();\n    test_tail(list);\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: [30 -> 20]\" << endl;\n    list.print();\n    test_tail(list);\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: [30]\" << endl;\n    list.print();\n    test_tail(list);\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n    test_tail(list);\n    cout << \"pop_back\" << endl; list.pop_back();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n    test_tail(list);\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE CLEAR ///////////////\n\nvoid test_clear(){\n    cout << \"TESTE clear\" << endl;\n    SLinkedList list;\n\n    list.push_front(10);\n    list.push_front(15);\n    list.push_front(20);\n    list.push_front(30);\n\n    Node* node0 = list.head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    cout << \"Esperado: [30 -> 20 -> 15 -> 10]\" << endl;\n    list.print();\n\n    cout << \"clear\" << endl; list.clear();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    cout << \"clear\" << endl; list.clear();\n    cout << \"Esperado: []\" << endl;\n    list.print();\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos removidos da lista que nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// TESTE EMPTY ///////////////\n\nvoid test_empty(){\n    cout << \"TESTE empty\" << endl;\n    SLinkedList list;\n\n    list.print();\n    cout << \"empty \" << \" == \" << list.empty() << endl;    \n    list.push_front(42);\n\n    list.print();\n    cout << \"empty \" << \" == \" << list.empty() << endl;    \n}\n\n/////////////// TESTE DESTRUCTOR ///////////////\n\nvoid test_destructor(){\n    cout << \"TESTE destructor\" << endl;\n    SLinkedList* list = new SLinkedList;\n\n    list->push_front(10);\n    list->push_front(15);\n    list->push_front(20);\n    list->push_front(30);\n\n    Node* node0 = list->head;\n    Node* node1 = node0->next;\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n\n    bool all_nodes_deleted =    allocated_nodes_status[node0] == DELETED &&\n                                allocated_nodes_status[node1] == DELETED &&\n                                allocated_nodes_status[node2] == DELETED &&\n                                allocated_nodes_status[node3] == DELETED;\n\n    delete list;\n    if(all_nodes_deleted){\n        cout << \"Todos os Nos foram devidamente deletados\" << endl;\n    }else{\n        cout << \"Existem Nos nao foram liberados na memoria\" << endl;\n    }\n}\n\n\n/////////////// FIM TESTES ///////////////\n\nint main(){\n    std::string input;\n    std::cin >> input;\n\n    if(input == \"test_has_info\") test_has_info();\n    if(input == \"test_push_front\") test_push_front();\n    if(input == \"test_push_back\") test_push_back();\n    if(input == \"test_pop_front\") test_pop_front();\n    if(input == \"test_pop_back\") test_pop_back();\n}\n",
                "encoding": 0
            }
        ]
    }
}
