{
    "title": "@iterador: Criando um iterador",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@iterador: Criando um iterador</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Criando um iterador</h1>\n<p>Um iterador pode ser utilizado para esconder a forma como os elementos s\u00e3o organizados e acessados.</p>\n<ul>\n<li>\u00c9 responsabilidade do iterador saber como chegar no pr\u00f3ximo elemento.</li>\n<li>Saber se chegou ao fim da estrutura.</li>\n<li>Opcional dependendo da estrutura:<ul>\n<li>Saber como voltar para o elemento anterior.</li>\n</ul>\n</li>\n</ul>\n<p>Vamos criar iteradores para navegar em um vetor utilizando a sintaxe simplificada dos iteradores do Java.</p>\n<p>Um iterador \u00e9 criado a partir da estrutura a ser percorrida e possui dois m\u00e9todos principais.</p>\n<ul>\n<li>hasNext(): bool, que informa se ainda tem algum elemento.</li>\n<li>next(): int, que pega o pr\u00f3ximo elemento.</li>\n</ul>\n<p>Os nomes mudam um pouco dependendo da linguagem utilizada. Veja o diagrama dos m\u00e9todos a serem implementados e o exemplo nos arquivos <code>extra.md</code> e no rascunho da linguagem.</p>\n<p>Voc\u00ea vai receber implementado um iterador que percorre a estrutura do in\u00edcio ao fim e deve implementar outros dois iteradores.</p>\n<ul>\n<li>ReverseIterator: percorre a estrutura do fim para o in\u00edcio.</li>\n<li>CyclicIterator: percorre a estrutura como se fosse uma lista c\u00edclica infinita.</li>\n</ul>\n<h2>Shell</h2>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE show</span>\n<span class=\"err\">$</span><span class=\"n\">read</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"mi\">9</span> <span class=\"mi\">7</span>\n<span class=\"err\">$</span><span class=\"n\">show</span>\n<span class=\"p\">[</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"mi\">9</span> <span class=\"mi\">7</span> <span class=\"p\">]</span>\n<span class=\"err\">$</span><span class=\"n\">end</span>\n</code></pre></div>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE show</span>\n<span class=\"err\">$</span><span class=\"n\">read</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"mi\">9</span> <span class=\"mi\">7</span>\n<span class=\"err\">$</span><span class=\"n\">reverse</span>\n<span class=\"p\">[</span> <span class=\"mi\">7</span> <span class=\"mi\">9</span> <span class=\"mi\">6</span> <span class=\"mi\">5</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"p\">]</span>\n<span class=\"err\">$</span><span class=\"n\">end</span>\n</code></pre></div>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE show</span>\n<span class=\"err\">$</span><span class=\"n\">read</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span>\n<span class=\"err\">$</span><span class=\"n\">cyclic</span> <span class=\"mi\">10</span>\n<span class=\"p\">[</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">1</span> <span class=\"p\">]</span>\n<span class=\"err\">$</span><span class=\"n\">end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT show\nread 1 4 2 3 5 6 9 7\nshow\nend\n======== EXPECT\n$read 1 4 2 3 5 6 9 7\n$show\n[ 1 4 2 3 5 6 9 7 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT show\nread 1 4 2 3 5 6 9 7\nreverse\nend\n======== EXPECT\n$read 1 4 2 3 5 6 9 7\n$reverse\n[ 7 9 6 5 3 2 4 1 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT show\nread 1 2 3\ncyclic 10\nend\n======== EXPECT\n$read 1 2 3\n$cyclic 10\n[ 1 2 3 1 2 3 1 2 3 1 ]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# Iteradores\n\n```ts\nclass MyList {\n  - data: []int                             ' Armazena os valores inteiros da lista\n  --\n  + NewMyList(values: []int): *MyList       ' Cria uma nova lista com os valores fornecidos\n  + Iterator(): *Iterator                   ' Retorna um iterador do in\u00edcio ao fim\n  + ReverseIterator(): *ReverseIterator     ' Retorna um iterador do fim ao in\u00edcio\n  + CyclicIterator(): *CyclicIterator       ' Retorna um iterador circular que nunca termina\n}\n\nclass Iterator {\n  - data: []int                             ' Refer\u00eancia \u00e0 lista de inteiros a ser iterada\n  - index: int                              ' \u00cdndice atual do iterador\n  --\n  + HasNext(): bool                         ' Retorna true se houver mais elementos a iterar\n  + Next(): int                             ' Retorna o pr\u00f3ximo elemento e avan\u00e7a o \u00edndice\n}\n\nclass ReverseIterator {\n  - data: []int                             ' Refer\u00eancia \u00e0 lista de inteiros a ser iterada\n  - index: int                              ' \u00cdndice atual do iterador (come\u00e7a do fim)\n  --\n  + HasNext(): bool                         ' Retorna true se houver elementos anteriores\n  + Next(): int                             ' Retorna o elemento atual e retrocede o \u00edndice\n}\n\nclass CyclicIterator {\n  - data: []int                             ' Refer\u00eancia \u00e0 lista de inteiros a ser iterada\n  - index: int                              ' \u00cdndice atual do iterador (volta ao in\u00edcio ao fim)\n  --\n  + HasNext(): bool                         ' Sempre retorna true (iterador infinito)\n  + Next(): int                             ' Retorna o pr\u00f3ximo elemento e reinicia no fim\n}\n```\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype MyList struct {\n\tdata []int\n}\n\ntype Iterator struct {\n\tdata  []int\n\tindex int\n}\n\nfunc NewMyList(values []int) *MyList {\n\treturn &MyList{data: values}\n}\n\nfunc (l *MyList) Iterator() *Iterator {\n\treturn &Iterator{data: l.data, index: -1}\n}\n\nfunc (i *Iterator) HasNext() bool {\n\treturn i.index < len(i.data)-1\n}\n\nfunc (i *Iterator) Next() int {\n\tif i.index == len(i.data) {\n\t\tpanic(fmt.Errorf(\"No more elements\"))\n\t}\n\ti.index += 1\n\treturn i.data[i.index]\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tmylist := NewMyList([]int{})\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\targs := strings.Fields(line)\n\t\tfmt.Println(\"$\" + line)\n\n\t\tswitch args[0] {\n\t\tcase \"end\":\n\t\t\tbreak\n\t\tcase \"read\":\n\t\t\tfor i := 1; i < len(args); i++ {\n\t\t\t\tslice := make([]int, len(args)-1)\n\t\t\t\tfor i, value := range args[1:] {\n\t\t\t\t\tslice[i], _ = strconv.Atoi(value)\n\t\t\t\t}\n\t\t\t\tmylist = NewMyList(slice)\n\t\t\t}\n\t\tcase \"show\":\n\t\t\tfmt.Print(\"[ \")\n\t\t\tfor it := mylist.Iterator(); it.HasNext(); {\n\t\t\t\tfmt.Printf(\"%v \", it.Next())\n\t\t\t}\n\t\t\tfmt.Println(\"]\")\n\t\tcase \"reverse\":\n\t\t\t// fmt.Print(\"[ \")\n\t\t\t// for it := mylist.ReverseIterator(); it.HasNext(); {\n\t\t\t// \tfmt.Printf(\"%v \", it.Next())\n\t\t\t// }\n\t\t\t// fmt.Println(\"]\")\n\t\tcase \"cyclic\":\n\t\t\t// qtd, _ := strconv.Atoi(args[1])\n\t\t\t// fmt.Print(\"[ \")\n\t\t\t// it := mylist.CyclicIterator()\n\t\t\t// for range qtd {\n\t\t\t// \tfmt.Printf(\"%v \", it.Next())\n\t\t\t// }\n\t\t\t// fmt.Println(\"]\")\n\t\t}\n\t}\n\n}\n",
                "type": "show"
            }
        ]
    }
}
