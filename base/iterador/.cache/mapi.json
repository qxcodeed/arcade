{
    "title": "@iterador: Criando um iterador",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@iterador: Criando um iterador</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"criando-um-iterador\">Criando um iterador</h1>\n<p>Um iterador pode ser utilizado para esconder a forma como os\nelementos s\u00e3o organizados e acessados.</p>\n<ul>\n<li>\u00c9 responsabilidade do iterador saber como chegar no pr\u00f3ximo\nelemento.</li>\n<li>Saber se chegou ao fim da estrutura.</li>\n<li>Opcional dependendo da estrutura:\n<ul>\n<li>Saber como voltar para o elemento anterior.</li>\n</ul></li>\n</ul>\n<p>Vamos criar iteradores para navegar em um vetor utilizando a sintaxe\nsimplificada dos iteradores do Java.</p>\n<p>Um iterador \u00e9 criado a partir da estrutura a ser percorrida e possui\ndois m\u00e9todos principais.</p>\n<ul>\n<li>hasNext(): bool, que informa se ainda tem algum elemento.</li>\n<li>next(): int, que pega o pr\u00f3ximo elemento.</li>\n</ul>\n<p>Os nomes mudam um pouco dependendo da linguagem utilizada. Veja o\ndiagrama dos m\u00e9todos a serem implementados e o exemplo nos arquivos\n<code>extra.md</code> e no rascunho da linguagem.</p>\n<p>Voc\u00ea vai receber implementado um iterador que percorre a estrutura do\nin\u00edcio ao fim e deve implementar outros dois iteradores.</p>\n<ul>\n<li>ReverseIterator: percorre a estrutura do fim para o in\u00edcio.</li>\n<li>CyclicIterator: percorre a estrutura como se fosse uma lista c\u00edclica\ninfinita.</li>\n</ul>\n<h2 id=\"shell\">Shell</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE show</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>$read <span class=\"dv\">1</span> <span class=\"dv\">4</span> <span class=\"dv\">2</span> <span class=\"dv\">3</span> <span class=\"dv\">5</span> <span class=\"dv\">6</span> <span class=\"dv\">9</span> <span class=\"dv\">7</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>$show</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>[ <span class=\"dv\">1</span> <span class=\"dv\">4</span> <span class=\"dv\">2</span> <span class=\"dv\">3</span> <span class=\"dv\">5</span> <span class=\"dv\">6</span> <span class=\"dv\">9</span> <span class=\"dv\">7</span> ]</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>$end</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE show</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>$read <span class=\"dv\">1</span> <span class=\"dv\">4</span> <span class=\"dv\">2</span> <span class=\"dv\">3</span> <span class=\"dv\">5</span> <span class=\"dv\">6</span> <span class=\"dv\">9</span> <span class=\"dv\">7</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>$reverse</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>[ <span class=\"dv\">7</span> <span class=\"dv\">9</span> <span class=\"dv\">6</span> <span class=\"dv\">5</span> <span class=\"dv\">3</span> <span class=\"dv\">2</span> <span class=\"dv\">4</span> <span class=\"dv\">1</span> ]</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>$end</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE show</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>$read <span class=\"dv\">1</span> <span class=\"dv\">2</span> <span class=\"dv\">3</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>$cyclic <span class=\"dv\">10</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>[ <span class=\"dv\">1</span> <span class=\"dv\">2</span> <span class=\"dv\">3</span> <span class=\"dv\">1</span> <span class=\"dv\">2</span> <span class=\"dv\">3</span> <span class=\"dv\">1</span> <span class=\"dv\">2</span> <span class=\"dv\">3</span> <span class=\"dv\">1</span> ]</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>$end</span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT show\nread 1 4 2 3 5 6 9 7\nshow\nend\n======== EXPECT\n$read 1 4 2 3 5 6 9 7\n$show\n[ 1 4 2 3 5 6 9 7 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT show\nread 1 4 2 3 5 6 9 7\nreverse\nend\n======== EXPECT\n$read 1 4 2 3 5 6 9 7\n$reverse\n[ 7 9 6 5 3 2 4 1 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT show\nread 1 2 3\ncyclic 10\nend\n======== EXPECT\n$read 1 2 3\n$cyclic 10\n[ 1 2 3 1 2 3 1 2 3 1 ]\n$end\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# Iteradores\n\n```ts\nclass MyList {\n  - data: []int                             ' Armazena os valores inteiros da lista\n  --\n  + NewMyList(values: []int): *MyList       ' Cria uma nova lista com os valores fornecidos\n  + Iterator(): *Iterator                   ' Retorna um iterador do in\u00edcio ao fim\n  + ReverseIterator(): *ReverseIterator     ' Retorna um iterador do fim ao in\u00edcio\n  + CyclicIterator(): *CyclicIterator       ' Retorna um iterador circular que nunca termina\n}\n\nclass Iterator {\n  - data: []int                             ' Refer\u00eancia \u00e0 lista de inteiros a ser iterada\n  - index: int                              ' \u00cdndice atual do iterador\n  --\n  + HasNext(): bool                         ' Retorna true se houver mais elementos a iterar\n  + Next(): int                             ' Retorna o pr\u00f3ximo elemento e avan\u00e7a o \u00edndice\n}\n\nclass ReverseIterator {\n  - data: []int                             ' Refer\u00eancia \u00e0 lista de inteiros a ser iterada\n  - index: int                              ' \u00cdndice atual do iterador (come\u00e7a do fim)\n  --\n  + HasNext(): bool                         ' Retorna true se houver elementos anteriores\n  + Next(): int                             ' Retorna o elemento atual e retrocede o \u00edndice\n}\n\nclass CyclicIterator {\n  - data: []int                             ' Refer\u00eancia \u00e0 lista de inteiros a ser iterada\n  - index: int                              ' \u00cdndice atual do iterador (volta ao in\u00edcio ao fim)\n  --\n  + HasNext(): bool                         ' Sempre retorna true (iterador infinito)\n  + Next(): int                             ' Retorna o pr\u00f3ximo elemento e reinicia no fim\n}\n```\n",
                "encoding": 0
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype MyList struct {\n\tdata []int\n}\n\ntype Iterator struct {\n\tdata  []int\n\tindex int\n}\n\nfunc NewMyList(values []int) *MyList {\n\treturn &MyList{data: values}\n}\n\nfunc (l *MyList) Iterator() *Iterator {\n\treturn &Iterator{data: l.data, index: -1}\n}\n\nfunc (i *Iterator) HasNext() bool {\n\treturn i.index < len(i.data)-1\n}\n\nfunc (i *Iterator) Next() int {\n\tif i.index == len(i.data) {\n\t\tpanic(fmt.Errorf(\"No more elements\"))\n\t}\n\ti.index += 1\n\treturn i.data[i.index]\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tmylist := NewMyList([]int{})\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\targs := strings.Fields(line)\n\t\tfmt.Println(\"$\" + line)\n\n\t\tswitch args[0] {\n\t\tcase \"end\":\n\t\t\tbreak\n\t\tcase \"read\":\n\t\t\tfor i := 1; i < len(args); i++ {\n\t\t\t\tslice := make([]int, len(args)-1)\n\t\t\t\tfor i, value := range args[1:] {\n\t\t\t\t\tslice[i], _ = strconv.Atoi(value)\n\t\t\t\t}\n\t\t\t\tmylist = NewMyList(slice)\n\t\t\t}\n\t\tcase \"show\":\n\t\t\tfmt.Print(\"[ \")\n\t\t\tfor it := mylist.Iterator(); it.HasNext(); {\n\t\t\t\tfmt.Printf(\"%v \", it.Next())\n\t\t\t}\n\t\t\tfmt.Println(\"]\")\n\t\tcase \"reverse\":\n\t\t\t// fmt.Print(\"[ \")\n\t\t\t// for it := mylist.ReverseIterator(); it.HasNext(); {\n\t\t\t// \tfmt.Printf(\"%v \", it.Next())\n\t\t\t// }\n\t\t\t// fmt.Println(\"]\")\n\t\tcase \"cyclic\":\n\t\t\t// qtd, _ := strconv.Atoi(args[1])\n\t\t\t// fmt.Print(\"[ \")\n\t\t\t// it := mylist.CyclicIterator()\n\t\t\t// for range qtd {\n\t\t\t// \tfmt.Printf(\"%v \", it.Next())\n\t\t\t// }\n\t\t\t// fmt.Println(\"]\")\n\t\t}\n\t}\n\n}\n",
                "encoding": 0
            }
        ]
    }
}
