{
    "title": "@iterador: Criando um iterador",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@iterador: Criando um iterador</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@iterador: Criando um iterador</h1>\n            <h1 id=\"criando-um-iterador\">Criando um iterador</h1>\n<p>Um iterador pode ser utilizado para esconder a forma como os elementos s\u00e3o organizados e acessados.</p>\n<ul>\n<li>\u00c9 responsabilidade do iterador saber como chegar no pr\u00f3ximo elemento.</li>\n<li>Saber se chegou ao fim da estrutura.</li>\n<li>Opcional dependendo da estrutura:</li>\n<li>Saber como voltar para o elemento anterior.</li>\n</ul>\n<p>Vamos criar iteradores para navegar em um vetor utilizando a sintaxe simplificada dos iteradores do Java.</p>\n<p>Um iterador \u00e9 criado a partir da estrutura a ser percorrida e possui dois m\u00e9todos principais.</p>\n<ul>\n<li>hasNext(): bool, que informa se ainda tem algum elemento.</li>\n<li>next(): int, que pega o pr\u00f3ximo elemento.</li>\n</ul>\n<p>Os nomes mudam um pouco dependendo da linguagem utilizada. Veja o diagrama dos m\u00e9todos a serem implementados e o exemplo nos arquivos <code>extra.md</code> e no rascunho da linguagem.</p>\n<p>Voc\u00ea vai receber implementado um iterador que percorre a estrutura do in\u00edcio ao fim e deve implementar outros dois iteradores.</p>\n<ul>\n<li>ReverseIterator: percorre a estrutura do fim para o in\u00edcio.</li>\n<li>CyclicIterator: percorre a estrutura como se fosse uma lista c\u00edclica infinita.</li>\n</ul>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# Iteradores\n\n```ts\nclass MyList {\n  - data: []int                             ' Armazena os valores inteiros da lista\n  --\n  + NewMyList(values: []int): *MyList       ' Cria uma nova lista com os valores fornecidos\n  + Iterator(): *Iterator                   ' Retorna um iterador do in\u00edcio ao fim\n  + ReverseIterator(): *ReverseIterator     ' Retorna um iterador do fim ao in\u00edcio\n  + CyclicIterator(): *CyclicIterator       ' Retorna um iterador circular que nunca termina\n}\n\nclass Iterator {\n  - data: []int                             ' Refer\u00eancia \u00e0 lista de inteiros a ser iterada\n  - index: int                              ' \u00cdndice atual do iterador\n  --\n  + HasNext(): bool                         ' Retorna true se houver mais elementos a iterar\n  + Next(): int                             ' Retorna o pr\u00f3ximo elemento e avan\u00e7a o \u00edndice\n}\n\nclass ReverseIterator {\n  - data: []int                             ' Refer\u00eancia \u00e0 lista de inteiros a ser iterada\n  - index: int                              ' \u00cdndice atual do iterador (come\u00e7a do fim)\n  --\n  + HasNext(): bool                         ' Retorna true se houver elementos anteriores\n  + Next(): int                             ' Retorna o elemento atual e retrocede o \u00edndice\n}\n\nclass CyclicIterator {\n  - data: []int                             ' Refer\u00eancia \u00e0 lista de inteiros a ser iterada\n  - index: int                              ' \u00cdndice atual do iterador (volta ao in\u00edcio ao fim)\n  --\n  + HasNext(): bool                         ' Sempre retorna true (iterador infinito)\n  + Next(): int                             ' Retorna o pr\u00f3ximo elemento e reinicia no fim\n}\n```\n",
                "encoding": 0
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype MyList struct {\n\tdata []int\n}\n\ntype Iterator struct {\n\tdata  []int\n\tindex int\n}\n\nfunc NewMyList(values []int) *MyList {\n\treturn &MyList{data: values}\n}\n\nfunc (l *MyList) Iterator() *Iterator {\n\treturn &Iterator{data: l.data, index: 0}\n}\n\nfunc (i *Iterator) HasNext() bool {\n\treturn i.index < len(i.data)\n}\n\nfunc (i *Iterator) Next() int {\n\tif i.index == len(i.data) {\n\t\tpanic(fmt.Errorf(\"No more elements\"))\n\t}\n\ti.index += 1\n\treturn i.data[i.index-1]\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tmylist := NewMyList([]int{})\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\targs := strings.Fields(line)\n\t\tfmt.Println(\"$\" + line)\n\n\t\tswitch args[0] {\n\t\tcase \"end\":\n\t\t\tbreak\n\t\tcase \"read\":\n\t\t\tfor i := 1; i < len(args); i++ {\n\t\t\t\tslice := make([]int, len(args)-1)\n\t\t\t\tfor i, value := range args[1:] {\n\t\t\t\t\tslice[i], _ = strconv.Atoi(value)\n\t\t\t\t}\n\t\t\t\tmylist = NewMyList(slice)\n\t\t\t}\n\t\tcase \"print\":\n\t\t\tfmt.Print(\"[ \")\n\t\t\tfor it := mylist.Iterator(); it.HasNext(); {\n\t\t\t\tfmt.Println(it.Next())\n\t\t\t}\n\t\t\tfmt.Println(\"]\")\n\t\tcase \"reverse\":\n\t\t\t// fmt.Print(\"[ \")\n\t\t\t// for it := mylist.ReverseIterator(); it.HasNext(); {\n\t\t\t// \tfmt.Println(it.Next())\n\t\t\t// }\n\t\t\t// fmt.Println(\"]\")\n\t\tcase \"cyclic\":\n\t\t\t// fmt.Print(\"[ \")\n\t\t\t// for it := mylist.CyclicIterator(); it.HasNext(); {\n\t\t\t// \tfmt.Println(it.Next())\n\t\t\t// }\n\t\t\t// fmt.Println(\"]\")\n\t\t}\n\t}\n\n}\n",
                "encoding": 0
            }
        ]
    }
}
