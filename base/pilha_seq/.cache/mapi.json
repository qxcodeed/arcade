{
    "title": "@pilha_seq: Construindo uma Pilha com Lista Sequencial CPP",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@pilha_seq: Construindo uma Pilha com Lista Sequencial CPP</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@pilha_seq: Construindo uma Pilha com Lista Sequencial CPP</h1>\n            <h1 id=\"construindo-uma-pilha-com-lista-sequencial-cpp\">Construindo uma Pilha com Lista Sequencial CPP</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#tests\">Tests</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<h2 id=\"intro\">Intro</h2>\n<p>Neste exerc\u00edcio, voc\u00ea implementar\u00e1 uma <strong>Pilha</strong> usando uma <strong>Lista Sequencial</strong>, uma estrutura de dados linear que segue o princ\u00edpio <strong>LIFO</strong> (Last In, First Out). Isso significa que o \u00faltimo elemento inserido ser\u00e1 o primeiro a ser removido. Pilhas s\u00e3o frequentemente usadas em v\u00e1rias aplica\u00e7\u00f5es, como gerenciamento de chamadas de fun\u00e7\u00e3o, navega\u00e7\u00e3o na web (pilha de hist\u00f3rico), e avalia\u00e7\u00e3o de express\u00f5es aritm\u00e9ticas.</p>\n<p>A pilha ser\u00e1 implementada usando um array chamado <code>Arr</code>, onde cada elemento armazenado ser\u00e1 um inteiro. A classe <code>Stack</code> no arquivo <code>lib.cpp</code> j\u00e1 possui alguns m\u00e9todos implementados, enquanto outros ainda precisam ser desenvolvidos.</p>\n<h3 id=\"metodos-na-classe-stack\">M\u00e9todos na Classe <code>Stack</code></h3>\n<ul>\n<li>~~<code>Stack()</code>~~</li>\n<li>~~<code>~Stack()</code>~~</li>\n<li><code>void push(int info)</code></li>\n<li><code>void pop()</code></li>\n<li><code>int peek()</code></li>\n<li><code>void clear()</code></li>\n<li><code>bool full()</code></li>\n<li>~~<code>void empty()</code>~~</li>\n<li>~~<code>void print()</code>~~</li>\n</ul>\n<p>Os m\u00e9todos riscados est\u00e3o prontos. Voc\u00ea precisar\u00e1 implementar os m\u00e9todos <code>push</code>, <code>pop</code>, <code>peek</code>, <code>clear</code>, e <code>full</code>. As instru\u00e7\u00f5es detalhadas sobre cada m\u00e9todo est\u00e3o nos coment\u00e1rios dentro do arquivo <code>lib.cpp</code>. Lembre-se de seguir as dire\u00e7\u00f5es corretamente para garantir que sua implementa\u00e7\u00e3o passe nos testes.</p>\n<h3 id=\"observacoes\">Observa\u00e7\u00f5es</h3>\n<ul>\n<li><strong>OBS. 1:</strong> N\u00e3o altere os m\u00e9todos j\u00e1 implementados.</li>\n<li><strong>OBS. 2:</strong> N\u00e3o \u00e9 necess\u00e1rio escrever a fun\u00e7\u00e3o <code>main()</code>. Ela j\u00e1 est\u00e1 provida no ambiente de avalia\u00e7\u00e3o.</li>\n</ul>\n<h2 id=\"draft\">Draft</h2>\n<ul>\n<li>Implemente os m\u00e9todos faltantes no arquivo <code>lib.cpp</code> usando a l\u00f3gica apropriada para uma pilha baseada em array.</li>\n</ul>\n<!-- links .cache/draft -->\n<ul>\n<li>cpp</li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/pilha_seq/.cache/draft/cpp/lib.cpp\">lib.cpp</a></li>\n<li><a href=\"https://github.com/qxcodeed/arcade/blob/master/base/pilha_seq/.cache/draft/cpp/main.cpp\">main.cpp</a></li>\n</ul>\n<!-- links -->\n\n<h2 id=\"tests\">Tests</h2>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A entrada consiste em uma sequ\u00eancia de opera\u00e7\u00f5es na pilha, incluindo inser\u00e7\u00f5es, remo\u00e7\u00f5es, e verifica\u00e7\u00f5es de estado, como se a pilha est\u00e1 cheia ou se um elemento espec\u00edfico est\u00e1 no topo.</li>\n</ul>\n<h3 id=\"saida\">Sa\u00edda</h3>\n<ul>\n<li>A sa\u00edda consiste nas respostas para as opera\u00e7\u00f5es realizadas, como o valor no topo da pilha ou mensagens indicando se a pilha est\u00e1 cheia ou vazia.</li>\n</ul>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste peek\ntest_peek\n======== EXPECT\nTESTE peek\n[]\npush 10\npeek == 10\npush 15\npeek == 15\npush 20\npeek == 20\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste push\ntest_push\n======== EXPECT\nTESTE push\ncapacidade == 4\npush 10\npush 15\npush 20\npush 25\npush 55\nEsperado: [10, 15, 20, 25]\nPilha: [10, 15, 20, 25]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste pop\ntest_pop\n======== EXPECT\nTESTE pop\nPilha: [10, 15, 20, 25, 30]\npop\nPilha: [10, 15, 20, 25]\npop\nPilha: [10, 15, 20]\npop\nPilha: [10, 15]\npop\nPilha: [10]\npop\nPilha: []\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Teste tudo\ntest_all\n======== EXPECT\nTESTE todos (push, pop, peek, size)\npush 0 to 99\npeek == 99\nsize == 100\n\npush 100 to 199\npeek == 199\nsize == 200\n\npush 200 to 299\npeek == 299\nsize == 300\n\npush 300 to 399\npeek == 399\nsize == 400\n\npush 400 to 499\npeek == 499\nsize == 500\n\npush 500 to 599\npeek == 599\nsize == 600\n\npush 600 to 699\npeek == 699\nsize == 700\n\npush 700 to 799\npeek == 799\nsize == 800\n\npush 800 to 899\npeek == 899\nsize == 900\n\npush 900 to 999\npeek == 999\nsize == 1000\n\npop 100 times\npeek == 899\nsize == 900\n\npop 100 times\npeek == 799\nsize == 800\n\npop 100 times\npeek == 699\nsize == 700\n\npop 100 times\npeek == 599\nsize == 600\n\npop 100 times\npeek == 499\nsize == 500\n\npop 100 times\npeek == 399\nsize == 400\n\npop 100 times\npeek == 299\nsize == 300\n\npop 100 times\npeek == 199\nsize == 200\n\npop 100 times\npeek == 99\nsize == 100\n\npop 100 times\nLista: []\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "lib.cpp",
                "contents": "#include <iostream>\n\n// Stack ou Pilha\n// Altere somente os campos marcados com TODO\nstruct Stack {\n    int size;  // Quantidade de elementos da pilha\n    int capacity;  // Quantidade m\u00e1xima de elementos permitidos dentro da pilha\n    int *Arr; // Ponteiro para array de elementos onde salvamos as informacoes do usuario\n\n    Stack(int capacity) {\n        this->size = 0;\n        this->capacity = capacity;\n        this->Arr = new int[this->capacity];\n    }\n\n    ~Stack() {\n        delete[] Arr;\n    }\n\n    // Adiciona um elemento no topo da pilha\n    // info: informacao do elemento a ser inserido\n    void push(int info) {\n        // TODO\n        (void) info;\n    }\n\n\n    // Remove um elemento do topo da pilha.\n    // Nao faz nada caso a pilha esteja vazia.\n    void pop() {\n        // TODO\n    }\n\n\n    // Retorna a informacao do elemento no topo da pilha.\n    // Retorna -1, caso a pilha esteja vazia.\n    int peek() {\n        // TODO\n        return -1;\n    }\n\n\n    // Remove todos os elementos da pilha\n    void clear() {\n        // TODO\n    }\n\n\n    // Devolve true se cheia e false caso contrario\n    bool empty() {\n        // TODO\n        return false;\n    }\n\n    // Devolve true se vazia e false caso contrario\n    bool full() {\n        // TODO\n        return false;\n    } \n\n    // Printa as informacoes da lista\n    void print() {\n        std::cout << \"[\";\n        for(int i = 0; i < this->size; i++) {\n            std::cout << this->Arr[i];\n            if(i < this->size-1) {\n                std::cout << \", \";\n            }\n        }\n        std::cout << \"]\" << std::endl;\n    }    \n};\n",
                "encoding": 0
            },
            {
                "name": "main.cpp",
                "contents": "#include <iostream>\n#include <map>\n#include \"lib.cpp\"\n\nusing std::cout;\nusing std::endl;\n\nbool LOG_ALLOCATED = false;\nstd::map<void*, int> allocated_nodes_status = {};\nstd::map<int, int> mapa = {};\nconst int ALLOCATED = 1;\nconst int DELETED = 2;\n\n// Salvar Nos alocados\n\ntemplate <typename K, typename V>\nvoid printMap(const std::map<K, V>& m) {\n    for (const auto& pair : m) {\n        std::cout << \"Key: \" << pair.first << \", Value: \" << pair.second << std::endl;\n    }\n}\n\n/////////////// TESTE CONSTRUCT ///////////////\n\nvoid test_constructor() {\n    cout << \"TESTE Construtor\" << endl;\n    Stack* stack = new Stack(8); \n\n    if(stack->size == 0 && stack->capacity == 8) {\n        cout << \"Ok\" << endl;\n    } else {\n        cout << \"Atributos incorretos\";\n    }\n}\n\n\nvoid push_test(Stack &stack, int info) {\n    if(!stack.full()) {\n        stack.Arr[stack.size] = info;\n        stack.size++;\n    }\n}\n\nint peek_test(Stack &stack) {\n    if(!stack.empty()) {\n        return stack.Arr[stack.size-1];\n    } else {\n        return -1;\n    }\n}\n\n/////////////// TESTE HAS_INFO ///////////////\n\nvoid test_peek() {\n    cout << \"TESTE peek\" << endl;\n    Stack stack(8);\n    \n    stack.print();\n\n    push_test(stack, 10);\n    cout << \"push 10\" << endl;\n    cout << \"peek == \" << stack.peek() << endl;\n\n    push_test(stack, 15);\n    cout << \"push 15\" << endl;\n    cout << \"peek == \" << stack.peek() << endl;\n    \n    push_test(stack, 20);\n    cout << \"push 20\" << endl;\n    cout << \"peek == \" << stack.peek() << endl;\n}\n\n\n/////////////// TESTE PUSH ///////////////\n\nvoid test_push() {\n    allocated_nodes_status.clear();\n    cout << \"TESTE push\" << endl;\n    cout << \"capacidade == 4\" << endl;\n    Stack stack(4);\n\n    stack.push(10);\n    cout << \"push \" << 10 << endl;\n\n    stack.push(15);\n    cout << \"push \" << 15 << endl;\n\n    stack.push(20);\n    cout << \"push \" << 20 << endl;\n\n    stack.push(25);\n    cout << \"push \" << 25 << endl;\n\n    stack.push(55);\n    cout << \"push \" << 55 << endl;\n\n    cout << \"Esperado: [10, 15, 20, 25]\" << endl;\n    cout << \"Pilha: \"; stack.print();\n}\n\n/////////////// TESTE POP ///////////////\n\nvoid test_pop() {\n    cout << \"TESTE pop\" << endl;\n    Stack stack(8);\n\n    push_test(stack, 10);\n    push_test(stack, 15);\n    push_test(stack, 20);\n    push_test(stack, 25);\n    push_test(stack, 30);\n\n    cout << \"Pilha: \"; stack.print();\n\n    cout << \"pop\" << endl; stack.pop();\n    cout << \"Pilha: \"; stack.print();\n\n    cout << \"pop\" << endl; stack.pop();\n    cout << \"Pilha: \"; stack.print();\n\n    cout << \"pop\" << endl; stack.pop();\n    cout << \"Pilha: \"; stack.print();\n\n    cout << \"pop\" << endl; stack.pop();\n    cout << \"Pilha: \"; stack.print();\n\n    cout << \"pop\" << endl; stack.pop();\n    cout << \"Pilha: \"; stack.print();\n}\n\n/////////////// TESTE CLEAR ///////////////\n\nvoid test_clear() {\n    cout << \"TESTE clear\" << endl;\n    Stack stack(16);\n\n    push_test(stack, 10);\n    push_test(stack, 15);\n    push_test(stack, 20);\n    push_test(stack, 25);\n    push_test(stack, 30);\n\n    cout << \"Pilha: \"; stack.print();\n    cout << \"clear\" << endl;\n    cout << \"Pilha: \"; stack.print();\n}\n\n\n/////////////// TESTE COMPLETO ///////////////\n\nvoid test_all() {\n    cout << \"TESTE todos (push, pop, peek, size)\" << endl;\n    Stack stack(1024);\n\n    for(int i = 0; i < 1000; i++) {\n        stack.push(i);\n        if(i%100 == 0) {\n            cout << \"push \" << i << \" to \" << i + 99 << endl;\n        }\n        if(i%100 == 99) {\n            cout << \"peek == \" << stack.peek() << endl;\n            cout << \"size == \" << stack.size << endl << endl;\n        }\n    }\n\n    for(int i = 0; i < 1000; i++) {\n        stack.pop();\n        if(i%100 == 99) {\n            cout << \"pop 100 times\" << endl;\n            if(stack.size > 0) {\n                cout << \"peek == \" << stack.peek() << endl;\n                cout << \"size == \" << stack.size << endl << endl;\n            }\n        }\n    }\n\n    cout << \"Lista: \"; stack.print();\n}\n\n/////////////// FIM TESTES ///////////////\n\nint main() {\n    std::string input;\n    std::cin >> input;\n\n    if(input == \"test_peek\") test_peek();\n    if(input == \"test_push\") test_push();\n    if(input == \"test_pop\") test_pop();\n    if(input == \"test_all\") test_all();\n}\n",
                "encoding": 0
            }
        ]
    }
}
