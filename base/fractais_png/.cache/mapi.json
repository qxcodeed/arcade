{
    "title": "@fractais_png: Desenhando Fractais",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@fractais_png: Desenhando Fractais</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@fractais_png: Desenhando Fractais</h1>\n            <h1 id=\"desenhando-fractais\">Desenhando Fractais</h1>\n<ul>\n<li>Veja o arquivo extra.png para detalhes de como instalar a biblioteca para desenhar pngs.</li>\n<li>Ap\u00f3s isso, vamos treinar o desenho de alguns fractais.</li>\n</ul>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais_png/./desenhos/arvore.png\" /></p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais_png/./desenhos/circulos.png\" /></p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais_png/./desenhos/gelo.png\" /></p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais_png/./desenhos/quadrados.png\" /></p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais_png/./desenhos/rotacao.png\" /></p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais_png/./desenhos/carpete.jpg\" /></p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais_png/./desenhos/triangulos.png\" /></p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais_png/./desenhos/trigo.png\" /></p>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "go": [
            {
                "name": "pen.go",
                "contents": "package main\n\nimport (\n\t\"math\"\n\n\t\"github.com/fogleman/gg\"\n)\n\ntype Pen struct {\n\tx, y    float64\n\tangle   float64\n\tpenDown bool\n\tdc      *gg.Context\n}\n\nfunc NewPen(width, height int) *Pen {\n\tdc := gg.NewContext(width, height)\n\tdc.SetRGB(1, 1, 1)\n\tdc.Clear()\n\tdc.SetRGB(0, 0, 0)\n\tdc.SetLineWidth(2)\n\treturn &Pen{\n\t\tx: float64(width) / 2, y: float64(height) / 2,\n\t\tangle: 0, penDown: true, dc: dc,\n\t}\n}\n\nfunc (t *Pen) Walk(dist float64) {\n\tnewX := t.x + dist*math.Cos(t.angle*math.Pi/180)\n\tnewY := t.y - dist*math.Sin(t.angle*math.Pi/180)\n\tif t.penDown {\n\t\tt.dc.DrawLine(t.x, t.y, newX, newY)\n\t\tt.dc.Stroke()\n\t}\n\tt.x, t.y = newX, newY\n}\n\nfunc (t *Pen) Left(deg float64)  { t.angle += deg }\nfunc (t *Pen) Right(deg float64) { t.angle -= deg }\n\nfunc (t *Pen) Up()   { t.penDown = false }\nfunc (t *Pen) Down() { t.penDown = true }\n\nfunc (t *Pen) Goto(x, y float64) {\n\tif t.penDown {\n\t\tt.dc.DrawLine(t.x, t.y, x, y)\n\t\tt.dc.Stroke()\n\t}\n\tt.x, t.y = x, y\n}\n\nfunc (t *Pen) SetPosition(x, y float64) {\n\tt.x = x\n\tt.y = y\n}\n\nfunc (t *Pen) SetHeading(angle float64) {\n\tt.angle = angle\n}\n\nfunc (t *Pen) DrawCircle(radius float64) {\n\tif t.penDown {\n\t\tt.dc.DrawCircle(t.x, t.y, radius)\n\t\tt.dc.Stroke()\n\t}\n}\n\nfunc (t *Pen) DrawRect(w, h float64) {\n\tif t.penDown {\n\t\tt.dc.DrawRectangle(t.x, t.y, w, h)\n\t\tt.dc.Stroke()\n\t}\n}\n\nfunc (t *Pen) FillCircle(radius float64) {\n\tif t.penDown {\n\t\tt.dc.DrawCircle(t.x, t.y, radius)\n\t\tt.dc.Fill()\n\t}\n}\n\nfunc (t *Pen) FillSquare(w, h float64) {\n\tt.dc.DrawRectangle(t.x, t.y, w, h)\n\tt.dc.Fill()\n}\n\nfunc (t *Pen) SetRGB(r, g, b float64) {\n\tt.dc.SetRGB(r/255, g/255, b/255)\n}\n\nfunc (t *Pen) SetLineWidth(w float64) {\n\tt.dc.SetLineWidth(w)\n}\n\nfunc (t *Pen) SavePNG(path string) {\n\tt.dc.SavePNG(path)\n}\n",
                "encoding": 0
            },
            {
                "name": "extra.md",
                "contents": "# Instala\u00e7\u00e3o\n\n- Instala\u00e7\u00e3o das depend\u00eancias\n  - Ap\u00f3s baixar a atividade pelo tko\n  - Navegue at\u00e9 a pasta da atividade pelo terminal\n  - cd ed/database/fractais_png\n  - Digite o seguinte comando para baixar a biblioteca de desenho\n  - go get \"github.com/fogleman/gg\"\n- Rodando\n  - Digite o seguinte comando para rodar\n  - `go run .`\n  - Abra o arquivo .png gerado para acompanhar o resultado do desenho\n\n## Utilizando\n\nA estrutura `Pen` simula uma caneta gr\u00e1fica para desenhar em uma imagem 2D utilizando a biblioteca [`gg`](https://github.com/fogleman/gg). Ela permite movimenta\u00e7\u00e3o com controle de dire\u00e7\u00e3o, tra\u00e7ado de linhas, figuras geom\u00e9tricas e gera\u00e7\u00e3o de arquivos PNG.\n\n---\n\n## \ud83d\udd27 Fun\u00e7\u00f5es e M\u00e9todos\n\n### `func NewPen(width, height int) *Pen`\n\nCria uma nova inst\u00e2ncia de `Pen` com um canvas (`gg.Context`) do tamanho especificado.  \nA caneta inicia no centro da tela, com a dire\u00e7\u00e3o apontando para a direita (0 graus), com a caneta abaixada (`penDown = true`).\n\n---\n\n### `func (t *Pen) Walk(dist float64)`\n\nMove a caneta `dist` unidades na dire\u00e7\u00e3o atual.  \nSe a caneta estiver abaixada (`penDown`), uma linha ser\u00e1 desenhada entre o ponto atual e o novo ponto.\n\n---\n\n### `func (t *Pen) Left(deg float64)`\n\nGira a dire\u00e7\u00e3o da caneta `deg` graus **no sentido anti-hor\u00e1rio** (aumenta o \u00e2ngulo).\n\n---\n\n### `func (t *Pen) Right(deg float64)`\n\nGira a dire\u00e7\u00e3o da caneta `deg` graus **no sentido hor\u00e1rio** (diminui o \u00e2ngulo).\n\n---\n\n### `func (t *Pen) Up()`\n\nLevanta a caneta.  \nPr\u00f3ximos movimentos n\u00e3o desenhar\u00e3o linhas.\n\n---\n\n### `func (t *Pen) Down()`\n\nAbaixa a caneta.  \nPr\u00f3ximos movimentos desenhar\u00e3o linhas.\n\n---\n\n### `func (t *Pen) Goto(x, y float64)`\n\nMove a caneta diretamente para as coordenadas `(x, y)`.  \nSe estiver abaixada, desenha uma linha entre o ponto atual e o destino.\n\n---\n\n### `func (t *Pen) SetPosition(x, y float64)`\n\nMove a caneta para as coordenadas `(x, y)` **sem desenhar**, independentemente do estado do `penDown`.\n\n---\n\n### `func (t *Pen) SetHeading(angle float64)`\n\nDefine a dire\u00e7\u00e3o atual da caneta (em graus).  \n0\u00b0 aponta para a direita, 90\u00b0 para cima, 180\u00b0 para a esquerda, 270\u00b0 para baixo.\n\n---\n\n### `func (t *Pen) DrawCircle(radius float64)`\n\nDesenha o contorno de um c\u00edrculo com o centro na posi\u00e7\u00e3o atual e raio `radius`.  \nS\u00f3 desenha se a caneta estiver abaixada.\n\n---\n\n### `func (t *Pen) DrawRect(w, h float64)`\n\nDesenha o contorno de um ret\u00e2ngulo com largura `w` e altura `h`, com canto superior esquerdo na posi\u00e7\u00e3o atual.  \nS\u00f3 desenha se a caneta estiver abaixada.\n\n---\n\n### `func (t *Pen) FillCircle(radius float64)`\n\nDesenha e preenche um c\u00edrculo com raio `radius`, centrado na posi\u00e7\u00e3o atual.  \nS\u00f3 preenche se a caneta estiver abaixada.\n\n---\n\n### `func (t *Pen) FillSquare(w, h float64)`\n\nDesenha e preenche um ret\u00e2ngulo (ou quadrado) com largura `w` e altura `h`, com canto superior esquerdo na posi\u00e7\u00e3o atual.  \nEste m\u00e9todo **ignora o estado de `penDown`**.\n\n---\n\n### `func (t *Pen) SetRGB(r, g, b float64)`\n\nDefine a cor da caneta com os valores RGB fornecidos (de 0 a 255).  \nExemplo: `SetRGB(255, 0, 0)` define a cor vermelha.\n\n---\n\n### `func (t *Pen) SetLineWidth(w float64)`\n\nDefine a espessura da linha usada para desenhar.\n\n---\n\n### `func (t *Pen) SavePNG(path string)`\n\nSalva a imagem atual em um arquivo PNG com o nome e caminho fornecido.\n\n---\n",
                "encoding": 0
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n)\n\nfunc randInt(min, max int) int {\n\treturn min + rand.Intn(max-min+1)\n}\n\nfunc main() {\n\tpen := NewPen(500, 500)   // cria um canvas de 500 de largura por 500 de altura\n\tpen.SetRGB(255, 0, 0)     // muda a cor do pincel para vermelho\n\tpen.SetPosition(250, 500) // move o pincel para x 250, y 500\n\tpen.SetHeading(90)        // coloca o pincel apontando para cima\n\tpen.Walk(100)             // anda 100 pixels\n\tpen.Left(30)              // dobra 30 graus para esquerda\n\tpen.Walk(100)             // anda 100 pixels\n\tpen.DrawCircle(50)        // desenha um c\u00edrculo de raio 50\n\tpen.Right(60)             // gira para direita 60 graus\n\tpen.Walk(150)\n\tfor range 10 {\n\t\tpen.Up()\n\t\tpen.Walk(30) // anda sem riscar\n\t\tpen.Down()\n\n\t\tpen.DrawCircle(10) //desenha um circulo pequeno\n\n\t\tpen.Up()\n\t\tpen.Walk(-30) // volta sem riscar\n\t\tpen.Down()\n\n\t\tpen.Left(36) // gira\n\t}\n\n\tpen.SavePNG(\"tree.png\")\n\tfmt.Println(\"PNG file created successfully.\")\n}\n",
                "encoding": 0
            },
            {
                "name": "go.mod",
                "contents": "module fractais\n\ngo 1.24.2\n\nrequire (\n\tgithub.com/fogleman/gg v1.3.0 // indirect\n\tgithub.com/golang/freetype v0.0.0-20170609003504-e2365dfdc4a0 // indirect\n\tgolang.org/x/image v0.26.0 // indirect\n)\n",
                "encoding": 0
            }
        ]
    }
}
