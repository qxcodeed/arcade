{
    "title": "@classes: Implementando vector com @classes",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@classes: Implementando vector com @classes</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@classes: Implementando vector com @classes</h1>\n            <h1 id=\"implementando-vector-com-classes\">Implementando vector com @classes</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/classes/cover.jpg\" /></p>\n<p>Implemente as seguintes fun\u00e7\u00f5es do vetor din\u00e2mico.</p>\n<ul>\n<li>Ele deve ser iniciado utilizando aloca\u00e7\u00e3o din\u00e2mica e conter al\u00e9m do vetor de dados, <code>size</code> e <code>capacity</code> que definem o tamanho atual e a capacidade do vetor.</li>\n<li>Utilize o valgrind ao final para verificar se voc\u00ea desalocou corretamente todos os blocos de mem\u00f3ria.</li>\n</ul>\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case create\n$init 3\n$status\nsize:0 capacity:3\n$end\n</code></pre>\n\n<pre class=\"codehilite\"><code class=\"language-bash\">#__case add\n$init 5\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n#__case tentar estourar\n\n$add 7 3 2 1\n$show\n[ 3 4 5 1 7 ]\n$end\n</code></pre>\n\n<h2 id=\"codigo-base\">C\u00f3digo Base</h2>\n<pre class=\"codehilite\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;sstream&gt;\nusing namespace std;\n\n//double free corruption\n\nstruct Vector{\n    int capacity {0}; //esse {} \u00e9 o modo de inicializar default do c++ a partir do c++11\n    int size {0};\n    int * data {nullptr}; //inicializar pra n\u00e3o conter lixo\n\n    Vector(int capacity){\n        //inicialize this-&gt;capacity com capacity\n        //inicialize this-&gt;size com size\n        //crie mem\u00f3ria dinamicamente para this-&gt;data com tamanho capacity\n    }\n\n    //como seu vector tem atritutos do tipo ponteiros, voc\u00ea precisa criar um\n    //construtor de c\u00f3pia e um operador de atribui\u00e7\u00e3o ou ter\u00e1 erros do tipo double-free\n\n    //O operador de atribui\u00e7\u00e3o ser\u00e1 invocado quando voc\u00ea fizer um Vector receber outro\n    //Ex:\n    //Vector vec(4);\n    //vec = Vector(6);\n    //nesse ponto, os atributos de this j\u00e1 foram inicializados, \n    //mas voc\u00ea precisa alter\u00e1-los para copiar os valores de other\n    void operator = (const Vector&amp; other){\n        //inicialize this-&gt;capacity com other.capacity\n        //inicialize this-&gt;size com other.size\n        //se this-&gt;data n\u00e3o for nulo, devolva a mem\u00f3ria com delete\n        //crie nova mem\u00f3ria para this-&gt;data do tamanho de other.capacity\n        //copie os dados de other.data para this-&gt;data\n    }\n\n    //aqui voc\u00ea ensina seu vector a ser criado a partir de outro vector\n    //Ex: \n    //Vector v(4);\n    //Vector v2(v);\n    Vector(Vector&amp; other){\n        //aqui voc\u00ea n\u00e3o precisa fazer nada, basta utilizar o operador de atribui\u00e7\u00e3o\n        //que voc\u00ea j\u00e1 implementou\n        *this = other;\n    }\n    ~Vector(){\n        //devolta this-&gt;data\n    }\n    void add(int value){\n        //se ainda couber, copia value para o novo valor\n    }\n\n    //esse \u00e9 o toString do c++\n    //tudo que enviar para os, \u00e9 como se estivesse enviando para sa\u00edda padr\u00e3o\n    //basta entender o funcionamento\n    friend ostream&amp; operator&lt;&lt;(ostream &amp;os, Vector vector){\n        os &lt;&lt; &quot;[ &quot;;\n        for(int i = 0; i &lt; vector.size; i++)\n            os &lt;&lt; vector.data[i] &lt;&lt; &quot; &quot;;\n        os &lt;&lt; &quot;]&quot;;\n        return os;\n    }\n};\n\n\n/* NAO MEXA DAQUI PRA BAIXO */\nint main(){\n    string line, cmd;\n    int value;\n    Vector v(0);\n    while(true){\n        getline(cin, line);\n        cout &lt;&lt; &quot;$&quot; &lt;&lt; line &lt;&lt; endl;\n        stringstream ss(line);\n        ss &gt;&gt; cmd;\n        if(cmd == &quot;end&quot;){\n            break;\n        } else if(cmd == &quot;init&quot;){\n            ss &gt;&gt; value;\n            v = Vector(value);\n        } else if(cmd == &quot;status&quot;){\n            cout &lt;&lt; &quot;size:&quot; &lt;&lt; v.size &lt;&lt; &quot; capacity:&quot; &lt;&lt; v.capacity &lt;&lt; &quot;\\n&quot;;\n        } else if(cmd == &quot;add&quot;){\n            while(ss &gt;&gt; value)\n                v.add(value);\n        } else if(cmd == &quot;show&quot;){\n            cout &lt;&lt; v &lt;&lt; endl;\n        } else {\n            cout &lt;&lt; &quot;fail: comando invalido\\n&quot;;\n        }\n    }\n}\n</code></pre>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT create\ninit 3\nstatus\nend\n======== EXPECT\n$init 3\n$status\nsize:0 capacity:3\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT add\ninit 5\nshow\nadd 3 4 5 1\nshow\nend\n======== EXPECT\n$init 5\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT tentar estourar\ninit 5\nshow\nadd 3 4 5 1\nshow\nadd 7 3 2 1\nshow\nend\n======== EXPECT\n$init 5\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$add 7 3 2 1\n$show\n[ 3 4 5 1 7 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 01 init vazio 10%\nshow\nend\n======== EXPECT\n$show\n[ ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02 add !%\ninit 10\nshow\nadd 3 4 5 1\nshow\nend\n======== EXPECT\n$init 10\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03 add mais !%\ninit 10\nshow\nadd 3 4 5 1\nshow\nadd 7\nshow\nend\n======== EXPECT\n$init 10\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$add 7\n$show\n[ 3 4 5 1 7 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07 add mais !%\ninit 5\nshow\nadd 3 4 5 1\nshow\nadd 7\nshow\nend\n======== EXPECT\n$init 5\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$add 7\n$show\n[ 3 4 5 1 7 ]\n$end\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
