{
    "title": "@classes: Implementando vector com @classes",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@classes: Implementando vector com @classes</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@classes: Implementando vector com @classes</h1>\n            <h1 id=\"implementando-vector-com-classes\">Implementando vector com @classes</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/classes/cover.jpg\" /></p>\n<p>Implemente as seguintes fun\u00e7\u00f5es do vetor din\u00e2mico.</p>\n<ul>\n<li>Ele deve ser iniciado utilizando aloca\u00e7\u00e3o din\u00e2mica e conter al\u00e9m do vetor de dados, <code>size</code> e <code>capacity</code> que definem o tamanho atual e a capacidade do vetor.</li>\n<li>Utilize o valgrind ao final para verificar se voc\u00ea desalocou corretamente todos os blocos de mem\u00f3ria.</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">#__case create</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"nv\">$status</span>\nsize:0<span class=\"w\"> </span>capacity:3\n<span class=\"nv\">$end</span>\n</code></pre></div>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">#__case add</span>\n<span class=\"nv\">$init</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"w\"> </span><span class=\"o\">]</span>\n<span class=\"nv\">$add</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">]</span>\n<span class=\"c1\">#__case tentar estourar</span>\n\n<span class=\"nv\">$add</span><span class=\"w\"> </span><span class=\"m\">7</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">7</span><span class=\"w\"> </span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n\n<h2 id=\"codigo-base\">C\u00f3digo Base</h2>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;sstream&gt;</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"k\">namespace</span><span class=\"w\"> </span><span class=\"nn\">std</span><span class=\"p\">;</span>\n\n<span class=\"c1\">//double free corruption</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Vector</span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">capacity</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">//esse {} \u00e9 o modo de inicializar default do c++ a partir do c++11</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"k\">nullptr</span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">//inicializar pra n\u00e3o conter lixo</span>\n\n<span class=\"w\">    </span><span class=\"n\">Vector</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">capacity</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"c1\">//inicialize this-&gt;capacity com capacity</span>\n<span class=\"w\">        </span><span class=\"c1\">//inicialize this-&gt;size com size</span>\n<span class=\"w\">        </span><span class=\"c1\">//crie mem\u00f3ria dinamicamente para this-&gt;data com tamanho capacity</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">//como seu vector tem atritutos do tipo ponteiros, voc\u00ea precisa criar um</span>\n<span class=\"w\">    </span><span class=\"c1\">//construtor de c\u00f3pia e um operador de atribui\u00e7\u00e3o ou ter\u00e1 erros do tipo double-free</span>\n\n<span class=\"w\">    </span><span class=\"c1\">//O operador de atribui\u00e7\u00e3o ser\u00e1 invocado quando voc\u00ea fizer um Vector receber outro</span>\n<span class=\"w\">    </span><span class=\"c1\">//Ex:</span>\n<span class=\"w\">    </span><span class=\"c1\">//Vector vec(4);</span>\n<span class=\"w\">    </span><span class=\"c1\">//vec = Vector(6);</span>\n<span class=\"w\">    </span><span class=\"c1\">//nesse ponto, os atributos de this j\u00e1 foram inicializados, </span>\n<span class=\"w\">    </span><span class=\"c1\">//mas voc\u00ea precisa alter\u00e1-los para copiar os valores de other</span>\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"k\">operator</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"c1\">//inicialize this-&gt;capacity com other.capacity</span>\n<span class=\"w\">        </span><span class=\"c1\">//inicialize this-&gt;size com other.size</span>\n<span class=\"w\">        </span><span class=\"c1\">//se this-&gt;data n\u00e3o for nulo, devolva a mem\u00f3ria com delete</span>\n<span class=\"w\">        </span><span class=\"c1\">//crie nova mem\u00f3ria para this-&gt;data do tamanho de other.capacity</span>\n<span class=\"w\">        </span><span class=\"c1\">//copie os dados de other.data para this-&gt;data</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">//aqui voc\u00ea ensina seu vector a ser criado a partir de outro vector</span>\n<span class=\"w\">    </span><span class=\"c1\">//Ex: </span>\n<span class=\"w\">    </span><span class=\"c1\">//Vector v(4);</span>\n<span class=\"w\">    </span><span class=\"c1\">//Vector v2(v);</span>\n<span class=\"w\">    </span><span class=\"n\">Vector</span><span class=\"p\">(</span><span class=\"n\">Vector</span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"c1\">//aqui voc\u00ea n\u00e3o precisa fazer nada, basta utilizar o operador de atribui\u00e7\u00e3o</span>\n<span class=\"w\">        </span><span class=\"c1\">//que voc\u00ea j\u00e1 implementou</span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"k\">this</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"o\">~</span><span class=\"n\">Vector</span><span class=\"p\">(){</span>\n<span class=\"w\">        </span><span class=\"c1\">//devolta this-&gt;data</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"c1\">//se ainda couber, copia value para o novo valor</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">//esse \u00e9 o toString do c++</span>\n<span class=\"w\">    </span><span class=\"c1\">//tudo que enviar para os, \u00e9 como se estivesse enviando para sa\u00edda padr\u00e3o</span>\n<span class=\"w\">    </span><span class=\"c1\">//basta entender o funcionamento</span>\n<span class=\"w\">    </span><span class=\"k\">friend</span><span class=\"w\"> </span><span class=\"n\">ostream</span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"k\">operator</span><span class=\"o\">&lt;&lt;</span><span class=\"p\">(</span><span class=\"n\">ostream</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">os</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;[ &quot;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot; &quot;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;]&quot;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"cm\">/* NAO MEXA DAQUI PRA BAIXO */</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"w\">    </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cmd</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">Vector</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">){</span>\n<span class=\"w\">        </span><span class=\"n\">getline</span><span class=\"p\">(</span><span class=\"n\">cin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;$&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">stringstream</span><span class=\"w\"> </span><span class=\"n\">ss</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">cmd</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">&quot;end&quot;</span><span class=\"p\">){</span>\n<span class=\"w\">            </span><span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">&quot;init&quot;</span><span class=\"p\">){</span>\n<span class=\"w\">            </span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Vector</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">&quot;status&quot;</span><span class=\"p\">){</span>\n<span class=\"w\">            </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;size:&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot; capacity:&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">capacity</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">&quot;add&quot;</span><span class=\"p\">){</span>\n<span class=\"w\">            </span><span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">&quot;show&quot;</span><span class=\"p\">){</span>\n<span class=\"w\">            </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">&quot;fail: comando invalido</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT create\ninit 3\nstatus\nend\n======== EXPECT\n$init 3\n$status\nsize:0 capacity:3\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT add\ninit 5\nshow\nadd 3 4 5 1\nshow\nend\n======== EXPECT\n$init 5\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT tentar estourar\ninit 5\nshow\nadd 3 4 5 1\nshow\nadd 7 3 2 1\nshow\nend\n======== EXPECT\n$init 5\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$add 7 3 2 1\n$show\n[ 3 4 5 1 7 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 01 init vazio 10%\nshow\nend\n======== EXPECT\n$show\n[ ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02 add !%\ninit 10\nshow\nadd 3 4 5 1\nshow\nend\n======== EXPECT\n$init 10\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03 add mais !%\ninit 10\nshow\nadd 3 4 5 1\nshow\nadd 7\nshow\nend\n======== EXPECT\n$init 10\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$add 7\n$show\n[ 3 4 5 1 7 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07 add mais !%\ninit 5\nshow\nadd 3 4 5 1\nshow\nadd 7\nshow\nend\n======== EXPECT\n$init 5\n$show\n[ ]\n$add 3 4 5 1\n$show\n[ 3 4 5 1 ]\n$add 7\n$show\n[ 3 4 5 1 7 ]\n$end\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
