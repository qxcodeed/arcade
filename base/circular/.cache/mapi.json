{
    "title": "@circular: Lista Sequencial Circular",
    "description": "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@circular: Lista Sequencial Circular</title>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n        </head>\n        <body>\n            <h1>@circular: Lista Sequencial Circular</h1>\n            <h1 id=\"lista-sequencial-circular\">Lista Sequencial Circular</h1>\n<p>Nesse exerc\u00edcio, implementaremos m\u00e9todos de uma estrutura circular.</p>\n<p>Teoricamente, uma lista circular consiste em uma lista original que \u00e9 repetida infinitas vezes. Por exemplo: a seguinte lista linear [1,2,3] \u00e9 convertida para a seguinte lista circular: [1,2,3,1,2,3,1,2,3,1,2,3,1,..].</p>\n<p>Na pr\u00e1tica, iremos salvar o vetor original e apenas modificar a forma na qual um elemento \u00e9 acessoado pelo \u00edndice.</p>\n<p>No arquivo\u00a0lib.cpp, se encontra a classe\u00a0SequentialSortedListInt\u00a0que possui apenas o seguinte m\u00e9todo com cabe\u00e7alho, mas sem implementa\u00e7\u00e3o:</p>\n<ul>\n<li>int get(int index);</li>\n</ul>\n<p>O m\u00e9todo\u00a0get\u00a0simular uma lista circular para retornar o elemento correto. \u00c9 poss\u00edvel implementar\u00a0esse m\u00e9todo com complexidade O(1).</p>\n<p>A funcionalidade de cada m\u00e9todo est\u00e1 descrita em coment\u00e1rios no pr\u00f3prio arquivo lib.cpp. Sua tarefa \u00e9 alterar o arquivo lib.cpp, implementando as funcionalidades faltantes citadas. Seu c\u00f3digo deve passar no \u00fanico caso de teste para ser considerado correto.</p>\n<p>OBS: N\u00e3o altere os m\u00e9todos j\u00e1 implementados.</p>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n            <script>hljs.highlightAll();</script>\n        </body>\n        </html>\n        ",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste\nteste\n======== EXPECT\n10\n20\n30\n40\n10\n20\n30\n40\n10\n20\n30\n40\nSequentialCircularList deleted\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "lib.cpp",
                "contents": "#include <iostream>\n// Preencha os metodos faltantes.\n// Os passos estao marcados com \"TODO\".\n\nstruct SequentialCircularList {\n    int size;       // Numero de elementos na lista\n    int maxSize;    // Capacidade maxima da lista\n    int* arrayList; // Ponteiro para a lista de elementos na memoria \n\n    // Construtor\n    SequentialCircularList(int maxSize){\n        this->size = 0;\n        this->maxSize = maxSize;\n        this->arrayList = new int[maxSize];\n    }\n\n    // Destrutor\n    ~SequentialCircularList(){\n        delete arrayList;\n        std::cout << \"SequentialCircularList deleted\" << std::endl;\n    }\n\n    // Retorna o valor do elemento na posicao 'index'\n    // Como a lista e circular, nao ha limite para o tamanho\n    // de 'index'.\n    int get(int index){\n        // TODO\n        //DEL!\n        return arrayList[index % size];\n\n        //ACT!\n        //(void) index;\n        //return -1;\n    }\n    // Exemplos para a 'arrayList' = [1,2,3]\n    // get(0) == 1\n    // get(1) == 2\n    // get(2) == 3\n    // get(3) == 1\n    // get(4) == 2\n    // get(5) == 3\n    // get(60) == 1\n    // get(271) == 2\n    // get(67583465) == 3\n    \n    void insert(int item){\n        if(size == maxSize)\n            return;\n        arrayList[size] = item;\n        size++;\n    }\n\n    // Remove elementos da lista\n    void clear(){\n        size = 0;\n    }\n};\n",
                "encoding": 0
            },
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao\n#include <iostream>\n#include \"lib.cpp\"\nconst int MAXSIZE = 16;\n\nint main(){\n    SequentialCircularList list(MAXSIZE);\n\n    list.insert(10);\n    list.insert(20);\n    list.insert(30);\n    list.insert(40);\n\n    std::cout << list.get(0) << std::endl; // 10\n    std::cout << list.get(1) << std::endl; // 20\n    std::cout << list.get(2) << std::endl; // 30\n    std::cout << list.get(3) << std::endl; // 40\n\n    std::cout << list.get(4) << std::endl; // 10\n    std::cout << list.get(5) << std::endl; // 20\n    std::cout << list.get(6) << std::endl; // 30\n    std::cout << list.get(7) << std::endl; // 40\n\n    std::cout << list.get(1195592) << std::endl; // 10\n    std::cout << list.get(6061) << std::endl; // 20\n    std::cout << list.get(56666) << std::endl; // 30\n    std::cout << list.get(396767) << std::endl; // 40\n}\n",
                "encoding": 0
            }
        ]
    }
}
