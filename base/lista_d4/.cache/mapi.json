{
    "title": "@lista_d4: Lista Circular utilizando Template",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@lista_d4: Lista Circular utilizando Template</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Lista Circular utilizando Template</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr>\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<!-- toch -->\n\n<h2>Intro</h2>\n<p>Vamos implementar uma lista circular utilizando template. A ideia \u00e9 que a lista seja gen\u00e9rica e possa armazenar qualquer tipo de dado. Al\u00e9m disso, o n\u00f3 deve ser um iterador, permitindo percorrer a lista de forma simples e intuitiva de forma infinita, j\u00e1 que a lista \u00e9 circular.</p>\n<h2>Guide</h2>\n<p>Vamos partir do c\u00f3digo da atividade anterior, a @lista_d2. A classe <code>LList</code> n\u00e3o vai sofrer nenhuma altera\u00e7\u00e3o, apenas os m\u00e9todos <code>Next</code> e <code>Prev</code> do n\u00f3 v\u00e3o ser alterados para que eles retornem o pr\u00f3ximo n\u00f3 da lista circular.</p>\n<div class=\"language-ts highlight\"><pre><span></span><code><span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">Node</span><span class=\"p\">[</span><span class=\"nx\">T</span><span class=\"w\"> </span><span class=\"nx\">comparable</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"w\">        </span><span class=\"c1\">// Valor \u00e9 p\u00fablico</span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">next</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"p\">[</span><span class=\"nx\">T</span><span class=\"p\">]</span><span class=\"w\">       </span><span class=\"c1\">// o pr\u00f3ximo n\u00f3 da lista</span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">prev</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"p\">[</span><span class=\"nx\">T</span><span class=\"p\">]</span><span class=\"w\">       </span><span class=\"c1\">// o n\u00f3 anterior</span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">root</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"p\">[</span><span class=\"nx\">T</span><span class=\"p\">]</span><span class=\"w\">       </span><span class=\"c1\">// aponta para o n\u00f3 sentinela da lista da qual ele faz parte</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Next</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"p\">[</span><span class=\"nx\">T</span><span class=\"p\">]</span><span class=\"w\">     </span><span class=\"c1\">// retorna o pr\u00f3ximo n\u00f3 na lista c\u00edrcular</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Prev</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"p\">[</span><span class=\"nx\">T</span><span class=\"p\">]</span><span class=\"w\">     </span><span class=\"c1\">// retorna o n\u00f3 anterior na lista c\u00edrcular</span>\n<span class=\"p\">}</span><span class=\"w\">    </span>\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">LList</span><span class=\"p\">[</span><span class=\"nx\">T</span><span class=\"w\"> </span><span class=\"nx\">comparable</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">root</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"p\">[</span><span class=\"nx\">T</span><span class=\"p\">]</span><span class=\"w\">              </span><span class=\"c1\">// N\u00f3 sentinela que marca o come\u00e7o e o fim da lista</span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">size</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\">                    </span><span class=\"c1\">// tamanho da lista</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Size</span><span class=\"p\">()</span><span class=\"w\">                       </span><span class=\"c1\">// retorna o tamanho da lista</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Clear</span><span class=\"p\">()</span><span class=\"w\">                      </span><span class=\"c1\">// apaga todos os n\u00f3s da lista</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">PushBack</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"w\"> </span><span class=\"nx\">T</span><span class=\"p\">)</span><span class=\"w\">            </span><span class=\"c1\">// adiciona um novo n\u00f3 com esse valor no fim da lista</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Front</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"p\">[</span><span class=\"nx\">T</span><span class=\"p\">]</span><span class=\"w\">            </span><span class=\"c1\">// retorna o primeiro n\u00f3 v\u00e1lido da lista ou nulo</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Back</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"p\">[</span><span class=\"nx\">T</span><span class=\"p\">]</span><span class=\"w\">             </span><span class=\"c1\">// retorna o \u00faltimo n\u00f3 v\u00e1lido da lista ou nulo</span>\n<span class=\"w\">    </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">Search</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"w\"> </span><span class=\"nx\">T</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Node</span><span class=\"p\">[</span><span class=\"nx\">T</span><span class=\"p\">]</span><span class=\"w\">    </span><span class=\"c1\">// retorna o n\u00f3 que cont\u00e9m a primeira ocorr\u00eancia desse valor ou nulo</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2>Shell</h2>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE forward</span>\n<span class=\"c1\"># forward &lt;value_to_search&gt; &lt;steps to walk&gt;</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$forward</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">9</span>\n<span class=\"o\">[</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE forward</span>\n<span class=\"c1\"># forward &lt;value_to_search&gt; &lt;steps to walk&gt;</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"nv\">$forward</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">9</span>\n<span class=\"o\">[</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n<div class=\"language-bash highlight\"><pre><span></span><code><span class=\"c1\">#TEST_CASE backward</span>\n<span class=\"c1\"># backward &lt;value_to_search&gt; &lt;steps to walk&gt;</span>\n<span class=\"nv\">$push_back</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"nv\">$show</span>\n<span class=\"o\">[</span><span class=\"m\">1</span>,<span class=\"w\"> </span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span>,<span class=\"w\"> </span><span class=\"m\">4</span>,<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"nv\">$backward</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">9</span>\n<span class=\"o\">[</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"o\">]</span>\n<span class=\"nv\">$end</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT forward\npush_back 1 2 3 4 5\nshow\nforward 3 9\nend\n======== EXPECT\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$forward 3 9\n[ 3 4 5 1 2 3 4 5 1 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT forward\npush_back 1\nshow\nforward 1 9\nend\n======== EXPECT\n$push_back 1\n$show\n[1]\n$forward 1 9\n[ 1 1 1 1 1 1 1 1 1 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT backward\npush_back 1 2 3 4 5\nshow\nbackward 3 9\nend\n======== EXPECT\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$backward 3 9\n[ 3 2 1 5 4 3 2 1 5 ]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# extra\n\nCom a implementa\u00e7\u00e3o do N\u00f3 como interador, os seguintes c\u00f3digos podem ser escritos, permitindo navegar e manipular a estrutura sem precisar lidar com a implementa\u00e7\u00e3o interna dela.\n\n```go\nvar llist LList = NewLList()\n\n// Adicionando valores na lista\nfor i := range 10 {\n    llist.PushBack(i)\n}\n\n// Iterando sobre a lista\nfor node := llist.Front(); node != nil; node = node.Next() {\n    fmt.Println(node.Value)\n}\n\n// Iterando de tr\u00e1s pra frente\nfor node := llist.Back(); node != nil; node = node.Prev() {\n    fmt.Println(node.Value)\n}\n\n// Busca de um n\u00f3\nnode := llist.Search(3)\nif node != nil {\n    fmt.Println(\"Encontrado:\", node.Value)\n} else {\n    fmt.Println(\"N\u00e3o encontrado\")\n}\n\n// Removendo todos os n\u00f3s impares\nfor node := llist.Front(); node != nil; { // come\u00e7a do primeiro n\u00f3\n    if node.Value%2 == 1 {                // se o valor for impar\n        node = llist.remove(node)         // remove o n\u00f3 e retorna o pr\u00f3ximo n\u00f3\n    } else {                              // se o valor for par\n        node = node.Next()                // apenas avan\u00e7a para o pr\u00f3ximo n\u00f3\n    }\n}\n\n```\n\n## Diagrama de Implementa\u00e7\u00e3o\n\n```go\nclass Node {\n    Value int    // Valor \u00e9 p\u00fablico\n    next *Node   // o pr\u00f3ximo n\u00f3 da lista\n    prev *Node   // o n\u00f3 anterior\n\n    root *Node   // aponta para o n\u00f3 sentinela da lista da qual ele faz parte\n    Next() *Node // retorna o pr\u00f3ximo n\u00f3 ou nulo, se o pr\u00f3ximo \u00e9 o root\n    Prev() *Node // retorna o n\u00f3 anterior ou nulo, se o anterior \u00e9 o root\n}\n\nclass LList {\n    root * Node                   // N\u00f3 sentinela que marca o come\u00e7o e o fim da lista\n    size int                      // tamanho da lista\n    Size()                        // retorna o tamanho da lista\n    Clear()                       // apaga todos os n\u00f3s da lista\n    PushFront(value int)          // adiciona um novo n\u00f3 com esse valor no in\u00edcio da lista\n    PushBack(value int)           // adiciona um novo n\u00f3 com esse valor no fim da lista\n    PopFront()                    // remove o primeiro valor da lista se existir\n    PopBack()                     // remove o \u00faltimo valor da lista se existir\n    Front() *Node                 // retorna o primeiro n\u00f3 v\u00e1lido da lista ou nulo\n    Back() *Node                  // retorna o \u00faltimo n\u00f3 v\u00e1lido da lista ou nulo\n    Search(value int) *Node       // retorna o n\u00f3 que cont\u00e9m a primeira ocorr\u00eancia desse valor ou nulo\n    Insert(node *Node, value int) // insere um novo n\u00f3 antes do n\u00f3 passado por refer\u00eancia\n    Remove(node *Node) *Node      // remove o n\u00f3 passado por refer\u00eancia retornando o n\u00f3 que ficou no lugar dele\n}\n```\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\ntype Node[T comparable] struct {\n\tValue T\n\tnext  *Node[T]\n\tprev  *Node[T]\n\troot  *Node[T]\n}\n\ntype LList[T comparable] struct {\n\troot *Node[T]\n\tsize int\n}\n\nfunc NewLList[T comparable]() *LList[T] {\n\troot := &Node[T]{}\n\troot.next = root\n\troot.prev = root\n\troot.root = root\n\treturn &LList[T]{root: root, size: 0}\n}\n\nfunc (n *Node[T]) Next() *Node[T] {\n\tif n.next == n.root {\n\t\treturn n.root.next\n\t}\n\treturn n.next\n}\n\nfunc (l *LList[T]) PushBack(value T) {\n\tl.insertBefore(l.root, value)\n}\n\nfunc (l *LList[T]) insertBefore(mark *Node[T], value T) {\n\tn := &Node[T]{Value: value, root: l.root}\n\tn.prev = mark.prev\n\tn.next = mark\n\tmark.prev.next = n\n\tmark.prev = n\n\tl.size++\n}\n\nfunc (l *LList[T]) String() string {\n\tvalues := []string{}\n\tfor n := l.root.next; n != l.root; n = n.next {\n\t\tvalues = append(values, fmt.Sprint(n.Value))\n\t}\n\treturn \"[\" + strings.Join(values, \", \") + \"]\"\n}\n\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n// \tll := NewLList[int]()\n\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\tfmt.Println(line)\n\t\targs := strings.Fields(line)\n\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := args[0]\n\n\t\tswitch cmd {\n\t\tcase \"show\":\n\t\t\t// fmt.Println(ll.String())\n\t\tcase \"size\":\n\t\t\t// fmt.Println(ll.Size())\n\t\tcase \"push_back\":\n\t\t\t// for _, v := range args[1:] {\n\t\t\t// \tnum, _ := strconv.Atoi(v)\n\t\t\t// \tll.PushBack(num)\n\t\t\t// }\n\t\tcase \"clear\":\n\t\t\t// ll.Clear()\n\t\tcase \"forward\":\n\t\t\t// search, _ := strconv.Atoi(args[1])\n\t\t\t// steps, _ := strconv.Atoi(args[2])\n\t\t\t// node := ll.Search(search)\n\t\t\t// if node == nil {\n\t\t\t// \tfmt.Println(\"fail: valor n\u00e3o encontrado\")\n\t\t\t// \tcontinue\n\t\t\t// }\n\t\t\t// collect := []string{}\n\t\t\t// for range steps {\n\t\t\t// \tcollect = append(collect, fmt.Sprintf(\"%v\", node.Value))\n\t\t\t// \tnode = node.Next()\n\t\t\t// }\n\t\t\t// fmt.Printf(\"[ %s ]\\n\", strings.Join(collect, \" \"))\n\t\tcase \"backward\":\n\t\t\t// search, _ := strconv.Atoi(args[1])\n\t\t\t// steps, _ := strconv.Atoi(args[2])\n\t\t\t// node := ll.Search(search)\n\t\t\t// if node == nil {\n\t\t\t// \tfmt.Println(\"fail: valor n\u00e3o encontrado\")\n\t\t\t// \tcontinue\n\t\t\t// }\n\t\t\t// collect := []string{}\n\t\t\t// for range steps {\n\t\t\t// \tcollect = append(collect, fmt.Sprintf(\"%v\", node.Value))\n\t\t\t// \tnode = node.Prev()\n\t\t\t// }\n\t\t\t// fmt.Printf(\"[ %s ]\\n\", strings.Join(collect, \" \"))\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
