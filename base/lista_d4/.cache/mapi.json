{
    "title": "@lista_d4: Lista Circular utilizando Template",
    "description": "# Lista Circular utilizando Template\n\n<!-- toch -->\n[Intro](#intro) | [Guide](#guide) | [Shell](#shell)\n-- | -- | --\n<!-- toch -->\n\n## Intro\n\nVamos implementar uma lista circular utilizando template. A ideia \u00e9 que a lista seja gen\u00e9rica e possa armazenar qualquer tipo de dado. Al\u00e9m disso, o n\u00f3 deve ser um iterador, permitindo percorrer a lista de forma simples e intuitiva de forma infinita, j\u00e1 que a lista \u00e9 circular.\n\n## Guide\n\nVamos partir do c\u00f3digo da atividade anterior, a @lista_d2. A classe `LList` n\u00e3o vai sofrer nenhuma altera\u00e7\u00e3o, apenas os m\u00e9todos `Next` e `Prev` do n\u00f3 v\u00e3o ser alterados para que eles retornem o pr\u00f3ximo n\u00f3 da lista circular.\n\n```ts\nclass Node[T comparable] {\n    - value: T        // Valor \u00e9 p\u00fablico\n    - next: *Node[T]       // o pr\u00f3ximo n\u00f3 da lista\n    - prev: *Node[T]       // o n\u00f3 anterior\n    - root: *Node[T]       // aponta para o n\u00f3 sentinela da lista da qual ele faz parte\n    + Next(): *Node[T]     // retorna o pr\u00f3ximo n\u00f3 na lista c\u00edrcular\n    + Prev(): *Node[T]     // retorna o n\u00f3 anterior na lista c\u00edrcular\n}    \n\nclass LList[T comparable] {\n    - root: *Node[T]              // N\u00f3 sentinela que marca o come\u00e7o e o fim da lista\n    - size: int                    // tamanho da lista\n    + Size()                       // retorna o tamanho da lista\n    + Clear()                      // apaga todos os n\u00f3s da lista\n    + PushBack(value T)            // adiciona um novo n\u00f3 com esse valor no fim da lista\n    + Front(): *Node[T]            // retorna o primeiro n\u00f3 v\u00e1lido da lista ou nulo\n    + Back(): *Node[T]             // retorna o \u00faltimo n\u00f3 v\u00e1lido da lista ou nulo\n    + Search(value T): *Node[T]    // retorna o n\u00f3 que cont\u00e9m a primeira ocorr\u00eancia desse valor ou nulo\n}\n```\n\n## Shell\n\n```bash\n#TEST_CASE forward\n# forward <value_to_search> <steps to walk>\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$forward 3 9\n[ 3 4 5 1 2 3 4 5 1 ]\n$end\n```\n\n```bash\n#TEST_CASE forward\n# forward <value_to_search> <steps to walk>\n$push_back 1\n$show\n[1]\n$forward 1 9\n[ 1 1 1 1 1 1 1 1 1 ]\n$end\n```\n\n```bash\n#TEST_CASE backward\n# backward <value_to_search> <steps to walk>\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$backward 3 9\n[ 3 2 1 5 4 3 2 1 5 ]\n$end\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT forward\npush_back 1 2 3 4 5\nshow\nforward 3 9\nend\n======== EXPECT\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$forward 3 9\n[ 3 4 5 1 2 3 4 5 1 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT forward\npush_back 1\nshow\nforward 1 9\nend\n======== EXPECT\n$push_back 1\n$show\n[1]\n$forward 1 9\n[ 1 1 1 1 1 1 1 1 1 ]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT backward\npush_back 1 2 3 4 5\nshow\nbackward 3 9\nend\n======== EXPECT\n$push_back 1 2 3 4 5\n$show\n[1, 2, 3, 4, 5]\n$backward 3 9\n[ 3 2 1 5 4 3 2 1 5 ]\n$end\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# extra\n\nCom a implementa\u00e7\u00e3o do N\u00f3 como interador, os seguintes c\u00f3digos podem ser escritos, permitindo navegar e manipular a estrutura sem precisar lidar com a implementa\u00e7\u00e3o interna dela.\n\n```go\nvar llist LList = NewLList()\n\n// Adicionando valores na lista\nfor i := range 10 {\n    llist.PushBack(i)\n}\n\n// Iterando sobre a lista\nfor node := llist.Front(); node != nil; node = node.Next() {\n    fmt.Println(node.Value)\n}\n\n// Iterando de tr\u00e1s pra frente\nfor node := llist.Back(); node != nil; node = node.Prev() {\n    fmt.Println(node.Value)\n}\n\n// Busca de um n\u00f3\nnode := llist.Search(3)\nif node != nil {\n    fmt.Println(\"Encontrado:\", node.Value)\n} else {\n    fmt.Println(\"N\u00e3o encontrado\")\n}\n\n// Removendo todos os n\u00f3s impares\nfor node := llist.Front(); node != nil; { // come\u00e7a do primeiro n\u00f3\n    if node.Value%2 == 1 {                // se o valor for impar\n        node = llist.remove(node)         // remove o n\u00f3 e retorna o pr\u00f3ximo n\u00f3\n    } else {                              // se o valor for par\n        node = node.Next()                // apenas avan\u00e7a para o pr\u00f3ximo n\u00f3\n    }\n}\n\n```\n\n## Diagrama de Implementa\u00e7\u00e3o\n\n```go\nclass Node {\n    Value int    // Valor \u00e9 p\u00fablico\n    next *Node   // o pr\u00f3ximo n\u00f3 da lista\n    prev *Node   // o n\u00f3 anterior\n\n    root *Node   // aponta para o n\u00f3 sentinela da lista da qual ele faz parte\n    Next() *Node // retorna o pr\u00f3ximo n\u00f3 ou nulo, se o pr\u00f3ximo \u00e9 o root\n    Prev() *Node // retorna o n\u00f3 anterior ou nulo, se o anterior \u00e9 o root\n}\n\nclass LList {\n    root * Node                   // N\u00f3 sentinela que marca o come\u00e7o e o fim da lista\n    size int                      // tamanho da lista\n    Size()                        // retorna o tamanho da lista\n    Clear()                       // apaga todos os n\u00f3s da lista\n    PushFront(value int)          // adiciona um novo n\u00f3 com esse valor no in\u00edcio da lista\n    PushBack(value int)           // adiciona um novo n\u00f3 com esse valor no fim da lista\n    PopFront()                    // remove o primeiro valor da lista se existir\n    PopBack()                     // remove o \u00faltimo valor da lista se existir\n    Front() *Node                 // retorna o primeiro n\u00f3 v\u00e1lido da lista ou nulo\n    Back() *Node                  // retorna o \u00faltimo n\u00f3 v\u00e1lido da lista ou nulo\n    Search(value int) *Node       // retorna o n\u00f3 que cont\u00e9m a primeira ocorr\u00eancia desse valor ou nulo\n    Insert(node *Node, value int) // insere um novo n\u00f3 antes do n\u00f3 passado por refer\u00eancia\n    Remove(node *Node) *Node      // remove o n\u00f3 passado por refer\u00eancia retornando o n\u00f3 que ficou no lugar dele\n}\n```\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\ntype Node[T comparable] struct {\n\tValue T\n\tnext  *Node[T]\n\tprev  *Node[T]\n\troot  *Node[T]\n}\n\ntype LList[T comparable] struct {\n\troot *Node[T]\n\tsize int\n}\n\nfunc NewLList[T comparable]() *LList[T] {\n\troot := &Node[T]{}\n\troot.next = root\n\troot.prev = root\n\troot.root = root\n\treturn &LList[T]{root: root, size: 0}\n}\n\nfunc (n *Node[T]) Next() *Node[T] {\n\tif n.next == n.root {\n\t\treturn n.root.next\n\t}\n\treturn n.next\n}\n\nfunc (l *LList[T]) PushBack(value T) {\n\tl.insertBefore(l.root, value)\n}\n\nfunc (l *LList[T]) insertBefore(mark *Node[T], value T) {\n\tn := &Node[T]{Value: value, root: l.root}\n\tn.prev = mark.prev\n\tn.next = mark\n\tmark.prev.next = n\n\tmark.prev = n\n\tl.size++\n}\n\nfunc (l *LList[T]) String() string {\n\tvalues := []string{}\n\tfor n := l.root.next; n != l.root; n = n.next {\n\t\tvalues = append(values, fmt.Sprint(n.Value))\n\t}\n\treturn \"[\" + strings.Join(values, \", \") + \"]\"\n}\n\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n// \tll := NewLList[int]()\n\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\tfmt.Println(line)\n\t\targs := strings.Fields(line)\n\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := args[0]\n\n\t\tswitch cmd {\n\t\tcase \"show\":\n\t\t\t// fmt.Println(ll.String())\n\t\tcase \"size\":\n\t\t\t// fmt.Println(ll.Size())\n\t\tcase \"push_back\":\n\t\t\t// for _, v := range args[1:] {\n\t\t\t// \tnum, _ := strconv.Atoi(v)\n\t\t\t// \tll.PushBack(num)\n\t\t\t// }\n\t\tcase \"clear\":\n\t\t\t// ll.Clear()\n\t\tcase \"forward\":\n\t\t\t// search, _ := strconv.Atoi(args[1])\n\t\t\t// steps, _ := strconv.Atoi(args[2])\n\t\t\t// node := ll.Search(search)\n\t\t\t// if node == nil {\n\t\t\t// \tfmt.Println(\"fail: valor n\u00e3o encontrado\")\n\t\t\t// \tcontinue\n\t\t\t// }\n\t\t\t// collect := []string{}\n\t\t\t// for range steps {\n\t\t\t// \tcollect = append(collect, fmt.Sprintf(\"%v\", node.Value))\n\t\t\t// \tnode = node.Next()\n\t\t\t// }\n\t\t\t// fmt.Printf(\"[ %s ]\\n\", strings.Join(collect, \" \"))\n\t\tcase \"backward\":\n\t\t\t// search, _ := strconv.Atoi(args[1])\n\t\t\t// steps, _ := strconv.Atoi(args[2])\n\t\t\t// node := ll.Search(search)\n\t\t\t// if node == nil {\n\t\t\t// \tfmt.Println(\"fail: valor n\u00e3o encontrado\")\n\t\t\t// \tcontinue\n\t\t\t// }\n\t\t\t// collect := []string{}\n\t\t\t// for range steps {\n\t\t\t// \tcollect = append(collect, fmt.Sprintf(\"%v\", node.Value))\n\t\t\t// \tnode = node.Prev()\n\t\t\t// }\n\t\t\t// fmt.Printf(\"[ %s ]\\n\", strings.Join(collect, \" \"))\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n",
                "type": "show"
            }
        ]
    }
}
