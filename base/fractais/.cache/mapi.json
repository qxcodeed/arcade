{
    "title": "@fractais: Desenhando Fractais",
    "description": "# Desenhando Fractais\n\nUtilizando o m\u00f3dulo de desenho de fractais em svg dispon\u00edvel no rascunho, tente desenhar os seguintes fractais:\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/arvore.png)\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/circulos.png)\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/gelo.png)\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/quadrados.png)\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/rotacao.png)\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/carpete.jpg)\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/triangulos.png)\n\n![_](https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/trigo.png)\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "pen.go",
                "contents": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"os\"\n)\n\ntype Pen struct {\n\tX           float64\n\tY           float64\n\tcolor       string\n\tstrokeWidth int\n\theading     float64\n\tisDown      bool\n\telements    []string\n\twidth       int\n\theight      int\n}\n\nfunc NewPen(width, height int) *Pen {\n\treturn &Pen{\n\t\tX:           float64(width) / 2,\n\t\tY:           float64(height) / 2,\n\t\tcolor:       \"rgb(0,0,0)\",\n\t\tstrokeWidth: 1,\n\t\theading:     0,\n\t\tisDown:      true,\n\t\telements:    []string{},\n\t\twidth:       width,\n\t\theight:      height,\n\t}\n}\n\nfunc (p *Pen) SetPosition(x, y float64) {\n\tp.X = x\n\tp.Y = y\n}\n\nfunc (p *Pen) SetColor(r, g, b int) {\n\tp.color = fmt.Sprintf(\"rgb(%d,%d,%d)\", r, g, b)\n}\n\nfunc (p *Pen) SetStrokeWidth(strokeWidth int) {\n\tp.strokeWidth = strokeWidth\n}\nfunc (p *Pen) SetHeading(heading float64) {\n\tp.heading = heading\n}\nfunc (p *Pen) SetDown(isDown bool) {\n\tp.isDown = isDown\n}\nfunc (p *Pen) Move(x, y float64) {\n\tif p.isDown {\n\t\tp.elements = append(p.elements, fmt.Sprintf(\n\t\t\t\"<line x1=\\\"%f\\\" y1=\\\"%f\\\" x2=\\\"%f\\\" y2=\\\"%f\\\" stroke=\\\"%s\\\" stroke-width=\\\"%d\\\" />\",\n\t\t\tp.X, p.Y, x, y, p.color, p.strokeWidth))\n\t}\n\tp.X = x\n\tp.Y = y\n}\n\nfunc (p *Pen) DrawCircle(radius float64) {\n\tif p.isDown {\n\t\tp.elements = append(p.elements, fmt.Sprintf(\n\t\t\t\"<circle cx=\\\"%f\\\" cy=\\\"%f\\\" r=\\\"%f\\\" stroke=\\\"%s\\\" fill=\\\"none\\\" stroke-width=\\\"%d\\\" />\",\n\t\t\tp.X, p.Y, radius, p.color, p.strokeWidth))\n\t}\n}\n\nfunc (p *Pen) Walk(distance float64) {\n\tnewX := p.X + distance*math.Cos(p.heading*math.Pi/180)\n\tnewY := p.Y - distance*math.Sin(p.heading*math.Pi/180)\n\tp.Move(newX, newY)\n}\n\nfunc (p *Pen) Rotate(angle float64) {\n\tp.heading += angle\n\tif p.heading >= 360 {\n\t\tp.heading -= 360\n\t} else if p.heading < 0 {\n\t\tp.heading += 360\n\t}\n}\n\nfunc (p *Pen) SaveToFile(filename string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\t_, err = file.WriteString(fmt.Sprintf(\"<svg width=\\\"%d\\\" height=\\\"%d\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n\", p.width, p.height))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// draw the background\n\t_, _ = file.WriteString(fmt.Sprintf(\"<rect width=\\\"%d\\\" height=\\\"%d\\\" fill=\\\"white\\\" />\\n\", p.width, p.height))\n\n\tfor _, element := range p.elements {\n\t\t_, err = file.WriteString(element + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\t_, err = file.WriteString(\"</svg>\")\n\treturn err\n}\n",
                "type": "show"
            },
            {
                "name": "extra.md",
                "contents": "# GO\n\n- Navegue at\u00e9 a pasta do projeto em database/fractais\n\n```bash\n# rode o projeto\ntko run *.go\n# abra o editor para ver o desenho gerado\ncode tree.svg\n```\n",
                "type": "show"
            },
            {
                "name": "draw.go",
                "contents": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n)\n\nfunc randInt(min, max int) int {\n\treturn min + rand.Intn(max-min+1)\n}\n\nfunc tree(p *Pen, tam float64) {\n\tfator := 0.75\n\tang := 35.0\n\n\tif tam < 10 {\n\t\tif randInt(0, 10) < 1 {\n\t\t\tp.SetColor(255, 0, 0)\n\t\t\tp.DrawCircle(tam)\n\t\t}\n\t\treturn\n\t}\n\tp.SetColor(randInt(0, 255), randInt(0, 255), randInt(0, 255))\n\tp.SetStrokeWidth(int(tam / 10))\n\tp.Walk(tam)\n\tp.Rotate(-ang)\n\ttree(p, tam*fator)\n\tp.Rotate(2 * ang)\n\ttree(p, tam*fator)\n\tp.Rotate(-ang)\n\tp.Walk(-tam)\n}\n\nfunc main() {\n\tpen := NewPen(500, 500)\n\tpen.SetColor(255, 0, 0)\n\tpen.SetPosition(250, 500)\n\tpen.SetHeading(90)\n\ttree(pen, 100)\n\tpen.SaveToFile(\"tree.svg\")\n\tfmt.Println(\"SVG file created successfully.\")\n}\n",
                "type": "show"
            }
        ]
    }
}
