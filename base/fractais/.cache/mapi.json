{
    "title": "@fractais: Desenhando Fractais",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@fractais: Desenhando Fractais</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Desenhando Fractais</h1>\n<p>Utilizando o m\u00f3dulo de desenho de fractais em svg dispon\u00edvel no rascunho, tente desenhar os seguintes fractais:</p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/arvore.png\" /></p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/circulos.png\" /></p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/gelo.png\" /></p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/quadrados.png\" /></p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/rotacao.png\" /></p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/carpete.jpg\" /></p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/triangulos.png\" /></p>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodeed/arcade/master/base/fractais/./desenhos/trigo.png\" /></p>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "pen.go",
                "contents": "package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"os\"\n)\n\ntype Pen struct {\n\tX           float64\n\tY           float64\n\tcolor       string\n\tstrokeWidth int\n\theading     float64\n\tisDown      bool\n\telements    []string\n\twidth       int\n\theight      int\n}\n\nfunc NewPen(width, height int) *Pen {\n\treturn &Pen{\n\t\tX:           float64(width) / 2,\n\t\tY:           float64(height) / 2,\n\t\tcolor:       \"rgb(0,0,0)\",\n\t\tstrokeWidth: 1,\n\t\theading:     0,\n\t\tisDown:      true,\n\t\telements:    []string{},\n\t\twidth:       width,\n\t\theight:      height,\n\t}\n}\n\nfunc (p *Pen) SetPosition(x, y float64) {\n\tp.X = x\n\tp.Y = y\n}\n\nfunc (p *Pen) SetColor(r, g, b int) {\n\tp.color = fmt.Sprintf(\"rgb(%d,%d,%d)\", r, g, b)\n}\n\nfunc (p *Pen) SetStrokeWidth(strokeWidth int) {\n\tp.strokeWidth = strokeWidth\n}\nfunc (p *Pen) SetHeading(heading float64) {\n\tp.heading = heading\n}\nfunc (p *Pen) SetDown(isDown bool) {\n\tp.isDown = isDown\n}\nfunc (p *Pen) Move(x, y float64) {\n\tif p.isDown {\n\t\tp.elements = append(p.elements, fmt.Sprintf(\n\t\t\t\"<line x1=\\\"%f\\\" y1=\\\"%f\\\" x2=\\\"%f\\\" y2=\\\"%f\\\" stroke=\\\"%s\\\" stroke-width=\\\"%d\\\" />\",\n\t\t\tp.X, p.Y, x, y, p.color, p.strokeWidth))\n\t}\n\tp.X = x\n\tp.Y = y\n}\n\nfunc (p *Pen) DrawCircle(radius float64) {\n\tif p.isDown {\n\t\tp.elements = append(p.elements, fmt.Sprintf(\n\t\t\t\"<circle cx=\\\"%f\\\" cy=\\\"%f\\\" r=\\\"%f\\\" stroke=\\\"%s\\\" fill=\\\"none\\\" stroke-width=\\\"%d\\\" />\",\n\t\t\tp.X, p.Y, radius, p.color, p.strokeWidth))\n\t}\n}\n\nfunc (p *Pen) Walk(distance float64) {\n\tnewX := p.X + distance*math.Cos(p.heading*math.Pi/180)\n\tnewY := p.Y - distance*math.Sin(p.heading*math.Pi/180)\n\tp.Move(newX, newY)\n}\n\nfunc (p *Pen) Rotate(angle float64) {\n\tp.heading += angle\n\tif p.heading >= 360 {\n\t\tp.heading -= 360\n\t} else if p.heading < 0 {\n\t\tp.heading += 360\n\t}\n}\n\nfunc (p *Pen) SaveToFile(filename string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\t_, err = file.WriteString(fmt.Sprintf(\"<svg width=\\\"%d\\\" height=\\\"%d\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n\", p.width, p.height))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// draw the background\n\t_, _ = file.WriteString(fmt.Sprintf(\"<rect width=\\\"%d\\\" height=\\\"%d\\\" fill=\\\"white\\\" />\\n\", p.width, p.height))\n\n\tfor _, element := range p.elements {\n\t\t_, err = file.WriteString(element + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\t_, err = file.WriteString(\"</svg>\")\n\treturn err\n}\n",
                "type": "show"
            },
            {
                "name": "extra.md",
                "contents": "# GO\n\n- Navegue at\u00e9 a pasta do projeto em database/fractais\n\n```bash\n# rode o projeto\ntko run *.go\n# abra o editor para ver o desenho gerado\ncode tree.svg\n```\n",
                "type": "show"
            },
            {
                "name": "draw.go",
                "contents": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n)\n\nfunc randInt(min, max int) int {\n\treturn min + rand.Intn(max-min+1)\n}\n\nfunc tree(p *Pen, tam float64) {\n\tfator := 0.75\n\tang := 35.0\n\n\tif tam < 10 {\n\t\tif randInt(0, 10) < 1 {\n\t\t\tp.SetColor(255, 0, 0)\n\t\t\tp.DrawCircle(tam)\n\t\t}\n\t\treturn\n\t}\n\tp.SetColor(randInt(0, 255), randInt(0, 255), randInt(0, 255))\n\tp.SetStrokeWidth(int(tam / 10))\n\tp.Walk(tam)\n\tp.Rotate(-ang)\n\ttree(p, tam*fator)\n\tp.Rotate(2 * ang)\n\ttree(p, tam*fator)\n\tp.Rotate(-ang)\n\tp.Walk(-tam)\n}\n\nfunc main() {\n\tpen := NewPen(500, 500)\n\tpen.SetColor(255, 0, 0)\n\tpen.SetPosition(250, 500)\n\tpen.SetHeading(90)\n\ttree(pen, 100)\n\tpen.SaveToFile(\"tree.svg\")\n\tfmt.Println(\"SVG file created successfully.\")\n}\n",
                "type": "show"
            }
        ]
    }
}
