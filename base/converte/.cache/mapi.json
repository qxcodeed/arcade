{
    "title": "@converte: Converte simples em dupla",
    "description": "# Converte simples em dupla\n\nDada uma lista simplesmente encadeada, sua tarefa \u00e9 implementar uma fun\u00e7\u00e3o que fa\u00e7a uma c\u00f3pia dessa lista, mas convertendo-a para uma lista duplamente encadeada.\nA struct SLinkedList::Node representa um n\u00f3 de uma lista singular, que possui apenas a informa\u00e7\u00e3o e um ponteiro para o pr\u00f3ximo.\u00a0A struct\u00a0DLinkedList::Node representa um n\u00f3 da lista duplamente encadeada, que possui ponteiros para o pr\u00f3ximo e anterior.\nVoc\u00ea deve implementar a fun\u00e7\u00e3o\u00a0DLinkedList::Node* convertToDouble(SLinkedList::Node *head)\n\n## Entrada\n\n- Ponteiro para n\u00f3 cabe\u00e7a da lista simplesmente encadeada.\n\n## Sa\u00edda\n\n- Retorna um ponteiro para uma nova lista duplamente encadeada, que possui as mesmas informa\u00e7\u00f5es da lista original.\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste 1\n main\n======== EXPECT\nLista simplesmente ligada: A -> B -> C -> D\nLista duplamente ligada: A <-> B <-> C <-> D\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao //\n// Altere somente as funcoes com TODO //\n\n#include <iostream>\n\nnamespace SLinkedList{\n    // No de uma lista simplesmente encadeada \n    // Nao altere essa struct\n    struct Node {\n        std::string info; // Informacao salva pelo usuario na lista\n        Node *next; // Ponteiro para o proximo elemento da lista\n\n        Node(std::string info, Node *next){\n            this->info = info;\n            this->next = next;\n        };\n\n        void print(){\n            std::cout << info;\n            if(this->next != nullptr){\n                std::cout << \" -> \";\n                this->next->print();\n            }else{\n                std::cout << std::endl;\n            }\n        }\n    };\n}\n\nnamespace DLinkedList{\n    // No de uma lista encadeada dupla\n    // Nao altere essa struct\n    struct Node {\n        std::string info; // Informacao salva pelo usuario na lista\n        Node *next; // Ponteiro para o proximo elemento da lista\n        Node *previous; // Ponteiro para o elemento anterior da lista\n\n        Node(std::string info, Node *next, Node *previous){\n            this->info = info;\n            this->next = next;\n            this->previous = previous;\n        };\n\n        void print(){\n            std::cout << info;\n            if(this->next != nullptr){\n                std::string arrow;\n                if(this->next->previous != this ){\n                    std::cout << \"Ponteiro 'previous' incorreto\" << std::endl;\n                    return;\n                }\n                std::cout << \" <-> \";\n                this->next->print();\n            }\n            else std::cout << std::endl;\n        }\n    };\n}\n\n// Altere a seguinte funcao:\n// Dada uma lista simplesmente encadeada,\n// essa funcao faz uma c\u00f3pia dessa lista,\n// mas convertendo-a para uma lista duplamente encadeada.\n// A funcao deve retornar um ponteiro para o No cabeca da lista dupla.\n//\n// OBS: parte da funcao esta implementada, altere o caso com TODO\n// OBS: nao e necessario apagar os Nos da lista original\nDLinkedList::Node* convertToDouble(SLinkedList::Node *head){\n    if(head == nullptr){ // Lista vazia\n        return nullptr;\n    }else if(head->next == nullptr){ // Lista com apenas um No\n        DLinkedList::Node* newHead = new DLinkedList::Node(head->info, nullptr, nullptr);\n        return newHead;\n    } else { // lista com mais de um No\n        // TODO: complete a funcao aqui\n        return new DLinkedList::Node(\"\", nullptr, nullptr);\n    }\n}\n// Exemplo:\n// L_simples == \"A\" -> \"B\" -> \"C\"\n// L_dupla = convertToDouble(L_simples)\n// L_dupla == \"A\" <-> \"B\" <-> \"C\"\n\nint main(){\n    /*    TESTE 1   */\n    // Lista A //\n    SLinkedList::Node *sNode1 = new SLinkedList::Node(\"A\", nullptr);\n    SLinkedList::Node *sNode2 = new SLinkedList::Node(\"B\", nullptr);\n    SLinkedList::Node *sNode3 = new SLinkedList::Node(\"C\", nullptr);\n    SLinkedList::Node *sNode4 = new SLinkedList::Node(\"D\", nullptr);\n\n    sNode1->next = sNode2;\n    sNode2->next = sNode3;\n    sNode3->next = sNode4;\n    sNode4->next = nullptr;\n\n    std::cout << \"Lista simplesmente ligada: \"; sNode1->print();\n\n    DLinkedList::Node *dNode = convertToDouble(sNode1);\n    std::cout << \"Lista duplamente ligada: \"; dNode->print();\n}\n",
                "type": "show"
            }
        ]
    }
}
