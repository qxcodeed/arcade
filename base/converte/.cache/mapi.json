{
    "title": "@converte: Converte simples em dupla",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@converte: Converte simples em dupla</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n  </style>\n</head>\n<body>\n<h1 id=\"converte-simples-em-dupla\">Converte simples em dupla</h1>\n<p>Dada uma lista simplesmente encadeada, sua tarefa \u00e9 implementar uma\nfun\u00e7\u00e3o que fa\u00e7a uma c\u00f3pia dessa lista, mas convertendo-a para uma lista\nduplamente encadeada. A struct SLinkedList::Node representa um n\u00f3 de uma\nlista singular, que possui apenas a informa\u00e7\u00e3o e um ponteiro para o\npr\u00f3ximo.\u00a0A struct\u00a0DLinkedList::Node representa um n\u00f3 da lista duplamente\nencadeada, que possui ponteiros para o pr\u00f3ximo e anterior. Voc\u00ea deve\nimplementar a fun\u00e7\u00e3o\u00a0DLinkedList::Node*\nconvertToDouble(SLinkedList::Node *head)</p>\n<h2 id=\"entrada\">Entrada</h2>\n<ul>\n<li>Ponteiro para n\u00f3 cabe\u00e7a da lista simplesmente encadeada.</li>\n</ul>\n<h2 id=\"sa\u00edda\">Sa\u00edda</h2>\n<ul>\n<li>Retorna um ponteiro para uma nova lista duplamente encadeada, que\npossui as mesmas informa\u00e7\u00f5es da lista original.</li>\n</ul>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste 1\n main\n======== EXPECT\nLista simplesmente ligada: A -> B -> C -> D\nLista duplamente ligada: A <-> B <-> C <-> D\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao //\n// Altere somente as funcoes com TODO //\n\n#include <iostream>\n\nnamespace SLinkedList{\n    // No de uma lista simplesmente encadeada \n    // Nao altere essa struct\n    struct Node {\n        std::string info; // Informacao salva pelo usuario na lista\n        Node *next; // Ponteiro para o proximo elemento da lista\n\n        Node(std::string info, Node *next){\n            this->info = info;\n            this->next = next;\n        };\n\n        void print(){\n            std::cout << info;\n            if(this->next != nullptr){\n                std::cout << \" -> \";\n                this->next->print();\n            }else{\n                std::cout << std::endl;\n            }\n        }\n    };\n}\n\nnamespace DLinkedList{\n    // No de uma lista encadeada dupla\n    // Nao altere essa struct\n    struct Node {\n        std::string info; // Informacao salva pelo usuario na lista\n        Node *next; // Ponteiro para o proximo elemento da lista\n        Node *previous; // Ponteiro para o elemento anterior da lista\n\n        Node(std::string info, Node *next, Node *previous){\n            this->info = info;\n            this->next = next;\n            this->previous = previous;\n        };\n\n        void print(){\n            std::cout << info;\n            if(this->next != nullptr){\n                std::string arrow;\n                if(this->next->previous != this ){\n                    std::cout << \"Ponteiro 'previous' incorreto\" << std::endl;\n                    return;\n                }\n                std::cout << \" <-> \";\n                this->next->print();\n            }\n            else std::cout << std::endl;\n        }\n    };\n}\n\n// Altere a seguinte funcao:\n// Dada uma lista simplesmente encadeada,\n// essa funcao faz uma c\u00f3pia dessa lista,\n// mas convertendo-a para uma lista duplamente encadeada.\n// A funcao deve retornar um ponteiro para o No cabeca da lista dupla.\n//\n// OBS: parte da funcao esta implementada, altere o caso com TODO\n// OBS: nao e necessario apagar os Nos da lista original\nDLinkedList::Node* convertToDouble(SLinkedList::Node *head){\n    if(head == nullptr){ // Lista vazia\n        return nullptr;\n    }else if(head->next == nullptr){ // Lista com apenas um No\n        DLinkedList::Node* newHead = new DLinkedList::Node(head->info, nullptr, nullptr);\n        return newHead;\n    } else { // lista com mais de um No\n        // TODO: complete a funcao aqui\n        return new DLinkedList::Node(\"\", nullptr, nullptr);\n    }\n}\n// Exemplo:\n// L_simples == \"A\" -> \"B\" -> \"C\"\n// L_dupla = convertToDouble(L_simples)\n// L_dupla == \"A\" <-> \"B\" <-> \"C\"\n\nint main(){\n    /*    TESTE 1   */\n    // Lista A //\n    SLinkedList::Node *sNode1 = new SLinkedList::Node(\"A\", nullptr);\n    SLinkedList::Node *sNode2 = new SLinkedList::Node(\"B\", nullptr);\n    SLinkedList::Node *sNode3 = new SLinkedList::Node(\"C\", nullptr);\n    SLinkedList::Node *sNode4 = new SLinkedList::Node(\"D\", nullptr);\n\n    sNode1->next = sNode2;\n    sNode2->next = sNode3;\n    sNode3->next = sNode4;\n    sNode4->next = nullptr;\n\n    std::cout << \"Lista simplesmente ligada: \"; sNode1->print();\n\n    DLinkedList::Node *dNode = convertToDouble(sNode1);\n    std::cout << \"Lista duplamente ligada: \"; dNode->print();\n}\n",
                "encoding": 0
            }
        ]
    }
}
