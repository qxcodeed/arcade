{
    "title": "@converte: Converte simples em dupla",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@converte: Converte simples em dupla</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Converte simples em dupla</h1>\n<p>Dada uma lista simplesmente encadeada, sua tarefa \u00e9 implementar uma fun\u00e7\u00e3o que fa\u00e7a uma c\u00f3pia dessa lista, mas convertendo-a para uma lista duplamente encadeada.\nA struct SLinkedList::Node representa um n\u00f3 de uma lista singular, que possui apenas a informa\u00e7\u00e3o e um ponteiro para o pr\u00f3ximo.\u00a0A struct\u00a0DLinkedList::Node representa um n\u00f3 da lista duplamente encadeada, que possui ponteiros para o pr\u00f3ximo e anterior.\nVoc\u00ea deve implementar a fun\u00e7\u00e3o\u00a0DLinkedList::Node<em> convertToDouble(SLinkedList::Node </em>head)</p>\n<h2>Entrada</h2>\n<ul>\n<li>Ponteiro para n\u00f3 cabe\u00e7a da lista simplesmente encadeada.</li>\n</ul>\n<h2>Sa\u00edda</h2>\n<ul>\n<li>Retorna um ponteiro para uma nova lista duplamente encadeada, que possui as mesmas informa\u00e7\u00f5es da lista original.</li>\n</ul>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste 1\n main\n======== EXPECT\nLista simplesmente ligada: A -> B -> C -> D\nLista duplamente ligada: A <-> B <-> C <-> D\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao //\n// Altere somente as funcoes com TODO //\n\n#include <iostream>\n\nnamespace SLinkedList{\n    // No de uma lista simplesmente encadeada \n    // Nao altere essa struct\n    struct Node {\n        std::string info; // Informacao salva pelo usuario na lista\n        Node *next; // Ponteiro para o proximo elemento da lista\n\n        Node(std::string info, Node *next){\n            this->info = info;\n            this->next = next;\n        };\n\n        void print(){\n            std::cout << info;\n            if(this->next != nullptr){\n                std::cout << \" -> \";\n                this->next->print();\n            }else{\n                std::cout << std::endl;\n            }\n        }\n    };\n}\n\nnamespace DLinkedList{\n    // No de uma lista encadeada dupla\n    // Nao altere essa struct\n    struct Node {\n        std::string info; // Informacao salva pelo usuario na lista\n        Node *next; // Ponteiro para o proximo elemento da lista\n        Node *previous; // Ponteiro para o elemento anterior da lista\n\n        Node(std::string info, Node *next, Node *previous){\n            this->info = info;\n            this->next = next;\n            this->previous = previous;\n        };\n\n        void print(){\n            std::cout << info;\n            if(this->next != nullptr){\n                std::string arrow;\n                if(this->next->previous != this ){\n                    std::cout << \"Ponteiro 'previous' incorreto\" << std::endl;\n                    return;\n                }\n                std::cout << \" <-> \";\n                this->next->print();\n            }\n            else std::cout << std::endl;\n        }\n    };\n}\n\n// Altere a seguinte funcao:\n// Dada uma lista simplesmente encadeada,\n// essa funcao faz uma c\u00f3pia dessa lista,\n// mas convertendo-a para uma lista duplamente encadeada.\n// A funcao deve retornar um ponteiro para o No cabeca da lista dupla.\n//\n// OBS: parte da funcao esta implementada, altere o caso com TODO\n// OBS: nao e necessario apagar os Nos da lista original\nDLinkedList::Node* convertToDouble(SLinkedList::Node *head){\n    if(head == nullptr){ // Lista vazia\n        return nullptr;\n    }else if(head->next == nullptr){ // Lista com apenas um No\n        DLinkedList::Node* newHead = new DLinkedList::Node(head->info, nullptr, nullptr);\n        return newHead;\n    } else { // lista com mais de um No\n        // TODO: complete a funcao aqui\n        return new DLinkedList::Node(\"\", nullptr, nullptr);\n    }\n}\n// Exemplo:\n// L_simples == \"A\" -> \"B\" -> \"C\"\n// L_dupla = convertToDouble(L_simples)\n// L_dupla == \"A\" <-> \"B\" <-> \"C\"\n\nint main(){\n    /*    TESTE 1   */\n    // Lista A //\n    SLinkedList::Node *sNode1 = new SLinkedList::Node(\"A\", nullptr);\n    SLinkedList::Node *sNode2 = new SLinkedList::Node(\"B\", nullptr);\n    SLinkedList::Node *sNode3 = new SLinkedList::Node(\"C\", nullptr);\n    SLinkedList::Node *sNode4 = new SLinkedList::Node(\"D\", nullptr);\n\n    sNode1->next = sNode2;\n    sNode2->next = sNode3;\n    sNode3->next = sNode4;\n    sNode4->next = nullptr;\n\n    std::cout << \"Lista simplesmente ligada: \"; sNode1->print();\n\n    DLinkedList::Node *dNode = convertToDouble(sNode1);\n    std::cout << \"Lista duplamente ligada: \"; dNode->print();\n}\n",
                "type": "show"
            }
        ]
    }
}
