{
    "title": "@concatenar: Concatenar duas listas duplamente encadeadas",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@concatenar: Concatenar duas listas duplamente encadeadas</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Concatenar duas listas duplamente encadeadas</h1>\n<p>Dado duas listas duplamente encadeadas, sua fun\u00e7\u00e3o deve concaternar as duas.</p>\n<h2>Entrada</h2>\n<ul>\n<li>Ponteiro para n\u00f3 cabe\u00e7a da primeira lista 'headA'</li>\n<li>Ponteiro para n\u00f3 cabe\u00e7a da segunda lista 'headB'</li>\n</ul>\n<h2>Sa\u00edda</h2>\n<ul>\n<li>N\u00e3o h\u00e1 retorno. a lista deve estar invertida no final da fun\u00e7\u00e3o.</li>\n</ul>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste 1\n main\n======== EXPECT\nLista A: uno dos tres \nLista B: cuatro cinco seis siete \nConcatena Lista A e Lista B\nLista A (head): uno dos tres cuatro cinco seis siete \nLista A (tail): uno dos tres cuatro cinco seis siete \n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao //\n// Altere somente as funcoes com TODO //\n\n#include <iostream>\n\nstruct Node {\n    std::string info; // Informacao salva pelo usuario na lista\n    Node *next; // Ponteiro para o proximo elemento da lista\n    Node *previous; // Ponteiro para o elemento anterior da lista\n\n    Node(std::string info, Node *next, Node *previous){\n        this->info = info;\n        this->next = next;\n        this->previous = previous;\n    };\n};\n\nvoid printNodesFromHead(Node* current){\n    if(current == nullptr) return;\n\n    std::cout << current->info << \" \";\n    printNodesFromHead(current->next);\n}\n\nvoid printNodesFromTail(Node* current){\n    if(current == nullptr) return;\n\n    printNodesFromTail(current->previous);\n    std::cout << current->info << \" \";\n}\n\n\n// Altere essa funcao.\n// Concatena a lista A com a lista B atrav\u00e9s de seus\n// ponteiros 'headA' e 'headB'.\n// Apos essa operacao, todos os Nos de B sao adicionados\n// apos o final da lista A.\n// Pode assumir que nenhuma das duas listas esta vazia\nvoid concatenate(Node *headA, Node *headB){\n    // TODO\n    (void) headA;\n    (void) headB;\n}\n// Exemplo:\n// LA == \"A\" <-> \"B\" <-> \"C\"\n// LB == \"D\" <-> \"E\" <-> \"F\"\n// concatenate(LA, LB)\n// LA == \"A\" <-> \"B\" <-> \"C\" <-> \"D\" <-> \"E\" <-> \"F\"\n\nint main(){\n    /*    TESTE 1   */\n    // Lista A //\n    Node *nodeA1 = new Node(\"uno\", nullptr, nullptr);\n    Node *nodeA2 = new Node(\"dos\", nullptr, nullptr);\n    Node *nodeA3 = new Node(\"tres\", nullptr, nullptr);\n\n    nodeA1->next = nodeA2;\n    nodeA2->next = nodeA3;\n    nodeA3->next = nullptr;\n\n    nodeA1->previous = nullptr;\n    nodeA2->previous = nodeA1;\n    nodeA3->previous = nodeA2;\n\n    std::cout << \"Lista A: \"; printNodesFromHead(nodeA1); std::cout << std::endl;\n\n    // lista B //\n\n    Node *nodeB1 = new Node(\"cuatro\", nullptr, nullptr);\n    Node *nodeB2 = new Node(\"cinco\", nullptr, nullptr);\n    Node *nodeB3 = new Node(\"seis\", nullptr, nullptr);\n    Node *nodeB4 = new Node(\"siete\", nullptr, nullptr);\n\n    nodeB1->next = nodeB2;\n    nodeB2->next = nodeB3;\n    nodeB3->next = nodeB4;\n    nodeB4->next = nullptr;\n\n    nodeB1->previous = nullptr;\n    nodeB2->previous = nodeB1;\n    nodeB3->previous = nodeB2;\n    nodeB4->previous = nodeB3;\n\n    std::cout << \"Lista B: \"; printNodesFromHead(nodeB1); std::cout << std::endl;\n\n    std::cout << \"Concatena Lista A e Lista B\" << std::endl;\n    concatenate(nodeA1, nodeB1);\n    std::cout << \"Lista A (head): \"; printNodesFromHead(nodeA1); std::cout << std::endl;\n    std::cout << \"Lista A (tail): \"; printNodesFromTail(nodeB4); std::cout << std::endl;\n}\n",
                "type": "show"
            }
        ]
    }
}
