{
    "title": "@concatenar: Concatenar duas listas duplamente encadeadas",
    "description": "# Concatenar duas listas duplamente encadeadas\n\nDado duas listas duplamente encadeadas, sua fun\u00e7\u00e3o deve concaternar as duas.\n\n## Entrada\n\n- Ponteiro para n\u00f3 cabe\u00e7a da primeira lista 'headA'\n- Ponteiro para n\u00f3 cabe\u00e7a da segunda lista 'headB'\n\n## Sa\u00edda\n\n- N\u00e3o h\u00e1 retorno. a lista deve estar invertida no final da fun\u00e7\u00e3o.\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Teste 1\n main\n======== EXPECT\nLista A: uno dos tres \nLista B: cuatro cinco seis siete \nConcatena Lista A e Lista B\nLista A (head): uno dos tres cuatro cinco seis siete \nLista A (tail): uno dos tres cuatro cinco seis siete \n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "cpp": [
            {
                "name": "main.cpp",
                "contents": "// Arquivo de execucao //\n// Altere somente as funcoes com TODO //\n\n#include <iostream>\n\nstruct Node {\n    std::string info; // Informacao salva pelo usuario na lista\n    Node *next; // Ponteiro para o proximo elemento da lista\n    Node *previous; // Ponteiro para o elemento anterior da lista\n\n    Node(std::string info, Node *next, Node *previous){\n        this->info = info;\n        this->next = next;\n        this->previous = previous;\n    };\n};\n\nvoid printNodesFromHead(Node* current){\n    if(current == nullptr) return;\n\n    std::cout << current->info << \" \";\n    printNodesFromHead(current->next);\n}\n\nvoid printNodesFromTail(Node* current){\n    if(current == nullptr) return;\n\n    printNodesFromTail(current->previous);\n    std::cout << current->info << \" \";\n}\n\n\n// Altere essa funcao.\n// Concatena a lista A com a lista B atrav\u00e9s de seus\n// ponteiros 'headA' e 'headB'.\n// Apos essa operacao, todos os Nos de B sao adicionados\n// apos o final da lista A.\n// Pode assumir que nenhuma das duas listas esta vazia\nvoid concatenate(Node *headA, Node *headB){\n    // TODO\n    (void) headA;\n    (void) headB;\n}\n// Exemplo:\n// LA == \"A\" <-> \"B\" <-> \"C\"\n// LB == \"D\" <-> \"E\" <-> \"F\"\n// concatenate(LA, LB)\n// LA == \"A\" <-> \"B\" <-> \"C\" <-> \"D\" <-> \"E\" <-> \"F\"\n\nint main(){\n    /*    TESTE 1   */\n    // Lista A //\n    Node *nodeA1 = new Node(\"uno\", nullptr, nullptr);\n    Node *nodeA2 = new Node(\"dos\", nullptr, nullptr);\n    Node *nodeA3 = new Node(\"tres\", nullptr, nullptr);\n\n    nodeA1->next = nodeA2;\n    nodeA2->next = nodeA3;\n    nodeA3->next = nullptr;\n\n    nodeA1->previous = nullptr;\n    nodeA2->previous = nodeA1;\n    nodeA3->previous = nodeA2;\n\n    std::cout << \"Lista A: \"; printNodesFromHead(nodeA1); std::cout << std::endl;\n\n    // lista B //\n\n    Node *nodeB1 = new Node(\"cuatro\", nullptr, nullptr);\n    Node *nodeB2 = new Node(\"cinco\", nullptr, nullptr);\n    Node *nodeB3 = new Node(\"seis\", nullptr, nullptr);\n    Node *nodeB4 = new Node(\"siete\", nullptr, nullptr);\n\n    nodeB1->next = nodeB2;\n    nodeB2->next = nodeB3;\n    nodeB3->next = nodeB4;\n    nodeB4->next = nullptr;\n\n    nodeB1->previous = nullptr;\n    nodeB2->previous = nodeB1;\n    nodeB3->previous = nodeB2;\n    nodeB4->previous = nodeB3;\n\n    std::cout << \"Lista B: \"; printNodesFromHead(nodeB1); std::cout << std::endl;\n\n    std::cout << \"Concatena Lista A e Lista B\" << std::endl;\n    concatenate(nodeA1, nodeB1);\n    std::cout << \"Lista A (head): \"; printNodesFromHead(nodeA1); std::cout << std::endl;\n    std::cout << \"Lista A (tail): \"; printNodesFromTail(nodeB4); std::cout << std::endl;\n}\n",
                "type": "show"
            }
        ]
    }
}
