{
    "title": "@vetequals: Verifique se dois vetores s\u00e3o iguais recursivamente",
    "description": "# Verifique se dois vetores s\u00e3o iguais recursivamente\n\nEste documento descreve um m\u00e9todo para verificar se dois vetores s\u00e3o iguais de forma recursiva.\n\nVoc\u00ea n\u00e3o deve usar la\u00e7o, nem len ou size para verificar o tamanho dos vetores.\n\n## Entrada\n\n- 1a linha: valores do primeiro vetor separados por espa\u00e7o entre colchetes\n- 2a linha: valores do segundo vetor separados por espa\u00e7o entre colchetes\n\n## Sa\u00edda\n\n- \"iguais\" se os vetores forem iguais\n- \"diferentes\" se os vetores forem diferentes\n\n## Testes\n\n```txt\n\n>>>>>>>>\n[ ]\n[ ]\n========\niguais\n<<<<<<<<\n```\n\n```txt\n>>>>>>>>\n[ 1 ]\n[ 1 ]\n========\niguais\n<<<<<<<<\n```\n\n```txt\n>>>>>>>>\n[ 1 ]\n[ 1 2 ]\n========\ndiferentes\n<<<<<<<<\n\n>>>>>>>>\n[ 1 2 ]\n[ 1 ]\n========\ndiferentes\n<<<<<<<<\n\n>>>>>>>>\n[ 2 1 ]\n[ 1 ]\n========\ndiferentes\n<<<<<<<<\n\n>>>>>>>>\n[ 1 ]\n[ 2 1 ]\n========\ndiferentes\n<<<<<<<<\n\n>>>>>>>>\n[ 1 3 ]\n[ 2 1 ]\n========\ndiferentes\n<<<<<<<<\n\n>>>>>>>>\n[ 3 1 ]\n[ 2 1 ]\n========\ndiferentes\n<<<<<<<<\n\n>>>>>>>>\n[ 1 2 3 ]\n[ 1 2 3 ]\n========\niguais\n<<<<<<<<\n\n>>>>>>>>\n[ 1 2 3 4 ]\n[ 1 2 3 ]\n========\ndiferentes\n<<<<<<<<\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n[ ]\n[ ]\n======== EXPECT\niguais\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 ]\n[ 1 ]\n======== EXPECT\niguais\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 ]\n[ 1 2 ]\n======== EXPECT\ndiferentes\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 ]\n[ 1 ]\n======== EXPECT\ndiferentes\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 2 1 ]\n[ 1 ]\n======== EXPECT\ndiferentes\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 ]\n[ 2 1 ]\n======== EXPECT\ndiferentes\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 3 ]\n[ 2 1 ]\n======== EXPECT\ndiferentes\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 3 1 ]\n[ 2 1 ]\n======== EXPECT\ndiferentes\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 3 ]\n[ 1 2 3 ]\n======== EXPECT\niguais\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[ 1 2 3 4 ]\n[ 1 2 3 ]\n======== EXPECT\ndiferentes\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc EhVazio(vet []int) bool {\n\treturn fmt.Sprint(vet) == \"[]\"\n}\n\n// n\u00e3o altere a assinatura\nfunc equals(a []int, b []int) bool {\n\t// n\u00e3o use a fun\u00e7\u00e3o len para ver ou comparar os tamanhos\n\t// utilize a fun\u00e7\u00e3o EhVazio para ver se o vetor \u00e9 vazio\n\t// voc\u00ea s\u00f3 pode consultar o primeiro elemento do vetor\n\t// e n\u00e3o pode usar nenhum tipo de la\u00e7o\n\t// Use recursao para consultar os outros elementos equals(a[1:], b[1:])\n\t// n\u00e3o altere o prot\u00f3tipo da fun\u00e7\u00e3o nem crie fun\u00e7\u00f5es auxiliares\n\t_, _ = a, b\n\treturn false\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\tscanner.Scan()\n\tvet1 := str2slice(scanner.Text())\n\tscanner.Scan()\n\tvet2 := str2slice(scanner.Text())\n\tif equals(vet1, vet2) {\n\t\tfmt.Println(\"iguais\")\n\t} else {\n\t\tfmt.Println(\"diferentes\")\n\t}\n}\n\nfunc str2slice(line string) []int {\n\tparts := strings.Fields(line)\n\tnums := make([]int, 0)\n\tfor i := 1; i < len(parts)-1; i++ {\n\t\tvalue, _ := strconv.Atoi(parts[i])\n\t\tnums = append(nums, value)\n\t}\n\treturn nums\n}\n",
                "type": "show"
            }
        ]
    }
}
